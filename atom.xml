<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不忘初心</title>
  <subtitle>李奉华的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.forwardlee.com/"/>
  <updated>2018-05-16T11:24:35.333Z</updated>
  <id>http://www.forwardlee.com/</id>
  
  <author>
    <name>ForwardLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为未来而学</title>
    <link href="http://www.forwardlee.com/2018/05/16/%E4%B8%BA%E6%9C%AA%E6%9D%A5%E8%80%8C%E5%AD%A6/"/>
    <id>http://www.forwardlee.com/2018/05/16/为未来而学/</id>
    <published>2018-05-16T11:15:00.000Z</published>
    <updated>2018-05-16T11:24:35.333Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果一个人只满足于完成别人所要求的事情，那么，他只能是个奴隶，只有当他超越了这个限度，才会成为一个自由人。</div><div class="line"></div><div class="line">——哈佛学习格言</div></pre></td></tr></table></figure>
<p><strong>有关学习的两个困境</strong></p>
<p><strong>一、学习是一场竞赛，我们凭什么才可以胜出？</strong></p>
<p>大城市里面人们为了能够上一所“好的”小学，要选择购置学区房；</p>
<p>大城市里面为了能够将来上好的中学，还要报各种课外班，什么奥数，英语，绘画，书法，钢琴，足球，篮球······；</p>
<p>大城市里面孩子们每天不是在上学就是在上课外班，家长不是在送孩子去上学的路上就是在送孩子去课外班的路上。</p>
<p>这一切正常吗，我们是选择了随大流还是经过了深思熟虑的思考？这样的学习方式和节奏是最有效的吗？这场学习的竞赛普通的家庭有竞争优势吗？哪些能力在我们未来会让我们更有竞争优势呢？哪些方面的学习对我们一生更加重要呢？</p>
<p>不知道这些问题，朋友们有没有问过自己，有没有过深入的思考，有没有给自己一个答案。</p>
<p>与此相反的是，小城市、农村、郊区的孩子们多数情况是玩玩玩，大好的青春真的就在玩耍中渡过啦，想必长大后会后悔吧。毕竟，人生中有许多事情是需要时间的积累的，而时间是不可以购买的，时间是一去不复返的，错过真的很难弥补上。阅读，就属于这样的事情。</p>
<p>现在，城市与郊区的教育，重点学校与普通学校之间教育的差距越来越大，这种差距一方面体现在对教育的认知上，另一方面体现在优质的教育资源和用钱堆出来的课外兴趣班、优培班。</p>
<p>好在，我们还有一种方法，能够缩小这种无法改变的学习资源和环境差距。是什么样的方法呢？</p>
<p>俗话说，要用正确的方法做正确的事情。这一点最关键。我们要从学习的最根本出发，去探寻学习的本质，去掌握学习的方法，去洞察未来，这就是我们需要做的最正确的事情，它保证我们走在一条正确的道路上。而做这些事情，好的学校和富裕的家庭条件都不是必须的条件，需要的是我们的态度和行动。</p>
<p><strong>二、学习是为了生活，生活是一辈子的事情，我们是否有终身学习的准备？</strong></p>
<p>先不说，终身学习，就是学校里的学习，我们都无法很好地完成。这是为什么呢？</p>
<p>说不爱学习的人，实际是没有发现好的学习方式、引人入胜的学习资源、让人体会到收获和成就感的学习成果。甚至，从更根本上来说，是没有找到或发现学习的意义。</p>
<p>其实，人天生就是学习的好手，不仅具有好奇心，而且也爱学习。</p>
<p>学习中往往会：</p>
<p>因为不知道自己不知道，而没有思考；</p>
<p>因为不知道学习目标是什么，不知道为什么而学，而没有动力；</p>
<p>因为不知道学习方法，而无法采取行动；</p>
<p>因为不知道学习需要经历的过程，而无法坚持。</p>
<p>在这里，你将看清楚“学习”的样子，看清楚“学习的过程”，掌握“学习”的方法，知道并体会到“学习”带来的各种机会和可能性。</p>
<p>从此，你会亲手为自己打开一扇通往未来的希望之门，你会走在通往未来的道路上，而且还站在巨人的肩膀上。慢慢地，你会发现你已经不是原来的你了，你能看的更远，也能看的更加清晰。终身学习也因此成为了你生活中形影不离的朋友！<br><img src="/images/erweima.png" alt="二维码"></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="学习力" scheme="http://www.forwardlee.com/tags/%E5%AD%A6%E4%B9%A0%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>MySql分区操作（一）</title>
    <link href="http://www.forwardlee.com/2018/05/16/MySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2018/05/16/MySql分区操作（一）/</id>
    <published>2018-05-16T10:24:35.000Z</published>
    <updated>2018-05-16T11:01:31.080Z</updated>
    
    <content type="html"><![CDATA[<p>##分区类型<br>RANGE 连续的列值区间分区，有主键和唯一键必须使用，如果没有则可以指定任何一列；<br>LIST 类似RANGE分区，区别在于指定一系列的列值作为分区条件；<br>HASH 由函数表达式返回值决定所在分区，函数返回值必须为非负整数；<br>KEY 由mysql提供的HASH函数进行服务，==使用较少==。</p>
<p>##创建表分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE tbl_users (</div><div class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</div><div class="line">  `username` VARCHAR(255) NOT NULL,</div><div class="line">  `password` VARCHAR(255) NOT NULL,</div><div class="line">  `email` VARCHAR(255) NULL,</div><div class="line">  `sex` CHAR(1) NULL,</div><div class="line">  PRIMARY KEY (`pkid`))</div><div class="line">ENGINE = InnoDB</div><div class="line">DEFAULT CHARACTER SET = utf8 </div><div class="line">PARTITION BY RANGE(pkid) PARTITIONS 3( </div><div class="line">PARTITION part0 VALUES LESS THAN (10000),  </div><div class="line">PARTITION part1 VALUES LESS THAN (20000),  </div><div class="line">PARTITION part2 VALUES LESS THAN (MAXVALUE)</div><div class="line">) ;</div></pre></td></tr></table></figure>
<p>##查看分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from information_schema.partitions where table_schema=&apos;myblog&apos; and table_name=&apos;tbl_users&apos; \G;</div></pre></td></tr></table></figure>
<p>得到如下结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">*************************** 1. row ***************************</div><div class="line">                TABLE_CATALOG: def</div><div class="line">                 TABLE_SCHEMA: myblog</div><div class="line">                   TABLE_NAME: tbl_users</div><div class="line">               PARTITION_NAME: part0</div><div class="line">            SUBPARTITION_NAME: NULL</div><div class="line">   PARTITION_ORDINAL_POSITION: 1</div><div class="line">SUBPARTITION_ORDINAL_POSITION: NULL</div><div class="line">             PARTITION_METHOD: RANGE</div><div class="line">          SUBPARTITION_METHOD: NULL</div><div class="line">         PARTITION_EXPRESSION: pkid</div><div class="line">      SUBPARTITION_EXPRESSION: NULL</div><div class="line">        PARTITION_DESCRIPTION: 10000</div><div class="line">                   TABLE_ROWS: 0</div><div class="line">               AVG_ROW_LENGTH: 0</div><div class="line">                  DATA_LENGTH: 16384</div><div class="line">              MAX_DATA_LENGTH: NULL</div><div class="line">                 INDEX_LENGTH: 0</div><div class="line">                    DATA_FREE: 0</div><div class="line">                  CREATE_TIME: 2018-05-16 18:21:08</div><div class="line">                  UPDATE_TIME: NULL</div><div class="line">                   CHECK_TIME: NULL</div><div class="line">                     CHECKSUM: NULL</div><div class="line">            PARTITION_COMMENT: </div><div class="line">                    NODEGROUP: default</div><div class="line">              TABLESPACE_NAME: NULL</div><div class="line">*************************** 2. row ***************************</div><div class="line">                TABLE_CATALOG: def</div><div class="line">                 TABLE_SCHEMA: myblog</div><div class="line">                   TABLE_NAME: tbl_users</div><div class="line">               PARTITION_NAME: part1</div><div class="line">            SUBPARTITION_NAME: NULL</div><div class="line">   PARTITION_ORDINAL_POSITION: 2</div><div class="line">SUBPARTITION_ORDINAL_POSITION: NULL</div><div class="line">             PARTITION_METHOD: RANGE</div><div class="line">          SUBPARTITION_METHOD: NULL</div><div class="line">         PARTITION_EXPRESSION: pkid</div><div class="line">      SUBPARTITION_EXPRESSION: NULL</div><div class="line">        PARTITION_DESCRIPTION: 20000</div><div class="line">                   TABLE_ROWS: 0</div><div class="line">               AVG_ROW_LENGTH: 0</div><div class="line">                  DATA_LENGTH: 16384</div><div class="line">              MAX_DATA_LENGTH: NULL</div><div class="line">                 INDEX_LENGTH: 0</div><div class="line">                    DATA_FREE: 0</div><div class="line">                  CREATE_TIME: 2018-05-16 18:21:08</div><div class="line">                  UPDATE_TIME: NULL</div><div class="line">                   CHECK_TIME: NULL</div><div class="line">                     CHECKSUM: NULL</div><div class="line">            PARTITION_COMMENT: </div><div class="line">                    NODEGROUP: default</div><div class="line">              TABLESPACE_NAME: NULL</div><div class="line">*************************** 3. row ***************************</div><div class="line">                TABLE_CATALOG: def</div><div class="line">                 TABLE_SCHEMA: myblog</div><div class="line">                   TABLE_NAME: tbl_users</div><div class="line">               PARTITION_NAME: part2</div><div class="line">            SUBPARTITION_NAME: NULL</div><div class="line">   PARTITION_ORDINAL_POSITION: 3</div><div class="line">SUBPARTITION_ORDINAL_POSITION: NULL</div><div class="line">             PARTITION_METHOD: RANGE</div><div class="line">          SUBPARTITION_METHOD: NULL</div><div class="line">         PARTITION_EXPRESSION: pkid</div><div class="line">      SUBPARTITION_EXPRESSION: NULL</div><div class="line">        PARTITION_DESCRIPTION: MAXVALUE</div><div class="line">                   TABLE_ROWS: 0</div><div class="line">               AVG_ROW_LENGTH: 0</div><div class="line">                  DATA_LENGTH: 16384</div><div class="line">              MAX_DATA_LENGTH: NULL</div><div class="line">                 INDEX_LENGTH: 0</div><div class="line">                    DATA_FREE: 0</div><div class="line">                  CREATE_TIME: 2018-05-16 18:21:08</div><div class="line">                  UPDATE_TIME: NULL</div><div class="line">                   CHECK_TIME: NULL</div><div class="line">                     CHECKSUM: NULL</div><div class="line">            PARTITION_COMMENT: </div><div class="line">                    NODEGROUP: default</div><div class="line">              TABLESPACE_NAME: NULL</div><div class="line">3 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>##查看分区上的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from tbl_users partition(p0)</div></pre></td></tr></table></figure>
<p>##查看分区数据查询性能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain partitions select * from tbl_users where pkid =2;</div></pre></td></tr></table></figure>
<p>##其他分区类型<br>LIST类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `myblog`.`tbl_blog` (</div><div class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</div><div class="line">  `title` VARCHAR(255) NOT NULL,</div><div class="line">  `content` VARCHAR(5000) NULL,</div><div class="line">  `create_time` DATETIME NULL,</div><div class="line">  PRIMARY KEY (`pkid`))</div><div class="line">ENGINE = InnoDB</div><div class="line">DEFAULT CHARACTER SET = utf8</div><div class="line">COMMENT = &apos;博客文章&apos; PARTITION BY LIST(pkid) PARTITIONS 3(</div><div class="line"> PARTITION part0 VALUES IN (1,2,3),  </div><div class="line">PARTITION part1 VALUES IN (4,5,6),  </div><div class="line">PARTITION part2 VALUES IN (7,8,9)</div><div class="line">) ;</div></pre></td></tr></table></figure>
<p>HASH类型<br>利用分区字段除分区数量取余数，就把数据放到第余数个分区上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `myblog`.`tbl_user_friends` (</div><div class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</div><div class="line">  `user_id` INT NOT NULL,</div><div class="line">  `friend_id` INT NOT NULL,</div><div class="line">  `create_time` DATETIME NOT NULL,</div><div class="line">  PRIMARY KEY (`pki`))</div><div class="line">ENGINE = InnoDB</div><div class="line">DEFAULT CHARACTER SET = utf8</div><div class="line">COMMENT = &apos;用户好友&apos; PARTITION BY HASH(pkid) PARTITIONS 3 ;</div></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert into tbl_user_friends values(1,2,3,NULL);</div><div class="line">insert into tbl_user_friends values(5,2,3,NULL);</div></pre></td></tr></table></figure>
<p>得到结论</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">select * from tbl_user_friends partition(p1);</div><div class="line">+------+---------+-----------+-------------+</div><div class="line">| pkid | user_id | friend_id | create_time |</div><div class="line">+------+---------+-----------+-------------+</div><div class="line">|    1 |       2 |         3 | NULL        |</div><div class="line">+------+---------+-----------+-------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; select * from tbl_user_friends partition(p2);</div><div class="line">+------+---------+-----------+-------------+</div><div class="line">| pkid | user_id | friend_id | create_time |</div><div class="line">+------+---------+-----------+-------------+</div><div class="line">|    5 |       2 |         3 | NULL        |</div><div class="line">+------+---------+-----------+-------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##分区类型&lt;br&gt;RANGE 连续的列值区间分区，有主键和唯一键必须使用，如果没有则可以指定任何一列；&lt;br&gt;LIST 类似RANGE分区，区别在于指定一系列的列值作为分区条件；&lt;br&gt;HASH 由函数表达式返回值决定所在分区，函数返回值必须为非负整数；&lt;br&gt;KEY 由
    
    </summary>
    
    
      <category term="MySql" scheme="http://www.forwardlee.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>JDKBlockingQueue使用</title>
    <link href="http://www.forwardlee.com/2018/05/10/JDKBlockingQueue%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.forwardlee.com/2018/05/10/JDKBlockingQueue使用/</id>
    <published>2018-05-10T10:48:35.000Z</published>
    <updated>2018-05-10T10:49:22.428Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">package cn.klxx.multithread;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import java.util.concurrent.ArrayBlockingQueue;</div><div class="line">import java.util.concurrent.LinkedBlockingDeque;</div><div class="line">import java.util.concurrent.PriorityBlockingQueue;</div><div class="line">import java.util.concurrent.SynchronousQueue;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * @description JDK实现的阻塞和无阻塞队列测试</div><div class="line"> * @author ForwardLee</div><div class="line"> */</div><div class="line">public class JDKBlockingQueueTest &#123;</div><div class="line">    /**</div><div class="line">     * 有界阻塞队列</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void testArrayBlockingQueue() throws Exception &#123;</div><div class="line">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = new ArrayBlockingQueue&lt;String&gt;(5);</div><div class="line">        arrayBlockingQueue.add(&quot;a&quot;);</div><div class="line">        arrayBlockingQueue.add(&quot;b&quot;);</div><div class="line">        arrayBlockingQueue.add(&quot;c&quot;);</div><div class="line">        arrayBlockingQueue.add(&quot;d&quot;);</div><div class="line">        arrayBlockingQueue.add(&quot;e&quot;);</div><div class="line">        arrayBlockingQueue.add(&quot;f&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @descripiton 可以是有界阻塞队列，也可以是无解阻塞队列，关键看实例化队列对象用的构造方法是否初始化队列大小</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void testLinkedBlockingDeque() throws Exception &#123;</div><div class="line"></div><div class="line">        LinkedBlockingDeque&lt;String&gt; linkedBlockingDeque = new LinkedBlockingDeque&lt;String&gt;();//new LinkedBlockingDeque&lt;String&gt;(2)</div><div class="line">        linkedBlockingDeque.add(&quot;a&quot;);</div><div class="line">        linkedBlockingDeque.offer(&quot;b&quot;);</div><div class="line">        linkedBlockingDeque.add(&quot;c&quot; );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @description 同步阻塞队列，主要应用场景在于多线程之间的线程切换，例如线程池的实现。</div><div class="line">     * 不能直接往队列中存数据。要往队列中存数据，前提是必须要有一个线程等待取数据</div><div class="line">     * Executors.newCachedThreadPool()</div><div class="line">     *</div><div class="line">     * Creates a thread pool that creates new threads as needed, but</div><div class="line">     * will reuse previously constructed threads when they are</div><div class="line">     * available, and uses the provided</div><div class="line">     * ThreadFactory to create new threads when needed.</div><div class="line">     * &#123;@param threadFactory the factory to use when creating new threads</div><div class="line">     * @return the newly created thread pool</div><div class="line">     * @throws NullPointerException if threadFactory is null&#125;</div><div class="line">     *</div><div class="line">     * public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) &#123;</div><div class="line">     * return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</div><div class="line">     *             60L, TimeUnit.SECONDS,</div><div class="line">     *               new SynchronousQueue&lt;Runnable&gt;(),</div><div class="line">     *               threadFactory);</div><div class="line">     * &#125;</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void testSynchronousQueue() throws Exception &#123;</div><div class="line"></div><div class="line">        final SynchronousQueue&lt;String&gt; synchronousQueue = new SynchronousQueue&lt;String&gt;();</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    String peek = synchronousQueue.take();</div><div class="line">                    System.out.println(peek);</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(1000);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                synchronousQueue.add(&quot;a&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * PriorityBlockingQueue是带优先级的无界阻塞队列，每次出队都返回优先级最高的元素，</div><div class="line">     * 是二叉树最小堆的实现，研究过数组方式存放最小堆节点的都知道，直接遍历队列元素是无序的。</div><div class="line">     * 队列存储的对象必须实现Comparable接口</div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line">    @Test</div><div class="line">    public void testPriorityBlockingQueue() throws Exception &#123;</div><div class="line">        PriorityBlockingQueue&lt;ObjectWithComparable&gt;  priorityBlockingQueue= new PriorityBlockingQueue&lt;ObjectWithComparable&gt;();</div><div class="line">        ObjectWithComparable o1 = new ObjectWithComparable();</div><div class="line">        o1.setId(3);</div><div class="line">        priorityBlockingQueue.add(o1);</div><div class="line"></div><div class="line">        ObjectWithComparable o2 = new ObjectWithComparable();</div><div class="line">        o2.setId(4);</div><div class="line">        priorityBlockingQueue.add(o2);</div><div class="line"></div><div class="line">        ObjectWithComparable o3 = new ObjectWithComparable();</div><div class="line">        o3.setId(2);</div><div class="line">        priorityBlockingQueue.add(o3);</div><div class="line"></div><div class="line">        for (ObjectWithComparable objectWithComparable : priorityBlockingQueue) &#123;</div><div class="line">            System.out.println(priorityBlockingQueue.take());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class ObjectWithComparable implements Comparable&lt;ObjectWithComparable&gt;&#123;</div><div class="line">        private int id;</div><div class="line"></div><div class="line">        public int getId() &#123;</div><div class="line">            return id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setId(int id) &#123;</div><div class="line">            this.id = id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int compareTo(ObjectWithComparable o) &#123;</div><div class="line">            return this.id&gt;o.id? 1:(this.id&lt;o.id? -1:0);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public String toString() &#123;</div><div class="line">            return &quot;ObjectWithComparable&#123;&quot; +</div><div class="line">                    &quot;id=&quot; + id +</div><div class="line">                    &apos;&#125;&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.forwardlee.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>使用wait(),notify()配合synchronized实现自定义阻塞队列MyBlockingQueue</title>
    <link href="http://www.forwardlee.com/2018/05/09/%E4%BD%BF%E7%94%A8wait-notify-%E9%85%8D%E5%90%88synchronized%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97MyBlockingQueue/"/>
    <id>http://www.forwardlee.com/2018/05/09/使用wait-notify-配合synchronized实现自定义阻塞队列MyBlockingQueue/</id>
    <published>2018-05-09T09:04:30.000Z</published>
    <updated>2018-05-09T09:05:22.786Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">package cn.klxx.multithread;</div><div class="line"></div><div class="line">import java.util.LinkedList;</div><div class="line">import java.util.concurrent.TimeUnit;</div><div class="line">import java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author ForwardLee</div><div class="line"> * @description 使用synchronized关键字，wait()和notify()方法实现阻塞队列</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyBlockingQueue &#123;</div><div class="line"></div><div class="line">    //队列容器</div><div class="line">    private final LinkedList&lt;Object&gt; list = new LinkedList&lt;Object&gt;();</div><div class="line"></div><div class="line">    //队列大小,使用AtomicInteger可以保证在多线程获取队列大小时线程安全</div><div class="line">    private AtomicInteger count = new AtomicInteger(0);</div><div class="line"></div><div class="line">    //队列最大长度</div><div class="line">    private int maxSize;</div><div class="line"></div><div class="line">    //队列最小长度</div><div class="line">    private int minSize = 0;</div><div class="line"></div><div class="line">    //实现业务模型的锁</div><div class="line">    private Object lock = new Object();</div><div class="line"></div><div class="line">    public MyBlockingQueue(int length)&#123;</div><div class="line">        this.maxSize = length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @description 队列存数据</div><div class="line">     * @param obj</div><div class="line">     */</div><div class="line">    public void putObj(Object obj)&#123;</div><div class="line">        synchronized (lock)&#123;</div><div class="line">            if (count.get()==maxSize) &#123;</div><div class="line">                try &#123;</div><div class="line">                    lock.wait();//队列长度已经达到最大值，不能再继续存储数据，则线程处于等待状态，直至队列收到有可用位置的通知。</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            list.push(obj);</div><div class="line">            count.incrementAndGet();</div><div class="line">            lock.notify();//如果已经有线程等待获取队列数据，此时就通知取数据线程有数据了。</div><div class="line">            System.out.println(&quot;存入对象：&quot;+obj);</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @description 获取队列中的数据</div><div class="line">     * @return 返回队列的第一个元素</div><div class="line">     */</div><div class="line">    public Object getObject()&#123;</div><div class="line">        Object retVal = null;</div><div class="line">        synchronized (lock)&#123;</div><div class="line">            if (count.get()==0) &#123;</div><div class="line">                try &#123;</div><div class="line">                    lock.wait();</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            retVal = list.getFirst();</div><div class="line">            count.decrementAndGet();</div><div class="line">            lock.notify();//队列长度小于maxSize了，有存储空间了，就通知存储线程可以放入数据了。</div><div class="line">            System.out.println(&quot;取出对象：&quot;+retVal);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return retVal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        final MyBlockingQueue myBlockingQuene = new MyBlockingQueue(5);</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Object var1 = myBlockingQuene.getObject();</div><div class="line">            &#125;</div><div class="line">        &#125;,&quot;t1&quot;).start();</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                myBlockingQuene.putObj(&quot;abc1&quot;);</div><div class="line">                myBlockingQuene.putObj(&quot;abc2&quot;);</div><div class="line">                myBlockingQuene.putObj(&quot;abc3&quot;);</div><div class="line">                myBlockingQuene.putObj(&quot;abc4&quot;);</div><div class="line">                myBlockingQuene.putObj(&quot;abc5&quot;);</div><div class="line">                myBlockingQuene.putObj(&quot;abc6&quot;);</div><div class="line">                System.out.println(&quot;此时队列长度L1=&quot;+myBlockingQuene.count.get());</div><div class="line">                myBlockingQuene.putObj(&quot;abc7&quot;);//这个对象放不了，线程就处于等待状态了。</div><div class="line">            &#125;</div><div class="line">        &#125;,&quot;t2&quot;).start();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(5);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Object var2 = myBlockingQuene.getObject();//t2线程中的abc7对象此时才能放入队列。</div><div class="line">                System.out.println(&quot;此时队列长度L2=&quot;+myBlockingQuene.count.get());</div><div class="line">            &#125;</div><div class="line">        &#125;,&quot;t3&quot;).start();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.forwardlee.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch多线程性能</title>
    <link href="http://www.forwardlee.com/2018/05/08/java/CountDownLatch%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD/"/>
    <id>http://www.forwardlee.com/2018/05/08/java/CountDownLatch多线程性能/</id>
    <published>2018-05-08T11:26:19.000Z</published>
    <updated>2018-05-08T11:29:44.557Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><figcaption><span>cn.klxx.multithread;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">import java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Object方法wait()、notify()两个方法需要配合sychronized关键字使用，</div><div class="line"> * wait()方法释放锁，notify()方法占有锁，所以要先调用wait()方法，再调用notify()方法</div><div class="line"> */</div><div class="line">public class MyCountDownLatch &#123;</div><div class="line"></div><div class="line">static List list = new ArrayList();</div><div class="line"></div><div class="line">public void addString(String a)&#123;</div><div class="line">    list.add(a);</div><div class="line">    System.out.println(&quot;list add string!&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public int getSize()&#123;</div><div class="line">    return list.size();</div><div class="line">&#125;</div><div class="line"></div><div class="line">static final Object lock = new Object();</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        final MyCountDownLatch myCountDownLatch = new MyCountDownLatch();</div><div class="line"></div><div class="line">        Thread t1 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    synchronized (lock)&#123;</div><div class="line">                        for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">                            myCountDownLatch.addString(&quot;abc&quot;);</div><div class="line">                            Thread.sleep(500);</div><div class="line">                            if(list.size()==5)&#123;</div><div class="line">                                lock.notify();</div><div class="line">                                System.out.println(&quot;发出通知...&quot;);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        System.out.println(&quot;执行完这句话释放锁...&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,&quot;t1&quot;) ;</div><div class="line"></div><div class="line">        Thread t2 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    synchronized (lock) &#123;</div><div class="line">                        if (list.size()!=5) &#123;</div><div class="line">                            lock.wait();//此时t2处于等待中，不再继续往下执行代码，直到收到通知才继续执行</div><div class="line">                        &#125;</div><div class="line">                        System.out.println(&quot;t2 收到停止通知&quot;);</div><div class="line">                        throw new RuntimeException();</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,&quot;t2&quot;) ;</div><div class="line">        /**</div><div class="line">         * t2必须先启动，因为wait方法不会占有锁，不影响t1执行；如果t1先启动会占有锁，而t2则不能使用锁无法执行。</div><div class="line">         * 用wait和notify配合关键字sychronized关键字，使用等notify所在的sychronized关键字代码块执行完，</div><div class="line">         * wait所在的sychronized代码块才会继续执行，这样的最大问题就是收到通知的时间严重滞后于发送通知的时间。</div><div class="line">         * 所以要借助CountDownLatch来解决这个问题，CountDownLatch使用countDown方法发送完通知后也会继续执行，</div><div class="line">         * 但是await方法会马上收到通知继续执行代码，避免了收到通知的严重滞后问题。</div><div class="line">         */</div><div class="line">        t2.start();</div><div class="line">        t1.start();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(10000);</div><div class="line">            list.clear();</div><div class="line">            System.out.println(&quot;-----------------------------&quot;);</div><div class="line">            System.out.println(&quot;list.size:&quot;+list.size());</div><div class="line">            System.out.println(&quot;-----------------------------&quot;);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        final CountDownLatch countDownLatch = new CountDownLatch(1);</div><div class="line">        Thread t3 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">                        list.add(&quot;abc&quot;);</div><div class="line">                        System.out.println(&quot;list add string!&quot;);</div><div class="line">                        Thread.sleep(500);</div><div class="line">                        if (list.size()==5) &#123;</div><div class="line">                            System.out.println(&quot;发送通知&quot;);</div><div class="line">                            countDownLatch.countDown();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, &quot;t3&quot;);</div><div class="line"></div><div class="line">        Thread t4 = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    if (list.size()!=5) &#123;</div><div class="line">                        System.out.println(&quot;t4 等待...&quot;);</div><div class="line">                        countDownLatch.await();</div><div class="line">                    &#125;</div><div class="line">                    System.out.println(&quot;list.size:&quot;+list.size()+&quot; ,t4 停止&quot;);</div><div class="line">                    throw new RuntimeException();</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, &quot;t4&quot;);</div><div class="line"></div><div class="line">        t3.start();</div><div class="line">        t4.start();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;cn.klxx.multithread;&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.forwardlee.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.x进阶笔记（二）</title>
    <link href="http://www.forwardlee.com/2017/08/01/p/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2017/08/01/p/Laravel5.x进阶笔记（二）/</id>
    <published>2017-08-01T07:54:53.000Z</published>
    <updated>2017-08-01T08:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在浏览器中展示创建的Article列表"><a href="#在浏览器中展示创建的Article列表" class="headerlink" title="在浏览器中展示创建的Article列表"></a>在浏览器中展示创建的Article列表</h2><p>在浏览器中展示创建的Article数据，需要使用Http请求Web服务器，Web服务器接收请求并将Article数据在视图页面中展示，即MVC。完成上述操作，离不开Laravel的路由功能，所谓路由就是请求的控制转发。Laravel把所有的请求地址预先配置在路由列表文件中learnlaravel5/app/Http/routes.php。描述路由的基本格式是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</div></pre></td></tr></table></figure>
<p>Route类（\Illuminate\Support\Facades\Route）是Laravel框架提供的路由配置工具类，get标识http请求的Method（get/post/put/patch…），get函数的第一个参数是url格式定义，第二个参数用@分割成两部分，第一部分是Http请求的Controller类，第二部分标识Controller的具体执行方法，具体看HomeController类的内容描述：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App\Http\Controllers;</div><div class="line"></div><div class="line">use App\Article;</div><div class="line">use App\Http\Requests;</div><div class="line">use Illuminate\Http\Request;</div><div class="line"></div><div class="line">class HomeController extends \Illuminate\Routing\Controller</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * Create a new controller instance.</div><div class="line">     *</div><div class="line">     * @return void</div><div class="line">     */</div><div class="line">    public function __construct()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;middleware(&apos;auth&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Show the application dashboard.</div><div class="line">     *</div><div class="line">     * @return \Illuminate\Http\Response</div><div class="line">     */</div><div class="line">    public function index()</div><div class="line">    &#123;</div><div class="line">        return view(&apos;home&apos;)-&gt;withArticles(Article::all());;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>_construct()是默认构造函数，函数体使用middleware(‘auth’)中间件，描述访问这个Controller需要登录验证。index()方法则是在路由中指定的执行方法，返回值是一个视图层对象view，视图的目录位置是模板文件learnlaravel5/resources/views/home.blade.php，view(‘home’)中的home与模板文件的第一个关键字相同，index函数指定了返回的视图文件，并把Article数据通过Eloquent方法取出，使用withArticles方法携带返回到视图页面，此处withArticles标识在页面可以通过articles对象取得所有返回的数据，依次类推如果是withAcls,则在页面上使用acls对象获取返回的数据。home.blade.php示例（php模板语法自行解决）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@extends(&apos;layouts.app&apos;)</div><div class="line"></div><div class="line">@section(&apos;content&apos;)</div><div class="line">    &lt;div id=&quot;title&quot; style=&quot;text-align: center;&quot;&gt;</div><div class="line">        &lt;h1&gt;Learn Laravel 5&lt;/h1&gt;</div><div class="line">        &lt;div style=&quot;padding: 5px; font-size: 16px;&quot;&gt;Learn Laravel 5&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;div id=&quot;content&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            @foreach ($articles as $article)</div><div class="line">                &lt;li style=&quot;margin: 50px 0;&quot;&gt;</div><div class="line">                    &lt;div class=&quot;title&quot;&gt;</div><div class="line">                        &lt;a href=&quot;&#123;&#123; url(&apos;article/&apos;.$article-&gt;id) &#125;&#125;&quot;&gt;</div><div class="line">                            &lt;h4&gt;&#123;&#123; $article-&gt;title &#125;&#125;&lt;/h4&gt;</div><div class="line">                        &lt;/a&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;body&quot;&gt;</div><div class="line">                        &lt;p&gt;&#123;&#123; $article-&gt;body &#125;&#125;&lt;/p&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/li&gt;</div><div class="line">            @endforeach</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">@endsection</div></pre></td></tr></table></figure>
<p>通过浏览器输入<a href="http://localhost:1024/home，就能看到数据加载到页面。" target="_blank" rel="external">http://localhost:1024/home，就能看到数据加载到页面。</a><br><img src="/images/home_articles.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在浏览器中展示创建的Article列表&quot;&gt;&lt;a href=&quot;#在浏览器中展示创建的Article列表&quot; class=&quot;headerlink&quot; title=&quot;在浏览器中展示创建的Article列表&quot;&gt;&lt;/a&gt;在浏览器中展示创建的Article列表&lt;/h2&gt;&lt;p&gt;在浏
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.forwardlee.com/tags/PHP/"/>
    
      <category term="Laravel5" scheme="http://www.forwardlee.com/tags/Laravel5/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.x进阶笔记（一）</title>
    <link href="http://www.forwardlee.com/2017/08/01/p/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2017/08/01/p/Laravel5.x进阶笔记（一）/</id>
    <published>2017-08-01T06:42:53.000Z</published>
    <updated>2017-08-01T08:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="默认条件"><a href="#默认条件" class="headerlink" title="默认条件"></a>默认条件</h2><p>MacOS，&gt;=PHP5.4，翻墙环境（默认创建的项目会请求*.google.com）<br>懂得PHP基础知识和MVC的基本架构，开发环境已经安装Laravel所需的命令环境。</p>
<h2 id="配置composer中国镜像，使得本地开发环境下载依赖速度更快。"><a href="#配置composer中国镜像，使得本地开发环境下载依赖速度更快。" class="headerlink" title="配置composer中国镜像，使得本地开发环境下载依赖速度更快。"></a>配置composer中国镜像，使得本地开发环境下载依赖速度更快。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<h2 id="创建Laravel项目"><a href="#创建Laravel项目" class="headerlink" title="创建Laravel项目"></a>创建Laravel项目</h2><p>进入项目的工作空间目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace</div></pre></td></tr></table></figure>
<p>创建Laravel项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer -vvv create-project laravel/laravel learnlaravel5 5.2.31</div></pre></td></tr></table></figure></p>
<p>项目创建完成，进入刚刚创建的项目，并使用PHP内置server服务启动项目，访问页面验证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd learnlaravel5/public</div><div class="line">php -S 0.0.0.0:1024</div></pre></td></tr></table></figure>
<p>页面效果<br><img src="/images/15011226008351.jpg" alt=""><br>使用1024端口访问的目的是Unix系统的动态端口的开始端口，不需要进行端口配置，就可以启动监听。<br>如果单纯要学习Laravel或者PHP，请不要使用apache或者nginx这样的web服务器启动项目，对学习本身带来影响。</p>
<h2 id="启用Laravel针对PHP5-4版本的trait特性实现用户注册登录的功能，实现简单的用户权限管理"><a href="#启用Laravel针对PHP5-4版本的trait特性实现用户注册登录的功能，实现简单的用户权限管理" class="headerlink" title="启用Laravel针对PHP5.4版本的trait特性实现用户注册登录的功能，实现简单的用户权限管理"></a>启用Laravel针对PHP5.4版本的trait特性实现用户注册登录的功能，实现简单的用户权限管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd .. ##cd ~/workspace/learnlaravel5</div><div class="line">php artisan make:auth</div></pre></td></tr></table></figure>
<p>不需要停止php -S即可直接访问localhost:1024/login查看生成登录页面<br><img src="/images/15011235293792.jpg" alt=""></p>
<h2 id="Mysql创建数据库laravel5，用户名和密码均为root"><a href="#Mysql创建数据库laravel5，用户名和密码均为root" class="headerlink" title="Mysql创建数据库laravel5，用户名和密码均为root"></a>Mysql创建数据库laravel5，用户名和密码均为root</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database laravel5</div></pre></td></tr></table></figure>
<h2 id="修改learnlaravel5项目的配置文件"><a href="#修改learnlaravel5项目的配置文件" class="headerlink" title="修改learnlaravel5项目的配置文件"></a>修改learnlaravel5项目的配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/learnlaravel5</div><div class="line">open .env ##.env文件不存在，需要拷贝一份.env.example</div></pre></td></tr></table></figure>
<p>修改配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DB_CONNECTION=mysql</div><div class="line">DB_HOST=127.0.0.1</div><div class="line">DB_PORT=3306</div><div class="line">DB_DATABASE=laravel5</div><div class="line">DB_USERNAME=root</div><div class="line">DB_PASSWORD=root</div></pre></td></tr></table></figure>
<h2 id="使用laravel默认的数据库描述文件创建表"><a href="#使用laravel默认的数据库描述文件创建表" class="headerlink" title="使用laravel默认的数据库描述文件创建表"></a>使用laravel默认的数据库描述文件创建表</h2><p>执行命令创建表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
<p>migrate命令要执行的php描述文件是learnlaravel5/database/migrations下的文件</p>
<ul>
<li>2014_10_12_000000_create_users_table.php</li>
<li>2014_10_12_100000_create_password_resets_table.php<br>再查看一下laravel5数据库中是否创建了这两个描述文件中的表，如果已经创建，说明命令执行成功，就可以用注册页面注册用户了，赶快试一试。<h2 id="使用-Laravel-的“葵花宝典”：Eloquent"><a href="#使用-Laravel-的“葵花宝典”：Eloquent" class="headerlink" title="使用 Laravel 的“葵花宝典”：Eloquent"></a>使用 Laravel 的“葵花宝典”：Eloquent</h2>Eloquent是Laravel定义的Model基类，只要Larave创建Model就会继承Eloquent类，此时创建的Model就具有了十个异常强大的函数，从此想干啥事儿都是一行代码就搞定，创建一个Article的Model体验一下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:model Article</div></pre></td></tr></table></figure>
<p>创建Article对应的数据库描述文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration create_article_table</div></pre></td></tr></table></figure>
<p>打开刚刚创建的数据库迁移描述文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open learnlaravel5/database/migration/*_create_article_table.php</div></pre></td></tr></table></figure>
<p>修改文件的内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">use Illuminate\Database\Schema\Blueprint;</div><div class="line">use Illuminate\Database\Migrations\Migration;</div><div class="line"></div><div class="line">class CreateArticleTable extends Migration</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * Run the migrations.</div><div class="line">     *</div><div class="line">     * 创建文章表</div><div class="line">     *</div><div class="line">     * @return void</div><div class="line">     */</div><div class="line">    public function up()</div><div class="line">    &#123;</div><div class="line">        Schema::create(&apos;articles&apos;, function($table)</div><div class="line">        &#123;</div><div class="line">            $table-&gt;increments(&apos;id&apos;);</div><div class="line">            $table-&gt;string(&apos;title&apos;);</div><div class="line">            $table-&gt;text(&apos;body&apos;)-&gt;nullable();</div><div class="line">            $table-&gt;integer(&apos;user_id&apos;);</div><div class="line">            $table-&gt;timestamps();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Reverse the migrations.</div><div class="line">     *</div><div class="line">     * @return void</div><div class="line">     */</div><div class="line">    public function down()</div><div class="line">    &#123;</div><div class="line">        //</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次使用数据库迁移命令创建articles表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
<p>执行完后，在laravel5的数据库中会创建出articles的表结构。<br>使用Seeder往数据库中插入默认数据。首先创建一个Seeder，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:seeder ArticleSeeder</div></pre></td></tr></table></figure>
<p>在learnlaravel5/database/seeds/下打开并修改刚刚创建的ArticleSeeder.php文件，默认的run函数体为空，为其添加创建Article的数据脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public function run()</div><div class="line">    &#123;</div><div class="line">        DB::table(&apos;articles&apos;)-&gt;delete();</div><div class="line">        for ($i=0;$i&lt;10;$i++)&#123;</div><div class="line">            \App\Article::create([</div><div class="line">                &apos;title&apos;=&gt;&apos;Title&apos;.$i,</div><div class="line">                &apos;body&apos;=&gt;&apos;Body&apos;.$i,</div><div class="line">                &apos;user_id&apos;=&gt;1</div><div class="line">            ]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>把ArticleSeeder注册到项目的数据库执行环境中。打开learnlaravel5/database/seeds/DatabaseSeeder.php，并修改run函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function run()</div><div class="line">    &#123;</div><div class="line">         $this-&gt;call(ArticleSeeder::class);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>由于learnlaravel5/database目录不能被composer自动加载，所有需要执行命令让这个目录加载待composer环境，保证代码能找到ArticleSeedr这个类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer dump-autoload</div></pre></td></tr></table></figure>
<p>然后再执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan db:seed</div></pre></td></tr></table></figure>
<p>执行完，此时在数据库laravel5的article表中会产生10条数据。</p>
<p>下一节再讲解如何展示插入的数据 &gt;&gt;&gt;<a href="http://www.forwardlee.com/2017/08/01/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/">Laravel 5.x进阶笔记（二）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;默认条件&quot;&gt;&lt;a href=&quot;#默认条件&quot; class=&quot;headerlink&quot; title=&quot;默认条件&quot;&gt;&lt;/a&gt;默认条件&lt;/h2&gt;&lt;p&gt;MacOS，&amp;gt;=PHP5.4，翻墙环境（默认创建的项目会请求*.google.com）&lt;br&gt;懂得PHP基础知识和MV
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.forwardlee.com/tags/PHP/"/>
    
      <category term="Laravel5" scheme="http://www.forwardlee.com/tags/Laravel5/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.x进阶笔记（二）</title>
    <link href="http://www.forwardlee.com/2017/08/01/p/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2017/08/01/p/Laravel5.x进阶笔记（三）/</id>
    <published>2017-08-01T06:42:53.000Z</published>
    <updated>2017-08-01T08:21:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.forwardlee.com/tags/PHP/"/>
    
      <category term="Laravel5" scheme="http://www.forwardlee.com/tags/Laravel5/"/>
    
  </entry>
  
</feed>
