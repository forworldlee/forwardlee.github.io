<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不忘初心</title>
  <subtitle>李奉华的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.forwardlee.com/"/>
  <updated>2018-08-16T03:16:58.164Z</updated>
  <id>http://www.forwardlee.com/</id>
  
  <author>
    <name>ForwardLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis主从异步复制和Sentinel脑裂导致数据丢失的问题与解决方案</title>
    <link href="http://www.forwardlee.com/2018/08/13/Redis-Sentinel%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.forwardlee.com/2018/08/13/Redis-Sentinel脑裂问题与解决方案/</id>
    <published>2018-08-13T03:40:37.000Z</published>
    <updated>2018-08-16T03:16:58.164Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="redis主从异步复制导致数据丢失">Redis主从异步复制导致数据丢失</span></h1><p>因为Redis主从之间复制数据是异步进行的，那么就有可能在某一时刻Redis Master没有保存数据就突然宕机，此时还没来得及向Slave节点同步数据，就导致Master节点新写入的数据丢失。</p>
<h1><span id="redis-sentinel脑裂问题导致数据丢失">Redis Sentinel脑裂问题导致数据丢失</span></h1><p><img src="/2018/08/13/Redis-Sentinel脑裂问题与解决方案/11.png" alt="">Redis Master节点每次写入新数据，都会异步发送给Slave节点，在Redis Sentinel集群环境中，如果某一个时刻Redis Master节点出现网络故障，Sentinel与Master之间、Master与Slave之间不能通信，但是Sentinel和两个Slave节点还能正常通信，此时Sentinel会根据Slave节点判断Master sdown的数量是否达到qorum数量，达到条件就认为Master odown了，Sentinel会选举出一个新的Master节点提供服务，并且把另一个Slave节点的主从配置指向新的Master节点。与此同时，Client端与原有的Redis Master之间的通信并未中断，那么此时就会出现<strong>两个Master节点同时接收写入数据</strong>，而且两者之间没有主从同步。这就是Sentinel集群中的脑裂现象。当原有的Redis Master节点网络恢复后，Sentinel会把它变成Slave节点指向新的Master节点，那么原来的Master节点中的数据会被清空，重新从新的Master节点同步全量数据。</p>
<h2><span id="解决这两类问题的思路">解决这两类问题的思路</span></h2><p>Master节点记录了上次与Slave节点数据同步的offset值，并把新增数据写入本地缓冲区，异步发送给Slave节点。如果Master节点与Slave节点网络上断开，那么Master节点的新增数据会产生堆积，Master可以判断每个Slave节点从上次同步到现在的延迟时间，如果延迟时间达到一定值T，就可以认为与Slave节点断开连接，不再提供数据写服务。从客户端再写入的新数据，需要通过代码进行特殊处理。</p>
<ul>
<li>配置Redis Master达到与Slave的断开条件后，Master停止提供数据写入服务</li>
<li>对Redis Master数据写入接口进行限流、降级处理，把无法写入Redis的数据，临时写到消息队列中，保全数据，并再进行数据写入的重试</li>
</ul>
<h1><span id="redis配置及代码实现">redis配置及代码实现</span></h1><h2><span id="redis配置">Redis配置</span></h2><p>min-slaves-to-write 1</p>
<p>min-slaves-max-lag 10</p>
<p>两个选项相互关联，如果min-slaves-to-write配置为0，则Redis此特性表示关闭。</p>
<p>用此处的值解释为，至少有1个slave节点的数据同步延迟&lt;=10s，否则master节点将停止接收一切请求。</p>
<h2><span id="redis接口隔离和消息队列降级处理">Redis接口隔离和消息队列降级处理</span></h2><p>采用hystrix对Redis Master接口进行隔离，当Master节点不可用时，Redis服务接口降级为消息队列异步处理。定时（例如5分钟）从消息队列中获取未保存到Redis中的数据重新尝试写入redis。</p>
<p>消息发送端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveECourseInfo2RedisCmmd</span>  <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ECourseInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ECourseInfo eCourseInfo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaveECourseInfo2RedisCmmd</span><span class="params">(ECourseInfo eCourseInfo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>)));</span><br><span class="line">        <span class="keyword">this</span>.eCourseInfo =  eCourseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RedisService redisService = (RedisService) SpringContext.getContext().getBean(RedisService.class);</span><br><span class="line">        redisService.setValue(ECourseInfoKey.ID,eCourseInfo.getPkid()+<span class="string">""</span>, JSONObject.toJSONString(eCourseInfo));</span><br><span class="line">        log.info(<span class="string">"======="</span>+ JSONObject.toJSONString(eCourseInfo)+<span class="string">"========="</span>);</span><br><span class="line">        <span class="keyword">return</span> eCourseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(JSONObject.toJSONString(eCourseInfo));</span><br><span class="line">        jsonObject.put(<span class="string">"serviceId"</span>,<span class="string">"rewriteEcourseRedisDataService"</span>);</span><br><span class="line">        EcKafkaSender sender = SpringContext.getContext().getBean(EcKafkaSender.class);</span><br><span class="line">        sender.sendMsg(<span class="string">"redisDataRewrite"</span>,JSONObject.toJSONString(jsonObject));</span><br><span class="line">        <span class="keyword">return</span> eCourseInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消息接收端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDataRewriteScheduleKafkaConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics=<span class="string">"redisDataRewrite"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ConsumerRecord&lt;?, ?&gt; cr)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        log.info(<span class="string">"=======收到消息["</span>+cr.toString()+<span class="string">"]========"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收到课程管理服务数据更新的消息message，根据message对象返回的数据判断要进行的缓存处理操作</span></span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(JSONObject.toJSONString(cr));</span><br><span class="line">        String serviceId = ((String) jsonObject.get(<span class="string">"serviceId"</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"rewriteEcourseRedisDataService"</span>.equals(serviceId))&#123;</span><br><span class="line">            rewriteEcourseRedisData(jsonObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rewriteEcourseRedisData</span><span class="params">(JSONObject jsonObject)</span> </span>&#123;</span><br><span class="line">        jsonObject.remove(<span class="string">"serviceId"</span>);</span><br><span class="line">        ECourseInfo eCourseInfo = JSONObject.parseObject(JSONObject.toJSONString(jsonObject), ECourseInfo.class);</span><br><span class="line">        ReSaveECourseInfo2RedisCmmd reSaveECourseInfo2RedisCmmd = <span class="keyword">new</span> ReSaveECourseInfo2RedisCmmd(eCourseInfo);</span><br><span class="line">        reSaveECourseInfo2RedisCmmd.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="备用方案">备用方案</span></h1><p>Redis配置min-slaves-to-write和min-slaves-max-lag两个选项，在代码层，把从Client端提交到Redis-Master的数据先保存到磁盘文件，然后定时从磁盘文件中读取数据重新写入Redis。</p>
<h1><span id="补充">补充</span></h1><p>这种解决方案尽可能减少Redis主从复制和Sentinel脑裂后Master节点丢失的数据，不是100%不丢失数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;redis主从异步复制导致数据丢失&quot;&gt;Redis主从异步复制导致数据丢失&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;因为Redis主从之间复制数据是异步进行的，那么就有可能在某一时刻Redis Master没有保存数据就突然宕机，此时还没来得及向Slave节点同步数
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Sentinel" scheme="http://www.forwardlee.com/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>多级缓存实现服务高可用背后缓存雪崩和缓存穿透问题的解决方案</title>
    <link href="http://www.forwardlee.com/2018/07/26/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E8%83%8C%E5%90%8E%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%92%8C%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.forwardlee.com/2018/07/26/多级缓存实现服务高可用背后缓存雪崩和缓存穿透问题的解决方案/</id>
    <published>2018-07-26T07:54:49.000Z</published>
    <updated>2018-07-27T09:41:57.379Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="多级缓存架构实现服务高可用">多级缓存架构实现服务高可用</span></h1><h2><span id="传统web服务架构模式">传统web服务架构模式</span></h2><p><img src="/2018/07/26/多级缓存实现服务高可用背后缓存雪崩和缓存穿透问题的解决方案/简单的web服务架构.png" alt=""></p>
<p>请求从浏览器发起，到达Nginx代理服务器，可以加载静态资源，如html、js、css等；如果是请求动态内容，就会请求tomcat服务，从缓存、数据库、文件服务器加载。有一部分访问量大的数据，可以使用模板引擎技术，在数据发生变更时把动态数据加载到模板中，生成静态页面内容，当请求访问这部分数据时就可以直接加载静态页面内容了。</p>
<p>问题：随着业务量的增加，需要静态化处理的页面达到成千上万个时，每次数据变化都要静态化成千上万个页面，这个静态化操作过程的耗时量可想而知，而且会因为页面静态化过程大大降低Tomcat容器的吞吐量，降低性能。</p>
<a id="more"></a>
<h1><span id="双层nginx多级缓存架构设计">双层Nginx+多级缓存架构设计</span></h1><p><img src="/2018/07/26/多级缓存实现服务高可用背后缓存雪崩和缓存穿透问题的解决方案/双层Nginx+多级缓存架构图.png" alt=""></p>
<h2><span id="双层nginx架构">双层Nginx架构</span></h2><p>为了避免大量页面使用模板技术进行静态化带来的严重性能问题，使用Nginx+LUA脚本作为分发层，LUA脚本对请求的特殊参数进行与Nginx应用层数量取模运算，把请求分发到Nginx应用层；使用Nginx+LUA+Cache+模板进行应用层缓存处理，LUA脚本完成对应用层Tomcat接口的请求，并把返回数据写入Nginx本地缓存中，Nginx本地缓存的数据读取出来后渲染到模板页面，完成页面显示；通过以上两步操作，完成双层Nginx架构设计。这样频繁访问的热数据加载到应用层Nginx缓存中，并使用模板技术把缓存内容显示出来，请求从Nginx应用层中获取数据就返回了，不需要到达后端缓存服务或者数据库服务，提高了系统架构的健壮性。</p>
<p>分发层Nginx的LUA脚本代码：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> ecourseId = uri_args[<span class="string">"ecourseId"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> hosts = &#123;<span class="string">"192.168.1.210"</span>, <span class="string">"192.168.1.211"</span>&#125;</span><br><span class="line"><span class="keyword">local</span> hash = ngx.crc32_long(ecourseId)</span><br><span class="line"><span class="keyword">local</span> index = (hash % <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">backend = <span class="string">"http://"</span>..hosts[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> requestPath = uri_args[<span class="string">"requestPath"</span>]</span><br><span class="line">requestPath = <span class="string">"/"</span>..requestPath..<span class="string">"?ecourseId="</span>..ecourseId</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">"resty.http"</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(backend,&#123;</span><br><span class="line">  method = <span class="string">"GET"</span>,</span><br><span class="line">  <span class="built_in">path</span> = requestPath</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"request error: "</span>, err)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ngx.say(resp.body)</span><br><span class="line"></span><br><span class="line">httpc:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p>应用层Nginx的LUA脚本代码：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> ecourseId = uri_args[<span class="string">"ecourseId"</span>]</span><br><span class="line"><span class="keyword">local</span> authorId = uri_args[<span class="string">"authorId"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cache_ngx = ngx.shared.my_cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ecourseCacheKey = <span class="string">"ecourse_info_"</span>..ecourseId</span><br><span class="line"><span class="keyword">local</span> authorCacheKey = <span class="string">"author_info_"</span>..authorId</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ecourseCache = cache_ngx:get(ecourseCacheKey)</span><br><span class="line"><span class="keyword">local</span> authorCache = cache_ngx:get(authorCacheKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ecourseCache == <span class="string">""</span> <span class="keyword">or</span> ecourseCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">"resty.http"</span>)</span><br><span class="line">	<span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">local</span> resp, err = httpc:request_uri(<span class="string">"http://192.168.31.179:8080"</span>,&#123;</span><br><span class="line">  		method = <span class="string">"GET"</span>,</span><br><span class="line">  		<span class="built_in">path</span> = <span class="string">"/getEcourseInfo?ecourseId="</span>..ecourseId</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	ecourseCache = resp.body</span><br><span class="line">	<span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">tostring</span>(<span class="built_in">os</span>.<span class="built_in">time</span>()):<span class="built_in">reverse</span>():<span class="built_in">sub</span>(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line">	<span class="keyword">local</span> expireTime = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">600</span>,<span class="number">1200</span>)</span><br><span class="line">	cache_ngx:set(ecourseCacheKey, ecourseCache, expireTime)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> authorCache == <span class="string">""</span> <span class="keyword">or</span> authorCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">"resty.http"</span>)</span><br><span class="line">	<span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">local</span> resp, err = httpc:request_uri(<span class="string">"http://192.168.31.179:8080"</span>,&#123;</span><br><span class="line">  		method = <span class="string">"GET"</span>,</span><br><span class="line">  		<span class="built_in">path</span> = <span class="string">"/getEcourseAuthorInfo?authorId="</span>..authorId</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	authorCache = resp.body</span><br><span class="line">	cache_ngx:set(authorCacheKey, authorCache, <span class="number">10</span> * <span class="number">60</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">"cjson"</span>)</span><br><span class="line"><span class="keyword">local</span> ecourseCacheJSON = cjson.decode(ecourseCache)</span><br><span class="line"><span class="keyword">local</span> authorCacheJSON = cjson.decode(authorCache)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">	ecourseId = ecourseCacheJSON.id,</span><br><span class="line">	ecourseName = ecourseCacheJSON.name,</span><br><span class="line">	ecoursePrice = ecourseCacheJSON.price,</span><br><span class="line">	ecoursePictureList = ecourseCacheJSON.pictureList,</span><br><span class="line">	ecourseSpecification = ecourseCacheJSON.specification,</span><br><span class="line">	ecourseService = ecourseCacheJSON.service,</span><br><span class="line">	ecourseColor = ecourseCacheJSON.color,</span><br><span class="line">	ecourseSize = ecourseCacheJSON.size,</span><br><span class="line">	authorId = authorCacheJSON.id,</span><br><span class="line">	authorName = authorCacheJSON.name,</span><br><span class="line">	authorLevel = authorCacheJSON.level,</span><br><span class="line">	authorGoodCommentRate = authorCacheJSON.goodCommentRate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">"resty.template"</span>)</span><br><span class="line">template.render(<span class="string">"ecourse.html"</span>, context)</span><br></pre></td></tr></table></figure>
<p><strong>PS:</strong> OpenResty是打包了resty和lua模块的Nginx版本，能直接使用LUA脚本进行简单开发动态程序。</p>
<h2><span id="多级缓存架构">多级缓存架构</span></h2><p>为避免缓存失效后大量的数据访问请求到达MySQL数据库服务层导致MySQL服务被冲垮，需要在数据访问请求到达MySQL服务层之前进行多级缓存处理。在Nginx应用层已经实现了Cache缓存模板数据，在后端应用层中对数据缓存服务进行多层化设计，例如拆分成Redis共享缓存和Ehcache本地缓存，Ehcache缓存作为Redis共享缓存的补充，当应用层Nginx的请求到达缓存服务时，先查询Redis共享缓存中的数据，如果Redis中没有数据，再查询Ehcache本地缓存数据；如果Redis中有数据，就要写入Ehcache本地缓存，并返回请求；如果Redis共享缓存和Ehcache本地缓存中都没有数据，再调用数据生产服务接口从MySQL数据库中获取。</p>
<p>Redis共享缓存+Ehcache本地缓存代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ECourseInfo eCourseInfo = ecCacheService.getECoureseInfoFromRedis(ecourseId);</span><br><span class="line">log.info(<span class="string">"=======从redis中查询课程信息========="</span>);</span><br><span class="line"><span class="keyword">if</span> (eCourseInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">"=======从ehcache中查询课程信息========="</span>);</span><br><span class="line">    eCourseInfo = ecCacheService.getECoureseInfoFromEhcache(ecourseId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (eCourseInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">"=======调用MySQL数据生产服务接口获取eCourseInfo数据======="</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ehcache本地缓存配置ehcache.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 可以配置多个缓存策略，但是如果没有其他的缓存策略，则使用defaultCache缓存策略--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eternal过期是否可用，false有过期时间，true数据永不过期--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maxElementsInMemory 存储对象的个数，需要存储对象的大小计算可存储多少个对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- memoryStoreEvictionPolicy 当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"local"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照这样的设计，由Nginx本地缓存+Redis共享缓存+缓存服务Ehcache本地缓存构成三级缓存架构，也可以根据实际业务需求，增加更多的缓存层，保护后端MySQL服务。</p>
<h1><span id="缓存雪崩问题及对策">缓存雪崩问题及对策</span></h1><h2><span id="缓存雪崩">缓存雪崩</span></h2><p>通过多级缓存策略降低请求对后端Mysql服务的请求数量，但是当多级缓存在高并发场景下出现某个缓存服务接口不可用，大量的请求Blocking在这个接口上，耗费大量的缓存服务器资源，出现连锁反应，导致其他的缓存服务接口不可用，甚至导致缓存服务层全部瘫痪，所有的网络请求如果都被缓存服务层Blocking住，那么处于同一web容器内的所有服务会直接瘫痪；如果网络请求能够绕过缓存服务，所有的请求流量到达MySQL服务接口，那么就会使MySQL的瞬时连接数飙升，很快出现服务宕机，这样的场景是灾难性的，公司的经济损失也是不可估量的。</p>
<h2><span id="redis数据接口请求隔离和服务降级">Redis数据接口请求隔离和服务降级</span></h2><p>防止Redis服务接口因为网络问题导致接口服务阻塞或者宕机，可以对Redis的服务接口使用Hystrix进行请求资源隔离和服务降级。</p>
<h3><span id="hystrix-dashboard配置">Hystrix Dashboard配置</span></h3><p>Hystrix Dashboard可以对Hystrix Command接口监控，收集接口的执行性能数据，例如TP90、TP99、TP99.5的QPS数据。</p>
<p>在Hystrix Command所在工程内添加Hystrix Metrics依赖包，实现对接口的扫描监控</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-metrics-event-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册Hystrix Dashboard收集数据使用的HystrixMeticsStreamServlet</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">        servletRegistrationBean.setServlet(<span class="keyword">new</span> HystrixMetricsStreamServlet());</span><br><span class="line">        servletRegistrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>配置Hystrix应用集群监控的Turbine，在Turbine的TURBINE-HOME/WEB-INF/classes下创建config.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turbine.ConfigPropertyBasedDiscovery.default.instances=192.68.1.211,192.68.1.212</span><br><span class="line">turbine.instanceUrlSuffix=:8081/hystrix.stream</span><br></pre></td></tr></table></figure>
<p>启动Hystrix Dashboard 和Turbine两个web应用，Hystrix Dashboard用来显示收集的数据，自身实现单点监控，Turbine实现对Hystrix应用集群的监控。</p>
<p><img src="/2018/07/26/多级缓存实现服务高可用背后缓存雪崩和缓存穿透问题的解决方案/HystrixDashboard截图.png" alt=""></p>
<p>从图片中可以看出每个HystrixCommand执行的TP90、TP99、TP99.5耗时，从而也能计算出每个Command的QPS，根据Dashboard提供的数据，可以进一步优化HystrixCommandThreadPool配置。<a href="http://www.forwardlee.com/2018/07/25/Hystrix%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%AE%9E%E8%B7%B5/">Hystrix生产环境配置实践</a></p>
<h3><span id="redis接口限流和降级">Redis接口限流和降级</span></h3><p>使用Hystrix多级降级，并且在二级降级的HystrixCommand中实现fallback silent 或者 fallback stubbed，将Redis的服务接口隔离在单独的线程池内执行，即使当前Redis接口宕机，也不会占用其他接口资源，保证整个web服务的高可用。</p>
<p><strong>特别注意：</strong>多级降级时，嵌套的内部Command不能使用外层Command的GroupKey，因为外层Command进行降级请求，很有可能是它所在的线程池资源已耗尽，如果嵌套的内部Command继续使用相同点的GroupKey，嵌套的内部Command就无法获取空闲的线程资源执行Command，导致内嵌Command对应的Hystrix CircuitBreaker直接短路，所有请求都被Reject，执行内嵌Command的fallback降级逻辑，这样多级降级就不发生作用了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetECourseInfoFromRedisCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ECourseInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pkid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetECourseInfoFromRedisCmmd</span><span class="params">(<span class="keyword">int</span> pkid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>))</span><br><span class="line">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetECourseInfoFromRedisCmmd"</span>))</span><br><span class="line">                .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.defaultSetter()</span><br><span class="line">                        <span class="comment">//高峰时段QPS*TP99耗时+buffer，例如30QPS*0.2S+4=10;</span></span><br><span class="line">                        .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                        .withAllowMaximumSizeToDivergeFromCoreSize(<span class="keyword">true</span>)</span><br><span class="line">                        .withMaximumSize(<span class="number">30</span>)</span><br><span class="line">                        .withKeepAliveTimeMinutes(<span class="number">1</span>)</span><br><span class="line">                        .withMaxQueueSize(<span class="number">10</span>)</span><br><span class="line">                        .withQueueSizeRejectionThreshold(<span class="number">15</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                        <span class="comment">//TP99.5延迟+buffer,例如100ms+50ms</span></span><br><span class="line">                        .withExecutionTimeoutInMilliseconds(<span class="number">150</span>)</span><br><span class="line">                        <span class="comment">//根据业务而定</span></span><br><span class="line">                        .withCircuitBreakerErrorThresholdPercentage(<span class="number">30</span>)</span><br><span class="line">                        <span class="comment">//10秒内一个窗口处理的请求数，高峰QPS*10;</span></span><br><span class="line">                        .withCircuitBreakerRequestVolumeThreshold(<span class="number">40</span>)</span><br><span class="line">                        .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">60</span>*<span class="number">1000</span>)));</span><br><span class="line">        <span class="keyword">this</span>.pkid = pkid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JedisCluster jedisCluster = (JedisCluster) SpringContext.getContext().getBean(<span class="string">"jedisClusterFactory"</span>);</span><br><span class="line">        String key = <span class="string">"ecourse_info_"</span>+pkid;</span><br><span class="line">        String s = jedisCluster.get(key);</span><br><span class="line">        ECourseInfo eCourseInfo = JSONObject.parseObject(s, ECourseInfo.class);</span><br><span class="line">        <span class="keyword">return</span> eCourseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GetECourseInfoFromBakRedisCmmd(pkid).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GetECourseInfoFromBakRedisCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ECourseInfo</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> pkid;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GetECourseInfoFromBakRedisCmmd</span><span class="params">(<span class="keyword">int</span> pkid)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisBakGroup"</span>))</span><br><span class="line">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetECourseInfoFromBakRedisCmmd"</span>))</span><br><span class="line">                    .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.defaultSetter()</span><br><span class="line">                            <span class="comment">//高峰时段QPS*TP99耗时+buffer，例如30QPS*0.2S+4=10;</span></span><br><span class="line">                            .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                            .withAllowMaximumSizeToDivergeFromCoreSize(<span class="keyword">true</span>)</span><br><span class="line">                            .withMaximumSize(<span class="number">30</span>)</span><br><span class="line">                            .withKeepAliveTimeMinutes(<span class="number">1</span>)</span><br><span class="line">                            .withMaxQueueSize(<span class="number">10</span>)</span><br><span class="line">                            .withQueueSizeRejectionThreshold(<span class="number">15</span>))</span><br><span class="line">                    .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                            <span class="comment">//TP99.5延迟+buffer,例如100ms+50ms</span></span><br><span class="line">                            .withExecutionTimeoutInMilliseconds(<span class="number">150</span>)</span><br><span class="line">                            <span class="comment">//根据业务而定</span></span><br><span class="line">                            .withCircuitBreakerErrorThresholdPercentage(<span class="number">30</span>)</span><br><span class="line">                            <span class="comment">//10秒内一个窗口处理的请求数，高峰QPS*10;</span></span><br><span class="line">                            .withCircuitBreakerRequestVolumeThreshold(<span class="number">40</span>)</span><br><span class="line">                            .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">60</span>*<span class="number">1000</span>)));</span><br><span class="line">            <span class="keyword">this</span>.pkid = pkid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            JedisCluster jedisCluster = (JedisCluster) SpringContext.getContext().getBean(<span class="string">"jedisClusterFactory"</span>);</span><br><span class="line">            String key = <span class="string">"ecourse_info_"</span>+pkid;</span><br><span class="line">            String s = jedisCluster.get(key);</span><br><span class="line">            ECourseInfo eCourseInfo = JSONObject.parseObject(s, ECourseInfo.class);</span><br><span class="line">            <span class="keyword">return</span> eCourseInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * fail silent</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="数据生产服务层请求隔离和服务降级">数据生产服务层请求隔离和服务降级</span></h2><p>数据缓存服务层，除了要跨网络请求Redis接口数据，还要跨网络请求数据生产服务的接口数据。如果大量的请求涌入数据生产服务，除了会给后端数据库带来高并发压力外，还有可能因为缓存层的高并发占用缓存服务接口的资源，导致缓存层服务宕机。</p>
<h3><span id="数据生产服务接口多级降级和最终fallback-stubbed">数据生产服务接口多级降级和最终Fallback Stubbed</span></h3><p>内外两层Command不能使用相同的GroupKey，原理与缓存服务层的Redis数据接口的多级降级配置原理相同。外层Command调用数据生产服务接口获取数据，第一次降级请求云端历史数据（或其他冷备历史数据），第二次降级实现残缺数据降级，根据请求参数中的数据组装一些初级数据返回。</p>
<p><strong>第二级降级一定要实现Fallback Stubbed，这样才能保证客户端请求有数据返回。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetECourseInfoFromServiceCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ECourseInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer ecourseId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetECourseInfoFromServiceCmmd</span><span class="params">(Integer ecourseId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ECourseInfoServiceGroup"</span>))</span><br><span class="line">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetECourseInfoFromServiceCmmd"</span>))</span><br><span class="line">                .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.defaultSetter()</span><br><span class="line">                        <span class="comment">//高峰时段QPS*TP99耗时+buffer，例如30QPS*0.2S+4=10;</span></span><br><span class="line">                        .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                        .withAllowMaximumSizeToDivergeFromCoreSize(<span class="keyword">true</span>)</span><br><span class="line">                        .withMaximumSize(<span class="number">30</span>)</span><br><span class="line">                        .withKeepAliveTimeMinutes(<span class="number">1</span>)</span><br><span class="line">                        .withMaxQueueSize(<span class="number">10</span>)</span><br><span class="line">                        .withQueueSizeRejectionThreshold(<span class="number">15</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                        <span class="comment">//TP99.5延迟+buffer,例如100ms+50ms</span></span><br><span class="line">                        .withExecutionTimeoutInMilliseconds(<span class="number">150</span>)</span><br><span class="line">                        <span class="comment">//根据业务而定</span></span><br><span class="line">                        .withCircuitBreakerErrorThresholdPercentage(<span class="number">30</span>)</span><br><span class="line">                        <span class="comment">//10秒内一个窗口处理的请求数，高峰QPS*10;</span></span><br><span class="line">                        .withCircuitBreakerRequestVolumeThreshold(<span class="number">40</span>)</span><br><span class="line">                        .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">60</span>*<span class="number">1000</span>)));</span><br><span class="line">        <span class="keyword">this</span>.ecourseId = ecourseId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        RestTemplate restTemplate = (RestTemplate) SpringContext.getContext().getBean(<span class="string">"restTemplate"</span>);</span><br><span class="line">        ECourseInfo ecourseInfo = restTemplate.getForObject(<span class="string">"http://localhost:9090/ecourse?ecourseId="</span> + ecourseId, ECourseInfo.class);</span><br><span class="line">        <span class="keyword">return</span> ecourseInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getFallback();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GetECourseInfoFromCloudDataCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ECourseInfo</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer ecourseId;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GetECourseInfoFromCloudDataCmmd</span><span class="params">(Integer ecourseId)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ECourseInfoCloudDataGroup"</span>))</span><br><span class="line">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetECourseInfoFromServiceCmmd"</span>))</span><br><span class="line">                    .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.defaultSetter()</span><br><span class="line">                            <span class="comment">//高峰时段QPS*TP99耗时+buffer，例如30QPS*0.2S+4=10;</span></span><br><span class="line">                            .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                            .withAllowMaximumSizeToDivergeFromCoreSize(<span class="keyword">true</span>)</span><br><span class="line">                            .withMaximumSize(<span class="number">30</span>)</span><br><span class="line">                            .withKeepAliveTimeMinutes(<span class="number">1</span>)</span><br><span class="line">                            .withMaxQueueSize(<span class="number">10</span>)</span><br><span class="line">                            .withQueueSizeRejectionThreshold(<span class="number">15</span>))</span><br><span class="line">                    .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                            <span class="comment">//TP99.5延迟+buffer,例如100ms+50ms</span></span><br><span class="line">                            .withExecutionTimeoutInMilliseconds(<span class="number">150</span>)</span><br><span class="line">                            <span class="comment">//根据业务而定</span></span><br><span class="line">                            .withCircuitBreakerErrorThresholdPercentage(<span class="number">30</span>)</span><br><span class="line">                            <span class="comment">//10秒内一个窗口处理的请求数，高峰QPS*10;</span></span><br><span class="line">                            .withCircuitBreakerRequestVolumeThreshold(<span class="number">40</span>)</span><br><span class="line">                            .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">60</span>*<span class="number">1000</span>)));</span><br><span class="line">            <span class="keyword">this</span>.ecourseId = ecourseId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            RestTemplate restTemplate = (RestTemplate) SpringContext.getContext().getBean(<span class="string">"restTemplate"</span>);</span><br><span class="line">            ECourseInfo ecourseInfo = restTemplate.getForObject(<span class="string">"http://localhost:9990/ecourse?ecourseId="</span> + ecourseId, ECourseInfo.class);</span><br><span class="line">            <span class="keyword">return</span> ecourseInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现fallback stubbed残缺降级</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ECourseInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ECourseInfo eCourseInfo = <span class="keyword">new</span> ECourseInfo();</span><br><span class="line">            eCourseInfo.setPkid(<span class="keyword">this</span>.ecourseId);</span><br><span class="line">            eCourseInfo.setModifyTime(<span class="keyword">new</span> Date());</span><br><span class="line">            eCourseInfo.setAuthorId(<span class="number">11111</span>);</span><br><span class="line">            eCourseInfo.setName(<span class="string">"stubbed fallback ecourse name"</span>);</span><br><span class="line">            eCourseInfo.setPrice(<span class="number">123.33</span>);</span><br><span class="line">            <span class="keyword">return</span>  eCourseInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="缓存穿透问题及对策">缓存穿透问题及对策</span></h1><h2><span id="缓存穿透">缓存穿透</span></h2><p>当一个请求从浏览器经过三级缓存查询后，没有查到数据，就会到达数据库层查询数据，如果数据库也没有查到数据就返回NULL了。如果大量的这类请求并发访问服务接口，必然会导致请求到达数据库接口层，增大数据库的压力，这个现象就是缓存穿透。</p>
<h2><span id="后端缓存层缓存空数据">后端缓存层缓存空数据</span></h2><p>只要把数据库返回的Null数据结合请求参数放入缓存层，这样相同参数的请求再查询数据时，就能从缓存层获得空数据，而不用去查询数据库。而对应参数的数据在数据库中产生时，及时删除缓存即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果从两级缓存中还是查不到，应该去数据生产服务中查询，同一个缓存服务实例接收到多个并发查询并更新redis缓存，就可能出现因为执行先后造成的新数据被旧数据覆盖的冲突问题。并发请求改为异步内存队列处理。</span></span><br><span class="line">        <span class="keyword">if</span> (eCourseInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//从数据管理服务查询数据，存入内存队列，异步按顺序写入缓存。</span></span><br><span class="line">            GetECourseInfoFromServiceCmmd getECourseInfoFromServiceCmmd = <span class="keyword">new</span> GetECourseInfoFromServiceCmmd(ecourseId);</span><br><span class="line">            eCourseInfo = getECourseInfoFromServiceCmmd.execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//防止多级缓存被穿透，即使从课程服务接口从数据库中没有查询到课程信息，也要在此处实例化一个对象 爆炸</span></span><br><span class="line">            <span class="keyword">if</span> (eCourseInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                eCourseInfo = <span class="keyword">new</span> ECourseInfo(ecourseId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//放入队列，等待队列处理线程把数据更新到redis</span></span><br><span class="line">            <span class="comment">//此处，线程执行保存数据到redis中时，可能有分布式并发问题，所以要使用分布式锁，解决并发冲突。</span></span><br><span class="line">            MultiThreadUpdateRedisQueue.Singleton.getInstance().put(eCourseInfo);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多级缓存架构实现服务高可用&quot;&gt;&lt;a href=&quot;#多级缓存架构实现服务高可用&quot; class=&quot;headerlink&quot; title=&quot;多级缓存架构实现服务高可用&quot;&gt;&lt;/a&gt;多级缓存架构实现服务高可用&lt;/h1&gt;&lt;h2 id=&quot;传统web服务架构模式&quot;&gt;&lt;a href=&quot;#传统web服务架构模式&quot; class=&quot;headerlink&quot; title=&quot;传统web服务架构模式&quot;&gt;&lt;/a&gt;传统web服务架构模式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/07/26/多级缓存实现服务高可用背后缓存雪崩和缓存穿透问题的解决方案/简单的web服务架构.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;请求从浏览器发起，到达Nginx代理服务器，可以加载静态资源，如html、js、css等；如果是请求动态内容，就会请求tomcat服务，从缓存、数据库、文件服务器加载。有一部分访问量大的数据，可以使用模板引擎技术，在数据发生变更时把动态数据加载到模板中，生成静态页面内容，当请求访问这部分数据时就可以直接加载静态页面内容了。&lt;/p&gt;
&lt;p&gt;问题：随着业务量的增加，需要静态化处理的页面达到成千上万个时，每次数据变化都要静态化成千上万个页面，这个静态化操作过程的耗时量可想而知，而且会因为页面静态化过程大大降低Tomcat容器的吞吐量，降低性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多级缓存" scheme="http://www.forwardlee.com/tags/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    
      <category term="缓存雪崩" scheme="http://www.forwardlee.com/tags/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
    
      <category term="缓存穿透" scheme="http://www.forwardlee.com/tags/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix生产环境配置实践</title>
    <link href="http://www.forwardlee.com/2018/07/25/Hystrix%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.forwardlee.com/2018/07/25/Hystrix生产环境实践/</id>
    <published>2018-07-25T07:28:43.000Z</published>
    <updated>2018-07-25T08:14:48.068Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="线程池资源优化演进">线程池资源优化演进</span></h1><p>在生产环境中部署一个短路器，一开始需要将一些关键配置设置的大一些，比如timeout超时时长，线程池大小，或信号量容量，然后逐渐优化这些配置，直到在一个生产系统中运作良好。</p>
<p>（1）一开始先不要设置timeout超时时长，默认就是1000ms，也就是1s<br>（2）一开始也不要设置线程池大小，默认就是10<br>（3）直接部署hystrix到生产环境，如果运行的很良好，那么就让它这样运行好了<br>（4）让hystrix应用，24小时运行在生产环境中<br>（5）依赖标准的监控和报警机制来捕获到系统的异常运行情况<br>（6）在24小时之后，看一下调用延迟的占比，以及流量，来计算出让短路器生效的最小的配置数字<br>（7）直接对hystrix配置进行热修改，然后继续在hystrix dashboard上监控<br>（8）看看修改配置后的系统表现有没有改善</p>
<a id="more"></a>
<h1><span id="hystrixthreadpool线程数量设定计算公式">HystrixThreadPool线程数量设定计算公式</span></h1><p><strong>每秒的高峰访问次数 * 99%的访问延时 + 缓冲数量</strong></p>
<p>假设一个依赖的服务的高峰访问次数30QPS，99%的请求延时实践在200ms，那么我们可以设定的线程数量=30*0.2+4=10个线程。</p>
<h1><span id="hystrixcommand线程超时timeout设定">HystrixCommand线程超时timeout设定</span></h1><p><strong>结合线程池数量配置，设置能够完成执行高峰时QPS任务的timeout数值。</strong></p>
<p>默认线程超时为1s。假设一个依赖服务的高峰访问时，99.5%的请求延时在250ms，假设再允许服务重试一次消耗50ms，那么这个依赖服务的延时设置为300ms就可以了，这样一个线程最多延时300ms，也就是这个线程每秒能执行三次依赖服务，线程池中10个线程，整好能处理30QPS。如果把延时设置为400ms，那么一个线程每秒最多执行2次请求，10个线程在1s内最多执行20个请求，剩余的10个请求就会被线程池阻塞住，再来新的请求也继续会被阻塞住，如果等待队列已满，那么新来的请求就会被直接Reject。所以400ms的超时设置就不能满足30QPS的请求次数要求。</p>
<h1><span id="生产环境中动态分配线程池资源">生产环境中动态分配线程池资源</span></h1><p><strong>线程池动态配置选项</strong></p>
<p>//允许线程池自动从coreSize扩容到maximumSize</p>
<p> .withAllowMaximumSizeToDivergeFromCoreSize(true) </p>
<p>//default 10，默认线程池大小</p>
<p> .withCoreSize(10) </p>
<p>//最大线程数 </p>
<p>.withMaximumSize(30)</p>
<p> //空闲线程存活时间1分钟，超时后线程池数量自动恢复到coreSize大小 </p>
<p>.withKeepAliveTimeMinutes(1)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoWithDynamicThreadPoolCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HystrixCommandKey KEY = HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfoCmmd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoWithDynamicThreadPoolCmmd</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(</span><br><span class="line">                Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfoGroup"</span>))</span><br><span class="line">                        .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfoCmmd"</span>))</span><br><span class="line">                        .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"GetProductInfoThreadPool"</span>))</span><br><span class="line">                        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class="line">                                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)</span><br><span class="line">                                <span class="comment">//允许执行的最大并发数</span></span><br><span class="line">                                .withExecutionIsolationSemaphoreMaxConcurrentRequests(<span class="number">30</span>)</span><br><span class="line">                                <span class="comment">//请求超时</span></span><br><span class="line">                                .withExecutionTimeoutInMilliseconds(<span class="number">300</span>))</span><br><span class="line">                        .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</span><br><span class="line">                                <span class="comment">//允许线程池自动从coreSize扩容到maximumSize</span></span><br><span class="line">                                .withAllowMaximumSizeToDivergeFromCoreSize(<span class="keyword">true</span>)</span><br><span class="line">                                <span class="comment">//default 10，默认线程池大小</span></span><br><span class="line">                                .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                                <span class="comment">//最大线程数</span></span><br><span class="line">                                .withMaximumSize(<span class="number">30</span>)</span><br><span class="line">                                <span class="comment">//空闲线程存活时间1分钟，超时后线程池数量自动恢复到coreSize大小</span></span><br><span class="line">                                .withKeepAliveTimeMinutes(<span class="number">1</span>)</span><br><span class="line">                                <span class="comment">//default 5，没有被线程池执行的请求会放到队</span></span><br><span class="line">							 <span class="comment">//列中等待线程，如果队列已满，新来的请求会被降级被拒</span></span><br><span class="line">                                .withQueueSizeRejectionThreshold(<span class="number">10</span>)</span><br><span class="line">                                <span class="comment">//withQueueSizeRejectionThreshold和withMaxQueueSize比较，queueSize取较小值</span></span><br><span class="line">                                .withMaxQueueSize(<span class="number">8</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:8082/product/get?productId="</span>+productId;</span><br><span class="line"></span><br><span class="line">        String s = HttpClientUtils.sendGetRequestWithException(url);</span><br><span class="line">        log.info(<span class="string">"product-ha response &#123;&#125;"</span>,s);</span><br><span class="line">        ProductInfo productInfo = JSONObject.parseObject(s, ProductInfo.class);</span><br><span class="line">        <span class="keyword">return</span> productInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hystrix本地缓存中获取数据，而不是执行run方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"product_key_"</span>+productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理hystrix缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flushCache</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">        HystrixRequestCache.getInstance(KEY,HystrixConcurrencyStrategyDefault.getInstance()).clear(<span class="string">"product_key_"</span>+productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hystrix执行降级请求时返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程池资源优化演进&quot;&gt;&lt;a href=&quot;#线程池资源优化演进&quot; class=&quot;headerlink&quot; title=&quot;线程池资源优化演进&quot;&gt;&lt;/a&gt;线程池资源优化演进&lt;/h1&gt;&lt;p&gt;在生产环境中部署一个短路器，一开始需要将一些关键配置设置的大一些，比如timeout超时时长，线程池大小，或信号量容量，然后逐渐优化这些配置，直到在一个生产系统中运作良好。&lt;/p&gt;
&lt;p&gt;（1）一开始先不要设置timeout超时时长，默认就是1000ms，也就是1s&lt;br&gt;（2）一开始也不要设置线程池大小，默认就是10&lt;br&gt;（3）直接部署hystrix到生产环境，如果运行的很良好，那么就让它这样运行好了&lt;br&gt;（4）让hystrix应用，24小时运行在生产环境中&lt;br&gt;（5）依赖标准的监控和报警机制来捕获到系统的异常运行情况&lt;br&gt;（6）在24小时之后，看一下调用延迟的占比，以及流量，来计算出让短路器生效的最小的配置数字&lt;br&gt;（7）直接对hystrix配置进行热修改，然后继续在hystrix dashboard上监控&lt;br&gt;（8）看看修改配置后的系统表现有没有改善&lt;/p&gt;
    
    </summary>
    
    
      <category term="hystrix" scheme="http://www.forwardlee.com/tags/hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix在实际应用中的多级降级和手动降级策略</title>
    <link href="http://www.forwardlee.com/2018/07/24/Hystrix%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%A7%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5/"/>
    <id>http://www.forwardlee.com/2018/07/24/Hystrix在实际应用中的多级降级策略/</id>
    <published>2018-07-24T09:57:50.000Z</published>
    <updated>2018-07-24T11:32:33.685Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="hystrixcommand嵌套实现多级降级">HystrixCommand嵌套实现多级降级</span></h1><p>当HystrixCommand在执行跨网络请求接口时，可能因为接口服务不可用而导致接口服务降级，此时回调用HystrixCommand的fallback()方法返回数据。在实际应用中，网络服务接口要实现高可用，需要对接口进行主备的部署方案，主接口宕机，可以调用备用服务接口获取数据。此时在HystrixCommand的fallback()方法中再使用HystrixCommand调用备用服务接口，实现第一次降级；如果备用服务接口仍然不可用，那么进行第二次服务降级，返回Stubbed Fallback（残缺降级）数据。</p>
<p><img src="/2018/07/24/Hystrix在实际应用中的多级降级策略/command嵌套.png" alt=""></p>
<h1><span id="代码实现">代码实现</span></h1><p><strong>PS：</strong> GetProductInfoCmmd的GroupKey的值为GetProductInfoCmmdGroup，第一级降级fallback()中调用的GetProductInfoFallBackCmmd的GroupKey的值为GetProductInfoFallBackGroup，这两个GropKey值不能相同，因为第一级降级时GetProductInfoCmmdGroup线程池中的线程可能已经被耗尽，再使用这个GroupKey将无法从中获取空闲的线程执行降级的GetProductInfoFallBackCmmd。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoCmmd</span>  <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HystrixCommandKey KEY = HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfoCmmd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoCmmd</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfoCmmdGroup"</span>));</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:8082/product/get?productId="</span>+productId;</span><br><span class="line"></span><br><span class="line">        String s = HttpClientUtils.sendGetRequestWithException(url);</span><br><span class="line">        log.info(<span class="string">"product-ha response &#123;&#125;"</span>,s);</span><br><span class="line">        ProductInfo productInfo = JSONObject.parseObject(s, ProductInfo.class);</span><br><span class="line">        <span class="keyword">return</span> productInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hystrix本地缓存中获取数据，而不是执行run方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"product_key_"</span>+productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理hystrix缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flushCache</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">        HystrixRequestCache.getInstance(KEY,</span><br><span class="line">                                         HystrixConcurrencyStrategyDefault.getInstance())</span><br><span class="line">            .clear(<span class="string">"product_key_"</span>+productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次降级调用备用服务的Command</span></span><br><span class="line"><span class="comment">     * hystrix执行降级请求时返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GetProductInfoFallBackCmmd(productId).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoFallBackCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoFallBackCmmd</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//特别注意：多级降级时，fallback调用的command的groupkey不能与</span></span><br><span class="line">            <span class="comment">//调用者的groupkey相同，因为调用者</span></span><br><span class="line">            <span class="comment">//的groupkey中的线程可能已经被耗尽，所以才走的调用者的fallback。</span></span><br><span class="line">            <span class="keyword">super</span>(Setter</span><br><span class="line">                  .withGroupKey(HystrixCommandGroupKey.Factory</span><br><span class="line">                                .asKey(<span class="string">"GetProductInfoFallBackGroup"</span>)));</span><br><span class="line">            <span class="keyword">this</span>.productId = productId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//此处应该调用备用服务的接口</span></span><br><span class="line">            String url = <span class="string">"http://127.0.0.1:8083/product/get?productId="</span>+productId;</span><br><span class="line"></span><br><span class="line">            String s = HttpClientUtils.sendGetRequestWithException(url);</span><br><span class="line">            log.info(<span class="string">"product-ha response &#123;&#125;"</span>,s);</span><br><span class="line">            ProductInfo productInfo = JSONObject.parseObject(s, ProductInfo.class);</span><br><span class="line">            <span class="keyword">return</span> productInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第二次降级，返回stubbed fallback数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            String product = <span class="string">"&#123;\"id\": 111, \"name\": \"iphone7手机\", \"price\": 5599, \"pictureList\":\"a.jpg,b.jpg\", \"specification\": \"iphone7的规格\", \"service\": \"iphone7的售后服务\", \"color\": \"红色,白色,黑色\", \"size\": \"5.5\", \"shopId\": 1, \"modifiedTime\": \"2017-01-01 12:00:00\", \"cityId\":1&#125;"</span>;</span><br><span class="line">            log.info(<span class="string">"getFallback:&#123;&#125;"</span>,product);</span><br><span class="line">            ProductInfo productInfo = JSONObject.parseObject(product, ProductInfo.class);</span><br><span class="line">            <span class="keyword">return</span> productInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="hystrixcommand嵌套实现手动降级">HystrixCommand嵌套实现手动降级</span></h1><p>手动降级是要实现web容器运行时调用主服务接口和自定义备用接口之间手动灵活切换，可以用在主服务接口升级时，临时切换到备用接口上的业务场景，主服务接口升级完成后，再手动切换回主服务接口。实现这一功能，需要开发一个Semaphor策略的服务接口调度Command，一个调用主服务接口的ThreadPool策略的Command，一个调用备用服务接口的ThreadPool策略的Command。</p>
<p><img src="/2018/07/24/Hystrix在实际应用中的多级降级策略/手动切换降级.png" alt=""></p>
<h1><span id="代码实现">代码实现</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoManualFacadeCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> useDegrade = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoManualFacadeCmmd</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfoFacade"</span>))</span><br><span class="line">        .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)));</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!useDegrade) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GetProductInfoCmmd(productId).execute();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GetProductInfoFromManualCmmd(productId).execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUseDegrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> useDegrade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUseDegrade</span><span class="params">(<span class="keyword">boolean</span> useDegrade)</span> </span>&#123;</span><br><span class="line">        GetProductInfoManualFacadeCmmd.useDegrade = useDegrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoCmmd</span>  <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HystrixCommandKey KEY = HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfoCmmd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoCmmd</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfoCmmdGroup"</span>));</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:8082/product/get?productId="</span>+productId;</span><br><span class="line"></span><br><span class="line">        String s = HttpClientUtils.sendGetRequestWithException(url);</span><br><span class="line">        log.info(<span class="string">"product-ha response &#123;&#125;"</span>,s);</span><br><span class="line">        ProductInfo productInfo = JSONObject.parseObject(s, ProductInfo.class);</span><br><span class="line">        <span class="keyword">return</span> productInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hystrix本地缓存中获取数据，而不是执行run方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"product_key_"</span>+productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次降级调用备用服务的Command</span></span><br><span class="line"><span class="comment">     * hystrix执行降级请求时返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoFromManualCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoFromManualCmmd</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfoFromManualGroup"</span>)));</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ProductInfo manualPro = <span class="keyword">new</span> ProductInfo();</span><br><span class="line">        manualPro.setId(<span class="number">123</span>);</span><br><span class="line">        manualPro.setPrice(<span class="number">23</span>);</span><br><span class="line">        manualPro.setCityId(<span class="number">2L</span>);</span><br><span class="line">        manualPro.setCityName(LocalCache.getCityName(manualPro.getCityId()));</span><br><span class="line">        <span class="keyword">return</span> manualPro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过http请求动态修改useDegrade状态，实现GetProductInfoCmmd和GetProductInfoFromManualCmmd动态切换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product/info/usedegrade"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">productInfoUseDegrade</span><span class="params">(<span class="keyword">boolean</span> degrade)</span></span>&#123;</span><br><span class="line">        GetProductInfoManualFacadeCmmd.setUseDegrade(degrade);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"degrade="</span>+degrade;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HystrixCommand嵌套实现多级降级&quot;&gt;&lt;a href=&quot;#HystrixCommand嵌套实现多级降级&quot; class=&quot;headerlink&quot; title=&quot;HystrixCommand嵌套实现多级降级&quot;&gt;&lt;/a&gt;HystrixCommand嵌套实现多级降级&lt;/h1&gt;&lt;p&gt;当HystrixCommand在执行跨网络请求接口时，可能因为接口服务不可用而导致接口服务降级，此时回调用HystrixCommand的fallback()方法返回数据。在实际应用中，网络服务接口要实现高可用，需要对接口进行主备的部署方案，主接口宕机，可以调用备用服务接口获取数据。此时在HystrixCommand的fallback()方法中再使用HystrixCommand调用备用服务接口，实现第一次降级；如果备用服务接口仍然不可用，那么进行第二次服务降级，返回Stubbed Fallback（残缺降级）数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/24/Hystrix在实际应用中的多级降级策略/command嵌套.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;PS：&lt;/strong&gt; GetProductInfoCmmd的GroupKey的值为GetProductInfoCmmdGroup，第一级降级fallback()中调用的GetProductInfoFallBackCmmd的GroupKey的值为GetProductInfoFallBackGroup，这两个GropKey值不能相同，因为第一级降级时GetProductInfoCmmdGroup线程池中的线程可能已经被耗尽，再使用这个GroupKey将无法从中获取空闲的线程执行降级的GetProductInfoFallBackCmmd。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hystrix" scheme="http://www.forwardlee.com/tags/hystrix/"/>
    
      <category term="高并发" scheme="http://www.forwardlee.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix高并发请求合并处理</title>
    <link href="http://www.forwardlee.com/2018/07/24/Hystrix%E9%AB%98%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6%E5%A4%84%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/07/24/Hystrix高并发请求合并处理/</id>
    <published>2018-07-24T00:59:49.000Z</published>
    <updated>2018-07-24T10:13:54.202Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="hystrix处理单个或者数量较少的请求">Hystrix处理单个或者数量较少的请求</span></h1><h2><span id="创建hystrixcommand">创建HystrixCommand</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoCmmd</span>  <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HystrixCommandKey KEY = HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfoCmmd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoCmmd</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//跨网络请求通常使用HystrixCommandProperties.ExecutionIsolationStrategy.THREAD</span></span><br><span class="line">        <span class="comment">// 线程池策略（默认最多并发10个线程请求）进行隔离限流，目的是用线程池可以获取线程执行的操作状态</span></span><br><span class="line">        <span class="comment">//GetProductInfoCmmdGroup定义了一个线程池专门执行run方法，这个线程池的大小就主动</span></span><br><span class="line">        <span class="comment">//限制住所有请求run方法中的http请求，防止http请求阻塞后整个web容器的线程资源都被耗尽</span></span><br><span class="line">        <span class="comment">//super(HystrixCommandGroupKey.Factory.asKey("GetProductInfoCmmdGroup"));</span></span><br><span class="line">        <span class="keyword">super</span>(</span><br><span class="line">                Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfoGroup"</span>))</span><br><span class="line">                        .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfoCmmd"</span>))</span><br><span class="line">                        .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"GetProductInfoThreadPool"</span>))</span><br><span class="line">                        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class="line">                                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)</span><br><span class="line">                                <span class="comment">//允许执行的最大并发数</span></span><br><span class="line">                                .withExecutionIsolationSemaphoreMaxConcurrentRequests(<span class="number">30</span>)</span><br><span class="line">                                <span class="comment">//请求超时</span></span><br><span class="line">                                .withExecutionTimeoutInMilliseconds(<span class="number">200</span>))</span><br><span class="line">                        .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</span><br><span class="line">                                <span class="comment">//default 10，默认线程池大小</span></span><br><span class="line">                                .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                                <span class="comment">//default 5，没有被线程池执行的请求会放到队列中等待线程，如果队列已满，新来的请求会被降级被拒</span></span><br><span class="line">                                .withQueueSizeRejectionThreshold(<span class="number">10</span>)</span><br><span class="line">                                <span class="comment">//withQueueSizeRejectionThreshold和withMaxQueueSize比较，queueSize取较小值</span></span><br><span class="line">                                .withMaxQueueSize(<span class="number">8</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:8082/product/get?productId="</span>+productId;</span><br><span class="line"></span><br><span class="line">        String s = HttpClientUtils.sendGetRequestWithException(url);</span><br><span class="line">        log.info(<span class="string">"product-ha response &#123;&#125;"</span>,s);</span><br><span class="line">        ProductInfo productInfo = JSONObject.parseObject(s, ProductInfo.class);</span><br><span class="line">        <span class="keyword">return</span> productInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从hystrix本地缓存中获取数据，而不是执行run方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"product_key_"</span>+productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理hystrix缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flushCache</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">        HystrixRequestCache.getInstance(KEY,HystrixConcurrencyStrategyDefault.getInstance()).clear(<span class="string">"product_key_"</span>+productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hystrix执行降级请求时返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String product = <span class="string">"&#123;\"id\": 111, \"name\": \"iphone7手机\", \"price\": 5599, \"pictureList\":\"a.jpg,b.jpg\", \"specification\": \"iphone7的规格\", \"service\": \"iphone7的售后服务\", \"color\": \"红色,白色,黑色\", \"size\": \"5.5\", \"shopId\": 1, \"modifiedTime\": \"2017-01-01 12:00:00\", \"cityId\":1&#125;"</span>;</span><br><span class="line">        log.info(<span class="string">"getFallback:&#123;&#125;"</span>,product);</span><br><span class="line">        ProductInfo productInfo = JSONObject.parseObject(product, ProductInfo.class);</span><br><span class="line">        <span class="keyword">return</span> productInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2><span id="开启hystrix-request-cache">开启Hystrix Request Cache</span></h2><h3><span id="command中配置缓存数据的key">Command中配置缓存数据的KEY</span></h3><p>见Command中如下代码，Request Cache的作用域是同一个request scope内的多个command实例调用同一个请求，hystrix会根据请求的key值判断是否从Request Cache中获取请求数据，而不是执行Command的run()方法。反之，多个request之间cache不能共享。HystrixCommand抽象类的getCacheKey()方法，返回null，表示不使用Request Cache。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从hystrix本地缓存中获取数据，而不是执行run方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"product_key_"</span>+productId;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="开启hystrixrequestcontext上下文环境">开启HystrixRequestContext上下文环境</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixRequestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//加载HystrixRequestContext</span></span><br><span class="line">        HystrixRequestContext hystrixRequestContext = HystrixRequestContext.initializeContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            hystrixRequestContext.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="webcontext配置hystrixcontext过滤器">WebContext配置HystrixContext过滤器</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> HystrixRequestFilter());</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="mainthread实例化并提交command">MainThread实例化并提交Command</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product/receiveChg"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ProductInfo <span class="title">changeProduct</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">      <span class="comment">//1.线程池隔离策略限流网络请求获取产品信息</span></span><br><span class="line">      GetProductInfoCmmd productInfoGetProductInfoCmmd = <span class="keyword">new</span> GetProductInfoCmmd(productId);</span><br><span class="line">      ProductInfo pro = productInfoGetProductInfoCmmd.execute();</span><br><span class="line">      log.info(<span class="string">"产品信息:&#123;&#125;"</span>,JSONObject.toJSONString(pro));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="单元测试">单元测试</span></h2><h3><span id="测试代码">测试代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> requestSize =<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> concurrentSize = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(requestSize);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(concurrentSize);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CyclicBarrier cb = <span class="keyword">new</span> CyclicBarrier(concurrentSize);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch count = <span class="keyword">new</span> CountDownLatch(requestSize);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeProduct</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; requestSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> flag = i;</span><br><span class="line">            service.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    String s = getProductInfo(<span class="string">"http://127.0.0.1:8081/product/receiveChg?productId=1"</span>);</span><br><span class="line">                    log.info(<span class="string">" 执行结果:"</span>+s,flag);</span><br><span class="line">                    count.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"出错："</span>,e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        count.await();</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="测试结果">测试结果</span></h3><p>执行了20次请求。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2018-07-24 10:51:17.012  INFO 2314 --- [nio-8082-exec-2] c.r.e.p.ha.controller.ProductController  : 请求：3</span><br><span class="line">2018-07-24 10:51:17.024  INFO 2314 --- [nio-8082-exec-3] c.r.e.p.ha.controller.ProductController  : 请求：0</span><br><span class="line">2018-07-24 10:51:17.030  INFO 2314 --- [nio-8082-exec-4] c.r.e.p.ha.controller.ProductController  : 请求：1</span><br><span class="line">2018-07-24 10:51:17.036  INFO 2314 --- [nio-8082-exec-5] c.r.e.p.ha.controller.ProductController  : 请求：2</span><br><span class="line">2018-07-24 10:51:17.038  INFO 2314 --- [nio-8082-exec-1] c.r.e.p.ha.controller.ProductController  : 请求：4</span><br><span class="line">2018-07-24 10:51:17.374  INFO 2314 --- [nio-8082-exec-6] c.r.e.p.ha.controller.ProductController  : 请求：8</span><br><span class="line">2018-07-24 10:51:17.386  INFO 2314 --- [nio-8082-exec-6] c.r.e.p.ha.controller.ProductController  : 请求：7</span><br><span class="line">2018-07-24 10:51:17.386  INFO 2314 --- [nio-8082-exec-7] c.r.e.p.ha.controller.ProductController  : 请求：6</span><br><span class="line">2018-07-24 10:51:17.386  INFO 2314 --- [nio-8082-exec-8] c.r.e.p.ha.controller.ProductController  : 请求：9</span><br><span class="line">2018-07-24 10:51:17.386  INFO 2314 --- [nio-8082-exec-9] c.r.e.p.ha.controller.ProductController  : 请求：5</span><br><span class="line">2018-07-24 10:51:17.511  INFO 2314 --- [nio-8082-exec-5] c.r.e.p.ha.controller.ProductController  : 请求：13</span><br><span class="line">2018-07-24 10:51:17.517  INFO 2314 --- [nio-8082-exec-3] c.r.e.p.ha.controller.ProductController  : 请求：12</span><br><span class="line">2018-07-24 10:51:17.521  INFO 2314 --- [nio-8082-exec-2] c.r.e.p.ha.controller.ProductController  : 请求：11</span><br><span class="line">2018-07-24 10:51:17.525  INFO 2314 --- [nio-8082-exec-1] c.r.e.p.ha.controller.ProductController  : 请求：10</span><br><span class="line">2018-07-24 10:51:17.528  INFO 2314 --- [nio-8082-exec-2] c.r.e.p.ha.controller.ProductController  : 请求：14</span><br><span class="line">2018-07-24 10:51:17.673  INFO 2314 --- [io-8082-exec-10] c.r.e.p.ha.controller.ProductController  : 请求：16</span><br><span class="line">2018-07-24 10:51:17.679  INFO 2314 --- [nio-8082-exec-6] c.r.e.p.ha.controller.ProductController  : 请求：15</span><br><span class="line">2018-07-24 10:51:17.680  INFO 2314 --- [nio-8082-exec-8] c.r.e.p.ha.controller.ProductController  : 请求：19</span><br><span class="line">2018-07-24 10:51:17.680  INFO 2314 --- [nio-8082-exec-7] c.r.e.p.ha.controller.ProductController  : 请求：17</span><br><span class="line">2018-07-24 10:51:17.684  INFO 2314 --- [nio-8082-exec-9] c.r.e.p.ha.controller.ProductController  : 请求：18</span><br></pre></td></tr></table></figure>
<h1><span id="hystrix合并请求处理高并发">Hystrix合并请求处理高并发</span></h1><p>在处理单个或者少量请求时，每个Command会占用一个线程资源执行请求，同一个服务的高并发场景下，这个服务所使用的Hystrix线程池资源会快速耗尽，并执行请求降级和断路。如果能够把对同一个服务的大量请求转化成一个请求，只消耗一个线程资源就能完成多个请求任务，虽然多个Request合并为一个Request执行后，平均到每个Request上的耗时会略有增加，但是将会大幅提升Hystrix的并发吞吐量，降低Hystrix服务降级和断路的发生概率。牺牲一点性能，提高系统的可用性是值得的。</p>
<p>Hystrix通过请求折叠合并，开启Hystrix Request Cache请求缓存，实现对此业务场景的支持。</p>
<h2><span id="创建请求折叠合并器collapser">创建请求折叠合并器Collapser</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfosCollapser</span> <span class="keyword">extends</span> <span class="title">HystrixCollapser</span>&lt;<span class="title">List</span>&lt;<span class="title">ProductInfo</span>&gt;,<span class="title">ProductInfo</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfosCollapser</span><span class="params">(Long productId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withCollapserKey(HystrixCollapserKey.Factory.asKey(<span class="string">"GetProductInfosCollapser"</span>))</span><br><span class="line">                .andCollapserPropertiesDefaults(HystrixCollapserProperties.defaultSetter()</span><br><span class="line">                        <span class="comment">//100ms以内的请求合并为一个请求,default 10</span></span><br><span class="line">                        .withTimerDelayInMilliseconds(<span class="number">1000</span>)</span><br><span class="line">                        <span class="comment">//请求合并的最大值100,default Integer.MAX_VALUE</span></span><br><span class="line">                        .withMaxRequestsInBatch(<span class="number">100</span>))</span><br><span class="line">                <span class="comment">//配置请求合并或者全局合并，default Scope.REQUEST</span></span><br><span class="line">                .andScope(Scope.GLOBAL));</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getRequestArgument</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"product_info_"</span>+productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> HystrixCommand&lt;List&lt;ProductInfo&gt;&gt; createCommand(Collection&lt;CollapsedRequest&lt;ProductInfo, Long&gt;&gt; collapsedRequests) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GetProductInfosCmmd4Collapser(collapsedRequests);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">mapResponseToRequests</span><span class="params">(List&lt;ProductInfo&gt; batchResponse, Collection&lt;CollapsedRequest&lt;ProductInfo, Long&gt;&gt; collapsedRequests)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (CollapsedRequest&lt;ProductInfo, Long&gt; collapsedRequest : collapsedRequests) &#123;</span><br><span class="line">            collapsedRequest.setResponse(batchResponse.get(count++));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内置Command处理多个请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfosCmmd4Collapser</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">List</span>&lt;<span class="title">ProductInfo</span>&gt;&gt;</span>&#123;</span><br><span class="line">        Collection&lt;CollapsedRequest&lt;ProductInfo, Long&gt;&gt; collapsedRequests;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfosCmmd4Collapser</span><span class="params">(Collection&lt;CollapsedRequest&lt;ProductInfo, Long&gt;&gt; collapsedRequests)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"GetProductInfosGroup"</span>))</span><br><span class="line">                    .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                            .withExecutionTimeoutInMilliseconds(<span class="number">20000</span>))</span><br><span class="line">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"GetProductInfosCmmd"</span>)));</span><br><span class="line">            <span class="keyword">this</span>.collapsedRequests = collapsedRequests;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> List&lt;ProductInfo&gt; <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (CollapsedRequest&lt;ProductInfo, Long&gt; collapsedRequest : collapsedRequests) &#123;</span><br><span class="line">                Long productId = collapsedRequest.getArgument();</span><br><span class="line">                stringBuilder.append(productId+<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String productIds = stringBuilder.substring(<span class="number">0</span>, stringBuilder.length() - <span class="number">1</span>);</span><br><span class="line">            String url = <span class="string">"http://127.0.0.1:8082/products/get?productIds="</span>+productIds;</span><br><span class="line">            String s = HttpClientUtils.sendGetRequestWithException(url);</span><br><span class="line">            log.info(<span class="string">"product-ha response &#123;&#125;"</span>,s);</span><br><span class="line">            List&lt;ProductInfo&gt; productInfos = JSONArray.parseArray(s, ProductInfo.class);</span><br><span class="line">            <span class="keyword">return</span> productInfos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="开启hystrix-request-cache">开启Hystrix Request Cache</span></h2><p>代码与处理单个请求时相同，在Collapser中重写getCacheKey方法，并在WebContex中注册HttpRequestContextFilter监听器。</p>
<p><strong>PS：</strong>Collapser把多个请求合并成一个Request后，再进行Request Cache判断是否从Cache中返回结果。也就是说如果多个相同的cacheKey被合并到不同的Request中，那么Request Cache就不能再多个Request之间共享，每次请求都会执行Command的run方法获取返回数据。而被合并到同一个Request中的多个相同的cacheKey请求，会根据Request Cache的getCacheKey()方法设置的key返回Request的Cache数据，而不需要重复执行Command的run()方法获取数据。</p>
<h2><span id="实例化collapser并提交请求">实例化Collapser并提交请求</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product/muti3"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ProductInfo&gt; <span class="title">getMutiProductsWithCollapseCmmd</span><span class="params">(String productIds)</span></span>&#123;</span><br><span class="line">        List&lt;ProductInfo&gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Future&lt;ProductInfo&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; productIdsList = Arrays.asList(productIds.split(<span class="string">","</span>));</span><br><span class="line">        <span class="keyword">for</span> (String s : productIdsList) &#123;</span><br><span class="line">            GetProductInfosCollapser getProductInfosCollapserCmmd = <span class="keyword">new</span> GetProductInfosCollapser(Long.valueOf(s));</span><br><span class="line">            Future&lt;ProductInfo&gt; queue = getProductInfosCollapserCmmd.queue();</span><br><span class="line">            futures.add(queue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行future.get()方法时才真正执行GetProductInfosCmmd4Collapse的run方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(Future&lt;ProductInfo&gt; future : futures) &#123;</span><br><span class="line">                resList.add(future.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="单元测试">单元测试</span></h2><h3><span id="测试代码1">测试代码1</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetProductMulti3_</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String productInfos = getProductInfo(<span class="string">"http://127.0.0.1:8081/product/muti3?productIds=1,2,3,4,4,4,5,5,6,7"</span>);</span><br><span class="line">        log.info(<span class="string">"返回结果：&#123;&#125;"</span>,productInfos);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="测试结果">测试结果</span></h3><p>在<a href="http://127.0.0.1:8082/products/get服务后台打印服务调用日志，发现相同的productId被Collapser缓存合并，只请求了一次。" target="_blank" rel="noopener">http://127.0.0.1:8082/products/get服务后台打印服务调用日志，发现相同的productId被Collapser缓存合并，只请求了一次。</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-07-24 08:50:04.183  INFO 1351 --- [nio-8082-exec-2] c.r.e.p.ha.controller.ProductController  : 请求：1,2,3,4,5,6,7</span><br></pre></td></tr></table></figure>
<h3><span id="测试代码2">测试代码2</span></h3><p>模拟5个并发，总共请求20次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> requestSize =<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> concurrentSize = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(requestSize);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(concurrentSize);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch count = <span class="keyword">new</span> CountDownLatch(requestSize);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetProductMulti3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; requestSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> flag = i;</span><br><span class="line">            service.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    String productInfos = getProductInfo(<span class="string">"http://127.0.0.1:8081/product/muti3?productIds="</span> + flag);</span><br><span class="line">                    log.info(<span class="string">"返回结果：&#123;&#125;"</span>,productInfos);</span><br><span class="line">                    count.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count.await();</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="测试结果">测试结果</span></h3><p>每5个并发请求被合并成一个请求，共20个请求执行了4次。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-07-24 08:56:30.867  INFO 1351 --- [nio-8082-exec-5] c.r.e.p.ha.controller.ProductController  : 请求：0,1,2,3,4</span><br><span class="line">2018-07-24 08:56:31.640  INFO 1351 --- [nio-8082-exec-6] c.r.e.p.ha.controller.ProductController  : 请求：5,6,7,8,9</span><br><span class="line">2018-07-24 08:56:32.639  INFO 1351 --- [nio-8082-exec-7] c.r.e.p.ha.controller.ProductController  : 请求：10,11,12,13,14</span><br><span class="line">2018-07-24 08:56:33.638  INFO 1351 --- [nio-8082-exec-8] c.r.e.p.ha.controller.ProductController  : 请求：16,17,18,19,15</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hystrix处理单个或者数量较少的请求&quot;&gt;&lt;a href=&quot;#Hystrix处理单个或者数量较少的请求&quot; class=&quot;headerlink&quot; title=&quot;Hystrix处理单个或者数量较少的请求&quot;&gt;&lt;/a&gt;Hystrix处理单个或者数量较少的请求&lt;/h1&gt;&lt;h2 id=&quot;创建HystrixCommand&quot;&gt;&lt;a href=&quot;#创建HystrixCommand&quot; class=&quot;headerlink&quot; title=&quot;创建HystrixCommand&quot;&gt;&lt;/a&gt;创建HystrixCommand&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Slf&lt;/span&gt;4j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetProductInfoCmmd&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HystrixCommand&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ProductInfo&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HystrixCommandKey KEY = HystrixCommandKey.Factory.asKey(&lt;span class=&quot;string&quot;&gt;&quot;GetProductInfoCmmd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long productId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetProductInfoCmmd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long productId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//跨网络请求通常使用HystrixCommandProperties.ExecutionIsolationStrategy.THREAD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 线程池策略（默认最多并发10个线程请求）进行隔离限流，目的是用线程池可以获取线程执行的操作状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//GetProductInfoCmmdGroup定义了一个线程池专门执行run方法，这个线程池的大小就主动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//限制住所有请求run方法中的http请求，防止http请求阻塞后整个web容器的线程资源都被耗尽&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//super(HystrixCommandGroupKey.Factory.asKey(&quot;GetProductInfoCmmdGroup&quot;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(&lt;span class=&quot;string&quot;&gt;&quot;GetProductInfoGroup&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .andCommandKey(HystrixCommandKey.Factory.asKey(&lt;span class=&quot;string&quot;&gt;&quot;GetProductInfoCmmd&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(&lt;span class=&quot;string&quot;&gt;&quot;GetProductInfoThreadPool&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;//允许执行的最大并发数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .withExecutionIsolationSemaphoreMaxConcurrentRequests(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;//请求超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .withExecutionTimeoutInMilliseconds(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;//default 10，默认线程池大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .withCoreSize(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;//default 5，没有被线程池执行的请求会放到队列中等待线程，如果队列已满，新来的请求会被降级被拒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .withQueueSizeRejectionThreshold(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;//withQueueSizeRejectionThreshold和withMaxQueueSize比较，queueSize取较小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                .withMaxQueueSize(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.productId = productId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; ProductInfo &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String url = &lt;span class=&quot;string&quot;&gt;&quot;http://127.0.0.1:8082/product/get?productId=&quot;&lt;/span&gt;+productId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String s = HttpClientUtils.sendGetRequestWithException(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;product-ha response &amp;#123;&amp;#125;&quot;&lt;/span&gt;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ProductInfo productInfo = JSONObject.parseObject(s, ProductInfo.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; productInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 从hystrix本地缓存中获取数据，而不是执行run方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getCacheKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;product_key_&quot;&lt;/span&gt;+productId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 清理hystrix缓存的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; productId&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;flushCache&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long productId)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HystrixRequestCache.getInstance(KEY,HystrixConcurrencyStrategyDefault.getInstance()).clear(&lt;span class=&quot;string&quot;&gt;&quot;product_key_&quot;&lt;/span&gt;+productId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * hystrix执行降级请求时返回的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; ProductInfo &lt;span class=&quot;title&quot;&gt;getFallback&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String product = &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;\&quot;id\&quot;: 111, \&quot;name\&quot;: \&quot;iphone7手机\&quot;, \&quot;price\&quot;: 5599, \&quot;pictureList\&quot;:\&quot;a.jpg,b.jpg\&quot;, \&quot;specification\&quot;: \&quot;iphone7的规格\&quot;, \&quot;service\&quot;: \&quot;iphone7的售后服务\&quot;, \&quot;color\&quot;: \&quot;红色,白色,黑色\&quot;, \&quot;size\&quot;: \&quot;5.5\&quot;, \&quot;shopId\&quot;: 1, \&quot;modifiedTime\&quot;: \&quot;2017-01-01 12:00:00\&quot;, \&quot;cityId\&quot;:1&amp;#125;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;getFallback:&amp;#123;&amp;#125;&quot;&lt;/span&gt;,product);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ProductInfo productInfo = JSONObject.parseObject(product, ProductInfo.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; productInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hystrix" scheme="http://www.forwardlee.com/tags/hystrix/"/>
    
      <category term="高并发" scheme="http://www.forwardlee.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>图解hystrix请求限流、降级条件和请求调用过程原理</title>
    <link href="http://www.forwardlee.com/2018/07/23/%E5%9B%BE%E8%A7%A3hystrix%E8%AF%B7%E6%B1%82%E9%99%8D%E7%BA%A7%E6%9D%A1%E4%BB%B6%E5%92%8C%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E5%8E%9F%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/07/23/图解hystrix请求降级条件和请求调用过程原理/</id>
    <published>2018-07-23T01:43:40.000Z</published>
    <updated>2018-07-26T02:10:17.511Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="hystrix原理图">Hystrix原理图</span></h1><p><img src="/2018/07/23/图解hystrix请求降级条件和请求调用过程原理/hystrix降级原理和调用过程.png" alt=""></p>
<a id="more"></a>
<h1><span id="hystrix应用场景">Hystrix应用场景</span></h1><ul>
<li>资源隔离：你如果有很多个依赖服务，高可用性，先做资源隔离，任何一个依赖服务的故障不会导致你的服务的资源耗尽，不会崩溃</li>
<li>请求缓存：对于一个request context内的多个相同command，使用request cache，提升性能</li>
<li>熔断：基于短路器，采集各种异常事件，报错，超时，reject，短路，熔断，一定时间范围内就不允许访问了，直接降级，自动恢复的机制</li>
<li>降级：报错，超时，reject，熔断，降级，服务提供容错的机制</li>
<li>限流：在你的服务里面，通过线程池，或者信号量，限制对某个后端的服务或资源的访问量，避免从你的服务这里过去太多的流量，打死某个资源</li>
<li>超时：避免某个依赖服务性能过差，导致大量的线程hang住去调用那个服务，会导致你的服务本身性能也比较差</li>
</ul>
<h1><span id="hystrix-circuit-breaker配置">Hystrix Circuit Breaker配置</span></h1><h2><span id="1circuitbreakerenabled">（1）circuitBreaker.enabled</span></h2><p>控制短路器是否允许工作，包括跟踪依赖服务调用的健康状况，以及对异常情况过多时是否允许触发短路，默认是true</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withCircuitBreakerEnabled(<span class="keyword">boolean</span> value)</span><br></pre></td></tr></table></figure>
<h2><span id="2circuitbreakerrequestvolumethreshold">（2）circuitBreaker.requestVolumeThreshold</span></h2><p>设置一个rolling window，滑动窗口中，最少要有多少个请求时，才触发开启短路</p>
<p>举例来说，如果设置为20（默认值），那么在一个10秒的滑动窗口内，如果只有19个请求，即使这19个请求都是异常的，也是不会触发开启短路器的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withCircuitBreakerRequestVolumeThreshold(<span class="keyword">int</span> value)</span><br></pre></td></tr></table></figure>
<h2><span id="3circuitbreakersleepwindowinmilliseconds">（3）circuitBreaker.sleepWindowInMilliseconds</span></h2><p>设置在短路之后，需要在多长时间内直接reject请求，然后在这段时间之后，再重新导holf-open状态，尝试允许请求通过以及自动恢复，默认值是5000毫秒</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withCircuitBreakerSleepWindowInMilliseconds(<span class="keyword">int</span> value)</span><br></pre></td></tr></table></figure>
<h2><span id="4circuitbreakererrorthresholdpercentage">（4）circuitBreaker.errorThresholdPercentage</span></h2><p>设置异常请求量的百分比，当异常请求达到这个百分比时，就触发打开短路器，默认是50，也就是50%</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withCircuitBreakerErrorThresholdPercentage(<span class="keyword">int</span> value)</span><br></pre></td></tr></table></figure>
<h2><span id="5circuitbreakerforceopen">（5）circuitBreaker.forceOpen</span></h2><p>如果设置为true的话，直接强迫打开短路器，相当于是手动短路了，手动降级，默认false</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withCircuitBreakerForceOpen(<span class="keyword">boolean</span> value)</span><br></pre></td></tr></table></figure>
<h2><span id="6circuitbreakerforceclosed">（6）circuitBreaker.forceClosed</span></h2><p>如果设置为ture的话，直接强迫关闭短路器，相当于是手动停止短路了，手动升级，默认false</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(<span class="keyword">boolean</span> value)</span><br></pre></td></tr></table></figure>
<h1><span id="hystrix-circuit-breaker示例代码">Hystrix Circuit Breaker示例代码</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetECourseAuthorInfoFromRedisCmmd</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ECourseAuthorInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pkid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetECourseAuthorInfoFromRedisCmmd</span><span class="params">(<span class="keyword">int</span> pkid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(HystrixCommandProperties.defaultSetter()</span><br><span class="line">                         <span class="comment">//配合hystrix-dashboard收集的数据对TP99.5的请求延时如果是100ms，</span></span><br><span class="line">                         <span class="comment">//那么再给一点重试时间50ms，那么就可以设置command执行超时为150ms</span></span><br><span class="line">                        .withExecutionTimeoutInMilliseconds(<span class="number">150</span>)</span><br><span class="line">                         <span class="comment">//circuitBreaker一个请求窗口持续10s。如果TP99的QPS为50，那么这个</span></span><br><span class="line">                         <span class="comment">//值可以设置为50*10=500</span></span><br><span class="line">                        .withCircuitBreakerRequestVolumeThreshold(<span class="number">500</span>)</span><br><span class="line">                         <span class="comment">//默认值50，依赖服务的Command执行报错占比。</span></span><br><span class="line">                         <span class="comment">//可以根据业务场景修改，如果是对服务接口安全级别要求高的</span></span><br><span class="line">                         <span class="comment">//可以设置小一点,如支付接口，可以设置10，如果安全级别低的就设置大一点。</span></span><br><span class="line">                        .withCircuitBreakerErrorThresholdPercentage(<span class="number">30</span>)</span><br><span class="line">                         <span class="comment">//断路器为open状态后持续多长时间直接拒绝请求，超过这个时间后状态改为half-open</span></span><br><span class="line">                        .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">60</span>*<span class="number">1000</span>)));</span><br><span class="line">        <span class="keyword">this</span>.pkid = pkid;</span><br><span class="line">    &#125;</span><br><span class="line"> ...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hystrix原理图&quot;&gt;&lt;a href=&quot;#Hystrix原理图&quot; class=&quot;headerlink&quot; title=&quot;Hystrix原理图&quot;&gt;&lt;/a&gt;Hystrix原理图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/07/23/图解hystrix请求降级条件和请求调用过程原理/hystrix降级原理和调用过程.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hystrix" scheme="http://www.forwardlee.com/tags/hystrix/"/>
    
  </entry>
  
  <entry>
    <title>HashSet、HashMap 、ArrayList线程不安全与对策</title>
    <link href="http://www.forwardlee.com/2018/07/15/HashSet%E3%80%81HashMap%E3%80%81ArrayList%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E4%B8%8E%E5%AF%B9%E7%AD%96/"/>
    <id>http://www.forwardlee.com/2018/07/15/HashSet、HashMap、ArrayList线程不安全与对策/</id>
    <published>2018-07-15T03:34:52.000Z</published>
    <updated>2018-07-20T12:19:41.707Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="测试用例">测试用例</span></h1><p>设定2000个请求，分多次并发请求往容器内添加元素，使用信号量Semaphore控制并发量的大小，查看集合中元素数量是否等于2000，等于2000表示容器是并发线程安全的，小于2000表示容器是并发线程不安全的。</p>
<h1><span id="普通容器的线程不安全示例">普通容器的线程不安全示例</span></h1><h2><span id="hashset线程不安全示例">HashSet线程不安全示例</span></h2><h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashSet</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">    <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        service.submit(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                set.add(Thread.currentThread().getId());</span><br><span class="line">                semaphore.release();</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">    service.shutdown();</span><br><span class="line">    log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">12:26:39.881 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：1998</span><br></pre></td></tr></table></figure>
<h2><span id="hashmap线程不安全示例">HashMap线程不安全示例</span></h2><h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">    HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">    <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1000</span>);<span class="comment">//1000的信号量相当于1000个并发</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        service.submit(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                map.put(Thread.currentThread().getId(), Thread.currentThread().getId());</span><br><span class="line">                semaphore.release();</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">    service.shutdown();</span><br><span class="line">    log.info(<span class="string">"集合大小：&#123;&#125;"</span>,map.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">12:35:48.188 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：1999</span><br></pre></td></tr></table></figure>
<h2><span id="arraylist线程不安全示例">ArrayList线程不安全示例</span></h2><h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayList</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   list.add(Thread.currentThread().getId());</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,list.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">12:44:06.468 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：1999</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="synchronized线程安全解决方案">synchronized线程安全解决方案</span></h1><p>synchronized关键字修饰要进行并发操作的代码，只允许同时只有一个线程获取到被修饰的代码执行锁，其他线程处于等待，直到已经获取到锁的线程执行完上锁的代码释放锁后，获取一把锁执行代码。可以解决集合的线程不安全问题。</p>
<h2><span id="代码">代码</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashSet</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       HashSet set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                       set.add(count);</span><br><span class="line">                   &#125;</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="执行结果">执行结果</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">09:49:17.681 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
<h1><span id="juc的lock机制的线程安全解决方案">J.U.C的Lock机制的线程安全解决方案</span></h1><p>示例使用ReentrantLock解决并发线程不安全问题。与synchronized关键字比较：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th>synchronized</th>
<th>ReentrantLock</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">性能</td>
<td>jdk1.6以后进行了优化，增加了偏向锁和轻量级锁的优化，性能大幅提高。</td>
<td>性能与synchronized差异不大。</td>
</tr>
<tr>
<td style="text-align:center">功能</td>
<td>简单的锁定功能，jvm自动释放锁。</td>
<td>有公平性、Condition获取线程状态等丰富功能，自由灵活的锁定功能，代码实现解锁。</td>
</tr>
<tr>
<td style="text-align:center">易用性</td>
<td>因为功能简单，所以易用。</td>
<td>因为功能复杂，在必须使用其复杂功能时才能显出优势。</td>
</tr>
<tr>
<td style="text-align:center">推荐</td>
<td>首选</td>
<td>备选</td>
</tr>
</tbody>
</table>
<h2><span id="代码">代码</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       HashSet set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       set.add(count);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="执行结果">执行结果</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">10:31:40.058 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
<h1><span id="同步容器的线程安全解决方案">同步容器的线程安全解决方案</span></h1><p>同步容器在底层执行代码增加了synchronized关键字保证线程安全。</p>
<h2><span id="hashset转换为同步容器的方法">HashSet转换为同步容器的方法</span></h2><h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSyncSet</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">        Set set = Collections.synchronizedSet(<span class="keyword">new</span> HashSet());</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            service.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    set.add(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">        log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">10:30:20.787 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
<h2><span id="hashmap转换为同步容器的方法">HashMap转换为同步容器的方法</span></h2><h3><span id="代码1">代码1</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashTable的key-value都不能为null</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashTable</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       Map&lt;Object, Object&gt; map = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1000</span>);<span class="comment">//1000的信号量相当于1000个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   map.put(Thread.currentThread().getId(), Thread.currentThread().getId());</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,map.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="代码2">代码2</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSyncMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       Map&lt;Object, Object&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1000</span>);<span class="comment">//1000的信号量相当于1000个并发</span></span><br><span class="line">       CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   map.put(count, count);</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,map.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">10:44:48.401 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
<h2><span id="arraylist转换为同步容器的方法">ArrayList转换为同步容器的方法</span></h2><h3><span id="代码1">代码1</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVector</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       List&lt;Object&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">       CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   list.add(count);</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,list.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="代码2">代码2</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStack</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            service.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    list.add(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">        log.info(<span class="string">"集合大小：&#123;&#125;"</span>,list.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="代码3">代码3</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSyncList</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">        List&lt;Object&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            service.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    list.add(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">        log.info(<span class="string">"集合大小：&#123;&#125;"</span>,list.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">17:38:25.404 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
<h1><span id="同步容器实现线程安全的缺点">同步容器实现线程安全的缺点</span></h1><p>同步容器底层使用synchronized关键字修饰实现线程安全，但是synchronized实现线程安全会降低代码的执行性能，如果是高并发场景下，建议使用J.U.C的并发容器解决线程不安全问题。</p>
<h1><span id="并发容器的线程安全解决方案">并发容器的线程安全解决方案</span></h1><h2><span id="copyonwrite容器的线程安全解决方案">CopyOnWrite容器的线程安全解决方案</span></h2><p>CopyOnWrite容器在并发操作时首先会对数据进行拷贝，然后对数据进行CompareAndSet操作，当数据量比较大时，Copy和Set操作就会明显降低代码的性能。不推荐使用。</p>
<h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyOnWriteArraySet</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">        Set set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            service.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    set.add(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">        log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyOnWriteArrayList</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">        List set = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            service.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    set.add(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">        log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">18:09:39.398 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
<h2><span id="concurrent容器的线程安全解决方案">Concurrent容器的线程安全解决方案</span></h2><p>线程安全，支持高并发场景的线程安全，推荐使用。</p>
<h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素不能为null,支持元素排序</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcurrentSkipListSet</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       Set set = <span class="keyword">new</span> ConcurrentSkipListSet();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">500</span>);<span class="comment">//500的信号量相当于500个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   set.add(count);</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,set.size());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//适合高并发场景，但不支持元素排序</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcurrentMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       Map&lt;Object, Object&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1000</span>);<span class="comment">//1000的信号量相当于1000个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   map.put(count, count);</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,map.size());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//性能相较于ConcurrentHashMap有所降低，支持元素排序，不能存放null，并发量越大，性能优势越明显</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcurrentSkipListMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> threadSize = <span class="number">2000</span>;</span><br><span class="line">       Map&lt;Object, Object&gt; map = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">       ExecutorService service = Executors.newFixedThreadPool(threadSize);</span><br><span class="line">       <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1000</span>);<span class="comment">//1000的信号量相当于1000个并发</span></span><br><span class="line">       <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">           service.submit(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   semaphore.acquire();</span><br><span class="line">                   map.put(count, count);</span><br><span class="line">                   semaphore.release();</span><br><span class="line">                   countDownLatch.countDown();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       countDownLatch.await();<span class="comment">//主线程等待，直到countDownLatch被减到0，主线程再继续执行。</span></span><br><span class="line">       service.shutdown();</span><br><span class="line">       log.info(<span class="string">"集合大小：&#123;&#125;"</span>,map.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="执行结果">执行结果</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">18:15:47.529 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：2000</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试用例&quot;&gt;&lt;a href=&quot;#测试用例&quot; class=&quot;headerlink&quot; title=&quot;测试用例&quot;&gt;&lt;/a&gt;测试用例&lt;/h1&gt;&lt;p&gt;设定2000个请求，分多次并发请求往容器内添加元素，使用信号量Semaphore控制并发量的大小，查看集合中元素数量是否等于2000，等于2000表示容器是并发线程安全的，小于2000表示容器是并发线程不安全的。&lt;/p&gt;
&lt;h1 id=&quot;普通容器的线程不安全示例&quot;&gt;&lt;a href=&quot;#普通容器的线程不安全示例&quot; class=&quot;headerlink&quot; title=&quot;普通容器的线程不安全示例&quot;&gt;&lt;/a&gt;普通容器的线程不安全示例&lt;/h1&gt;&lt;h2 id=&quot;HashSet线程不安全示例&quot;&gt;&lt;a href=&quot;#HashSet线程不安全示例&quot; class=&quot;headerlink&quot; title=&quot;HashSet线程不安全示例&quot;&gt;&lt;/a&gt;HashSet线程不安全示例&lt;/h2&gt;&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testHashSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadSize = &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HashSet set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ExecutorService service = Executors.newFixedThreadPool(threadSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Semaphore semaphore = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Semaphore(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//500的信号量相当于500个并发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; CountDownLatch countDownLatch = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(threadSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; threadSize; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        service.submit(()-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                semaphore.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                set.add(Thread.currentThread().getId());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                semaphore.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                countDownLatch.countDown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    countDownLatch.await();&lt;span class=&quot;comment&quot;&gt;//主线程等待，直到countDownLatch被减到0，主线程再继续执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    service.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.info(&lt;span class=&quot;string&quot;&gt;&quot;集合大小：&amp;#123;&amp;#125;&quot;&lt;/span&gt;,set.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;执行结果&quot;&gt;&lt;a href=&quot;#执行结果&quot; class=&quot;headerlink&quot; title=&quot;执行结果&quot;&gt;&lt;/a&gt;执行结果&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12:26:39.881 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：1998&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;HashMap线程不安全示例&quot;&gt;&lt;a href=&quot;#HashMap线程不安全示例&quot; class=&quot;headerlink&quot; title=&quot;HashMap线程不安全示例&quot;&gt;&lt;/a&gt;HashMap线程不安全示例&lt;/h2&gt;&lt;h3 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testHashMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadSize = &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HashMap&amp;lt;Object, Object&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ExecutorService service = Executors.newFixedThreadPool(threadSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Semaphore semaphore = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Semaphore(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//1000的信号量相当于1000个并发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; CountDownLatch countDownLatch = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(threadSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; threadSize; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        service.submit(()-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                semaphore.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                map.put(Thread.currentThread().getId(), Thread.currentThread().getId());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                semaphore.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                countDownLatch.countDown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    countDownLatch.await();&lt;span class=&quot;comment&quot;&gt;//主线程等待，直到countDownLatch被减到0，主线程再继续执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    service.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.info(&lt;span class=&quot;string&quot;&gt;&quot;集合大小：&amp;#123;&amp;#125;&quot;&lt;/span&gt;,map.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;执行结果-1&quot;&gt;&lt;a href=&quot;#执行结果-1&quot; class=&quot;headerlink&quot; title=&quot;执行结果&quot;&gt;&lt;/a&gt;执行结果&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12:35:48.188 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：1999&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ArrayList线程不安全示例&quot;&gt;&lt;a href=&quot;#ArrayList线程不安全示例&quot; class=&quot;headerlink&quot; title=&quot;ArrayList线程不安全示例&quot;&gt;&lt;/a&gt;ArrayList线程不安全示例&lt;/h2&gt;&lt;h3 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testArrayList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadSize = &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ArrayList&amp;lt;Object&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ExecutorService service = Executors.newFixedThreadPool(threadSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Semaphore semaphore = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Semaphore(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//500的信号量相当于500个并发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; CountDownLatch countDownLatch = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(threadSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; threadSize; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           service.submit(()-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   semaphore.acquire();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   list.add(Thread.currentThread().getId());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   semaphore.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   countDownLatch.countDown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       countDownLatch.await();&lt;span class=&quot;comment&quot;&gt;//主线程等待，直到countDownLatch被减到0，主线程再继续执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       service.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       log.info(&lt;span class=&quot;string&quot;&gt;&quot;集合大小：&amp;#123;&amp;#125;&quot;&lt;/span&gt;,list.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;执行结果-2&quot;&gt;&lt;a href=&quot;#执行结果-2&quot; class=&quot;headerlink&quot; title=&quot;执行结果&quot;&gt;&lt;/a&gt;执行结果&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12:44:06.468 [main] INFO com.hledu.project1.front.concurrent.CollectionsConcurrent - 集合大小：1999&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ThreadSafe" scheme="http://www.forwardlee.com/tags/ThreadSafe/"/>
    
      <category term="集合" scheme="http://www.forwardlee.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://www.forwardlee.com/2018/07/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.forwardlee.com/2018/07/04/Docker常用命令/</id>
    <published>2018-07-04T03:10:56.000Z</published>
    <updated>2018-07-04T03:31:45.707Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">运行</td>
<td style="text-align:center">docker run –name container-name -d image-name eg:docker run –name myredis –d redis</td>
<td style="text-align:center">–name:自定义容器名 -d:后台运行 image-name:指定镜像模板</td>
</tr>
<tr>
<td style="text-align:center">列表</td>
<td style="text-align:center">docker ps(查看运行中的容器);</td>
<td style="text-align:center">加上-a;可以查看所有容器</td>
</tr>
<tr>
<td style="text-align:center">停止</td>
<td style="text-align:center">docker stop container-name或者container-id</td>
<td style="text-align:center">停止当前你运行的容器</td>
</tr>
<tr>
<td style="text-align:center">启动</td>
<td style="text-align:center">docker start container-name或者container-id</td>
<td style="text-align:center">启动容器</td>
</tr>
<tr>
<td style="text-align:center">删除</td>
<td style="text-align:center">docker rm container-id</td>
<td style="text-align:center">删除指定容器</td>
</tr>
<tr>
<td style="text-align:center">端口映射</td>
<td style="text-align:center">-p 6379:6379  eg:docker run -d -p 6379:6379 –name myredis docker.io/redis</td>
<td style="text-align:center">-p: 主机端口(映射到)容器内部的端口</td>
</tr>
<tr>
<td style="text-align:center">容器日志</td>
<td style="text-align:center">docker logs container-name或者container-id</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">更多命令</td>
<td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;操作&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.forwardlee.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nexus私服搭建</title>
    <link href="http://www.forwardlee.com/2018/07/02/Nexus%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.forwardlee.com/2018/07/02/Nexus私服搭建/</id>
    <published>2018-07-02T09:21:57.000Z</published>
    <updated>2018-07-02T10:34:37.371Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="写在文前">写在文前</span></h1><p>在没有配置Nexus私服的情况下，搭建maven工程后，通过pom.xml中配置的<depency></depency>标签引入所需要的jar包，这样做会有两个很不理想的情况。</p>
<ol>
<li>maven每次都要从网络上下载新引入的jar包，耗时耗力；</li>
<li>jar在互联网上分布不够集中，就需要在maven的配置文件settings.xml中配置很多仓库镜像标签<mirro></mirro>，对maven所依赖的jar包不方便管理。</li>
</ol>
<p>Nexus的出现解决了上述两种问题，它作为Maven远程仓库的代理工具，可以把分散的镜像划入一个代理组内，然后再maven的配置文件中只需要配置这个代理组的私有仓库地址即可。</p>
<h1><span id="安装nexus">安装Nexus</span></h1><p>环境：CentOS 6.8 x86_64</p>
<p>安装包：nexus-2.14.4-03-bundle.tar.gz</p>
<p>安装过程：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf nexus-2.14.4-03-bundle.tar.gz</span><br><span class="line">cd nexus-2.14.4-03/bin</span><br><span class="line">vi nexus</span><br></pre></td></tr></table></figure>
<p>如果要使用linux的root用户运行nexus，只需要修改以下代码：</p>
<p><img src="/2018/07/02/Nexus私服搭建/image-20180702180141767.png" alt="image-20180702180141767"></p>
<p>运行nexus</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nexus-2.14.4-03/bin</span><br><span class="line">./nexus start</span><br></pre></td></tr></table></figure>
<p>访问nexus</p>
<p><a href="http://ip:8081/nexus" target="_blank" rel="noopener">http://ip:8081/nexus</a></p>
<h1><span id="管理nexus">管理nexus</span></h1><p>public repositories是一个公共的仓库代理组，只要把需要的第三方远程仓库以代理的形式添加到nexus中，并放入public repositories中，maven只需要依赖这一个代理仓库地址即可。</p>
<p><img src="/2018/07/02/Nexus私服搭建/QQ20180702-175202.png" alt="nexus界面"></p>
<a id="more"></a>
<h1><span id="本地maven配置">本地maven配置</span></h1><p>maven配置文件中的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>~/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.jenkins-ci.tools<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.218:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://nexus-public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://nexus-public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/07/02/Nexus私服搭建/image-20180702181454702.png" alt="image-20180702181454702"></p>
<p><img src="/2018/07/02/Nexus私服搭建/image-20180702181628290.png" alt="image-20180702181628290"></p>
<h1><span id="项目中pomxml配置">项目中pom.xml配置</span></h1><p>在项目中pom.xml要使用私有仓库的代理地址和发布jar包的地址配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 公司Maven私服Nexus地址用于下载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.218:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司Maven私服Nexus地址用于发布,需要maven的settings.xml中配置了release和snapshots的用户名和密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.218:8081/nexus/content/repositories/releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.218:8081/nexus/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在文前&quot;&gt;&lt;a href=&quot;#写在文前&quot; class=&quot;headerlink&quot; title=&quot;写在文前&quot;&gt;&lt;/a&gt;写在文前&lt;/h1&gt;&lt;p&gt;在没有配置Nexus私服的情况下，搭建maven工程后，通过pom.xml中配置的&lt;depency&gt;&lt;/depency&gt;标签引入所需要的jar包，这样做会有两个很不理想的情况。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;maven每次都要从网络上下载新引入的jar包，耗时耗力；&lt;/li&gt;
&lt;li&gt;jar在互联网上分布不够集中，就需要在maven的配置文件settings.xml中配置很多仓库镜像标签&lt;mirro&gt;&lt;/mirro&gt;，对maven所依赖的jar包不方便管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nexus的出现解决了上述两种问题，它作为Maven远程仓库的代理工具，可以把分散的镜像划入一个代理组内，然后再maven的配置文件中只需要配置这个代理组的私有仓库地址即可。&lt;/p&gt;
&lt;h1 id=&quot;安装Nexus&quot;&gt;&lt;a href=&quot;#安装Nexus&quot; class=&quot;headerlink&quot; title=&quot;安装Nexus&quot;&gt;&lt;/a&gt;安装Nexus&lt;/h1&gt;&lt;p&gt;环境：CentOS 6.8 x86_64&lt;/p&gt;
&lt;p&gt;安装包：nexus-2.14.4-03-bundle.tar.gz&lt;/p&gt;
&lt;p&gt;安装过程：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zvxf nexus-2.14.4-03-bundle.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd nexus-2.14.4-03/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vi nexus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要使用linux的root用户运行nexus，只需要修改以下代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/02/Nexus私服搭建/image-20180702180141767.png&quot; alt=&quot;image-20180702180141767&quot;&gt;&lt;/p&gt;
&lt;p&gt;运行nexus&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd nexus-2.14.4-03/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./nexus start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问nexus&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ip:8081/nexus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ip:8081/nexus&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;管理nexus&quot;&gt;&lt;a href=&quot;#管理nexus&quot; class=&quot;headerlink&quot; title=&quot;管理nexus&quot;&gt;&lt;/a&gt;管理nexus&lt;/h1&gt;&lt;p&gt;public repositories是一个公共的仓库代理组，只要把需要的第三方远程仓库以代理的形式添加到nexus中，并放入public repositories中，maven只需要依赖这一个代理仓库地址即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/02/Nexus私服搭建/QQ20180702-175202.png&quot; alt=&quot;nexus界面&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nexus" scheme="http://www.forwardlee.com/tags/Nexus/"/>
    
      <category term="Maven" scheme="http://www.forwardlee.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Springboot/Springcloud技术栈</title>
    <link href="http://www.forwardlee.com/2018/06/29/Springboot-Springcloud%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>http://www.forwardlee.com/2018/06/29/Springboot-Springcloud技术栈/</id>
    <published>2018-06-29T03:51:00.000Z</published>
    <updated>2018-06-29T10:06:19.942Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-cloud">Spring Cloud</span></h1><h2><span id="预备preparation">预备（Preparation））</span></h2><h3><span id="技术体系">技术体系</span></h3><ul>
<li>架构  <ul>
<li>面向服务架构（SOA）  </li>
<li>微服务（MSA）  <ul>
<li>测试驱动开发（TDD)  </li>
<li>领域驱动设计（DDD）  </li>
</ul>
</li>
<li>事件驱动架构（EDA）  </li>
</ul>
</li>
<li>技术  <ul>
<li>Java 8 基础  </li>
<li>Spring Framework 4.x  </li>
<li>Spring Boot 1.x  </li>
</ul>
</li>
</ul>
<h3><span id="环境依赖">环境依赖</span></h3><ul>
<li>Spring Cloud  <ul>
<li>Dalston.SR3  </li>
</ul>
</li>
<li>Spring Boot  <ul>
<li>1.5.x  </li>
</ul>
</li>
<li>Spring Framework  <ul>
<li>4.3.x  </li>
</ul>
</li>
<li>Maven  <ul>
<li>3.5.0  </li>
</ul>
</li>
<li>Java  <ul>
<li><blockquote>
<p>= 8  </p>
</blockquote>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2><span id="原生云应用cloud-native-applications">原生云应用（Cloud Native Applications）</span></h2><h3><span id="知识储备">知识储备</span></h3><ul>
<li><p>12-Factor 应用<br>  链接: <a href="https://12factor.net/" target="_blank" rel="noopener">12factor.net/</a>  </p>
<ul>
<li>Codebase  </li>
<li>Dependencies  </li>
<li>Config  </li>
<li>Backing services  </li>
<li>Build, release, run  </li>
<li>Processes  </li>
<li>Port binding  </li>
<li>Concurrency  </li>
<li>Disposability  </li>
<li>Dev/prod parity  </li>
<li>Logs  </li>
<li>Admin processes  </li>
</ul>
</li>
<li>Spring Framework  <ul>
<li>ApplicationContext  </li>
</ul>
</li>
<li>Spring Boot  <ul>
<li>SpringApplication  </li>
<li>SpringApplicationBuilder  </li>
</ul>
</li>
</ul>
<h3><span id="bootstrap-上下文">Bootstrap 上下文</span></h3><ul>
<li>Bootstrap Application Context  </li>
<li>理解 Application Context 层次性  </li>
</ul>
<h3><span id="端点endpoints">端点（Endpoints）</span></h3><ul>
<li>上下文重启  <ul>
<li>/restart  </li>
</ul>
</li>
<li>生命周期回调  <ul>
<li>/pause  </li>
<li>/resume  </li>
</ul>
</li>
</ul>
<h2><span id="分布式配置configuration">分布式配置（Configuration）</span></h2><h3><span id="技术回顾">技术回顾</span></h3><ul>
<li>Spring Framework  <ul>
<li>Environment  </li>
<li>PropertySources  <ul>
<li>PropertySource  </li>
</ul>
</li>
<li>@PropertySources  <ul>
<li>@PropertySource  </li>
</ul>
</li>
<li>@Profile  </li>
</ul>
</li>
<li>Spring Boot  <ul>
<li>application.properties  </li>
<li>事件（Event）  <ul>
<li>ApplicationEnvironmentPreparedEvent  </li>
<li>ApplicationPreparedEvent  </li>
</ul>
</li>
<li>监听器（Listener）  <ul>
<li>ConfigFileApplicationListener  </li>
</ul>
</li>
</ul>
</li>
<li>Java 加密扩展（JCE）  <ul>
<li>JCE 8  </li>
</ul>
</li>
</ul>
<h3><span id="spring-cloud-配置客户端">Spring Cloud 配置客户端</span></h3><ul>
<li>配置文件  <ul>
<li>bootstrap.yml  </li>
<li>bootstrap.properties  </li>
</ul>
</li>
<li>Bootstrap 配置属性（Properties）  <ul>
<li>调整 Bootstrap 配置文件路径  </li>
<li>覆盖远程配置属性  </li>
<li>自定义 Bootstrap 配置  </li>
<li>自定义 Bootstrap 配置属性源  </li>
</ul>
</li>
<li>安全  </li>
</ul>
<h3><span id="spring-cloud-服务器">Spring Cloud 服务器</span></h3><ul>
<li>@EnableConfigServer  </li>
<li>Environment 仓储  </li>
<li>分布式配置实现  <ul>
<li>Git 实现  <ul>
<li>认证（Authentication）  </li>
</ul>
</li>
<li>文件系统实现  </li>
<li>自定义实现  <ul>
<li>Zookeeper  </li>
</ul>
</li>
</ul>
</li>
<li>健康指标（Health Indicator）  </li>
<li>加密和解密（Encryption and Decryption）  </li>
<li>秘钥管理（Key Management）  <ul>
<li>创建Key  </li>
</ul>
</li>
<li>@RefreshScope Bean  <ul>
<li>@RefreshScope 使用场景  </li>
</ul>
</li>
<li>端点（Endpoints）  <ul>
<li>Environment 端点  <ul>
<li>/env  </li>
</ul>
</li>
<li>@RefreshScope 端点  <ul>
<li>/refresh  </li>
</ul>
</li>
<li>上下文重启  <ul>
<li>/restart  </li>
</ul>
</li>
<li>生命周期回调  <ul>
<li>/pause  </li>
<li>/resume  </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="服务发现注册discoveryregistry">服务发现/注册（Discovery/Registry）</span></h2><h3><span id="核心理念">核心理念</span></h3><ul>
<li>服务发现（Discovery）  <ul>
<li>WebService  <ul>
<li>UDDI  </li>
</ul>
</li>
<li>REST  <ul>
<li>HATEOAS  </li>
</ul>
</li>
<li>Messaging  <ul>
<li>JMS  </li>
</ul>
</li>
<li>Java  <ul>
<li>JNDI  </li>
<li>JINI  <ul>
<li>Apache River  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>服务注册（Registry）  <ul>
<li>SOA  <ul>
<li>服务提供方（Service Registry）  </li>
<li>服务代理（Service Broker）  </li>
<li>服务消费者（Service Consumer）  </li>
</ul>
</li>
</ul>
</li>
<li><p>高可用（High Availability）<br>  链接: <a href="https://en.wikipedia.org/wiki/High_availability" target="_blank" rel="noopener">en.wikipedia.org/wiki/High_availability</a>  </p>
<ul>
<li>原则（Principles）  <ul>
<li>消除单点失败  </li>
<li>可靠性交迭  </li>
<li>故障探测  </li>
</ul>
</li>
<li>可用性比率计算  </li>
<li>系统设计  </li>
</ul>
</li>
</ul>
<h3><span id="服务发现discovery">服务发现（Discovery）</span></h3><ul>
<li>客户端  <ul>
<li>Netflix Eureka  <ul>
<li>引入  <ul>
<li>spring-cloud-starter-eureka  </li>
</ul>
</li>
<li>API  <ul>
<li>EurekaClient  </li>
<li>ServiceInstance  </li>
</ul>
</li>
</ul>
</li>
<li>Spring Cloud Commons  <ul>
<li>API  <ul>
<li>@EnableDiscoveryClient  </li>
<li>DiscoveryClient  </li>
<li>ServiceInstance  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="服务注册registry">服务注册（Registry）</span></h3><ul>
<li><p>客户端  </p>
<ul>
<li><p>Netflix Eureka  </p>
<ul>
<li>激活  <ul>
<li>@EnableEurekaClient  </li>
</ul>
</li>
<li><p>区域化（zones）<br>  链接: <a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR3/#_zones" target="_blank" rel="noopener">cloud.spring.io/spring-cloud-static/Dalston.SR3/#_zones</a>  </p>
</li>
<li><p>安全（Secure）<br>  链接: <a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR3/#_registering_a_secure_application" target="_blank" rel="noopener">cloud.spring.io/spring-cloud-static/Dalston.SR3/#_registering_a_secure_application</a>  </p>
</li>
<li><p>健康检查（Health Checks）  </p>
<ul>
<li>健康指标（Health Indicator）  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>服务端  <ul>
<li>Netflix Eureka  <ul>
<li>激活  <ul>
<li>@EnableEurekaServer  </li>
</ul>
</li>
<li>高可用  </li>
<li>区域化  <ul>
<li>Zones  </li>
<li>Regions  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="负载均衡load-balance">负载均衡（Load Balance）</span></h2><h3><span id="核心理念">核心理念</span></h3><ul>
<li>客户端（Client）  <ul>
<li>Round-robin DNS  </li>
</ul>
</li>
<li>服务端（Server）  </li>
<li>调度算法  <ul>
<li>先来先服务（First Come First Served）  </li>
<li>最早截止时间优先（Earliest deadline first）  </li>
<li>最短保留时间优先（Shortest remaining time first）  </li>
<li>固定优先级（Fixed Priority）  </li>
<li>轮训（Round-Robin）  </li>
<li>多级别队列（Multilevel Queue）  </li>
</ul>
</li>
<li>特性（Features）  <ul>
<li>非对称负载（Asymmetric load）  </li>
<li>SSL 卸载和加速  </li>
<li>分布式拒绝服务攻击保护  </li>
<li>HTTP 压缩  </li>
<li>TCP 卸载  </li>
<li>TCP 缓冲  </li>
<li>直接服务返回  </li>
<li>健康检查  </li>
<li>优先级队列  </li>
<li>内容意识切换  </li>
<li>客户端认证  </li>
<li>编程式流量操作  </li>
<li>防火墙  </li>
<li>入侵防御系统  </li>
</ul>
</li>
</ul>
<h3><span id="客户端">客户端</span></h3><ul>
<li>Netflix Ribbon  <ul>
<li>激活  <ul>
<li>@RibbonClient  </li>
</ul>
</li>
<li>负载均衡器  <ul>
<li>ILoadBalancer  <ul>
<li>AbstractLoadBalancer  <ul>
<li>BaseLoadBalancer  <ul>
<li>DynamicServerListLoadBalancer  </li>
<li>ZoneAwareLoadBalancer  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>负载均衡客户端  <ul>
<li>LoadBalancerClient  </li>
</ul>
</li>
<li>自动装配  <ul>
<li>LoadBalancerAutoConfiguration  </li>
</ul>
</li>
<li>源码分析  <ul>
<li>RestTemplate 自定义器  <ul>
<li>RestTemplateCustomizer  </li>
</ul>
</li>
<li>RestTemplate 请求拦截器  <ul>
<li>LoadBalancerInterceptor  </li>
</ul>
</li>
<li>标记注解  <ul>
<li>@LoadBalanced  </li>
</ul>
</li>
<li>实际请求客户端  <ul>
<li>LoadBalancerClient  </li>
<li>RibbonLoadBalancerClient  </li>
</ul>
</li>
<li>负载均衡上下文  <ul>
<li>LoadBalancerContext  </li>
<li>RibbonLoadBalancerContext  </li>
</ul>
</li>
<li>负载均衡器  <ul>
<li>ILoadBalancer  </li>
<li>BaseLoadBalancer  </li>
<li>DynamicServerListLoadBalancer  </li>
<li>ZoneAwareLoadBalancer  </li>
<li>NoOpLoadBalancer  </li>
</ul>
</li>
<li>负载均衡规则  <ul>
<li>核心规则接口  <ul>
<li>IRule  </li>
</ul>
</li>
<li>随机规则  <ul>
<li>RandomRule  </li>
</ul>
</li>
<li>最可用规则  <ul>
<li>BestAvailableRule  </li>
</ul>
</li>
<li>轮训规则  <ul>
<li>默认实现  <ul>
<li>RoundRobinRule  </li>
</ul>
</li>
<li>重试实现  <ul>
<li>RetryRule  </li>
</ul>
</li>
<li>客户端配置  <ul>
<li>ClientConfigEnabledRoundRobinRule  </li>
</ul>
</li>
</ul>
</li>
<li>可用性过滤规则  <ul>
<li>AvailabilityFilteringRule  </li>
</ul>
</li>
<li>RT权重规则  <ul>
<li>WeightedResponseTimeRule  </li>
</ul>
</li>
<li>规避区域规则  <ul>
<li>ZoneAvoidanceRule  </li>
</ul>
</li>
</ul>
</li>
<li>PING 策略  <ul>
<li>核心策略接口  <ul>
<li>IPingStrategy  </li>
</ul>
</li>
<li>PING 接口  <ul>
<li>IPing  </li>
<li>实现  <ul>
<li>NoOpPing  </li>
<li>DummyPing  </li>
<li>PingConstant  </li>
<li>PingUrl  </li>
</ul>
</li>
<li>Discovery Client 实现  <ul>
<li>NIWSDiscoveryPing  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Spring Framework  <ul>
<li>REST 客户端  <ul>
<li>模板类  <ul>
<li>RestTemplate  </li>
</ul>
</li>
<li>客户端请求拦截器  <ul>
<li>ClientHttpRequestInterceptor  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="服务短路circuit-breakers">服务短路（Circuit Breakers）</span></h2><h3><span id="核心理念">核心理念</span></h3><ul>
<li>名词由来  <ul>
<li>Martin Fowler  <ul>
<li>短路器模式  </li>
</ul>
</li>
</ul>
</li>
<li>更早由来  <ul>
<li>容错（Fault tolerance）  </li>
</ul>
</li>
<li>目的  <ul>
<li>系统整体性保护  </li>
</ul>
</li>
<li>近义词  <ul>
<li>熔断保护  </li>
<li>容错保护  </li>
<li>优雅降级  </li>
</ul>
</li>
<li>设计哲学  <ul>
<li>取舍之道  </li>
</ul>
</li>
<li>触发条件  <ul>
<li>错误类型  <ul>
<li>超时（Timeout）  </li>
<li>异常（Exception）  </li>
</ul>
</li>
<li>性能类型  <ul>
<li>响应时间（RT）  </li>
</ul>
</li>
</ul>
</li>
<li>处理手段  <ul>
<li>内容处理  <ul>
<li>空内容  </li>
<li>容错内容  </li>
</ul>
</li>
<li>异常处理  <ul>
<li>程序异常  </li>
<li>状态码  </li>
</ul>
</li>
</ul>
</li>
<li>实现方式  <ul>
<li>客户端  </li>
<li>服务端  </li>
</ul>
</li>
</ul>
<h3><span id="服务端">服务端</span></h3><ul>
<li>Spring Cloud Hystrix  <ul>
<li>依赖  <ul>
<li>spring-cloud-starter-hystrix  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableCircuitBreaker  </li>
</ul>
</li>
<li>命令  <ul>
<li>@HystrixCommand  <ul>
<li>应变方法  <ul>
<li>fallbackMethod  </li>
</ul>
</li>
<li>命令分组  <ul>
<li>groupKey  </li>
</ul>
</li>
<li>命令关联 Key  <ul>
<li>commandKey  </li>
</ul>
</li>
<li>线程池关联 Key  <ul>
<li>threadPoolKey  </li>
</ul>
</li>
<li>属性  <ul>
<li>HystrixProperty  </li>
<li>通用属性  <ul>
<li>commandProperties  </li>
</ul>
</li>
<li>线程池属性  <ul>
<li>threadPoolProperties  </li>
</ul>
</li>
</ul>
</li>
<li>忽略异常集合  <ul>
<li>ignoreExceptions  </li>
</ul>
</li>
<li>可观察执行模式  <ul>
<li>ObservableExecutionMode  </li>
</ul>
</li>
</ul>
</li>
<li>@HystrixCollapser  </li>
</ul>
</li>
<li>超时  </li>
<li>指标  <ul>
<li>健康指标（Health Indicator）  <ul>
<li>/health -&gt; hystrix  </li>
</ul>
</li>
<li>数据指标（Metrics）  <ul>
<li>/hystrix.stream  </li>
</ul>
</li>
</ul>
</li>
<li>生产特性（Production-Ready Features）  <ul>
<li>Turbine  <ul>
<li>使用场景  <ul>
<li>指标聚合  </li>
</ul>
</li>
<li>端口  <ul>
<li>/turbine.stream  </li>
</ul>
</li>
<li>配置  <ul>
<li>turbine.aggregator.clusterConfig  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableTurbine  </li>
</ul>
</li>
</ul>
</li>
<li>Turbine Stream  <ul>
<li>依赖  <ul>
<li>spring-cloud-netflix-hystrix-stream  </li>
<li>spring-cloud-starter-stream-*  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableTurbineStream  </li>
</ul>
</li>
</ul>
</li>
<li>Spring Cloud Hystrix Dashboard  <ul>
<li>依赖  <ul>
<li>spring-cloud-starter-hystrix-dashboard  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableHystrixDashboard  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>源码分析  <ul>
<li>Spring Cloud Hystrix  <ul>
<li>TODO  </li>
</ul>
</li>
<li>Netflix Hystrix  <ul>
<li>TODO  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="服务调用service-call">服务调用（Service Call）</span></h2><h3><span id="核心理念">核心理念</span></h3><ul>
<li>远程过程调用（RPC）  <ul>
<li>核心概念  <ul>
<li>接口定义语言（IDL）  </li>
<li>根存（Stubs）  </li>
</ul>
</li>
<li>通讯协议  <ul>
<li>二进制协议  <ul>
<li>CORBA  </li>
<li>RMI  <ul>
<li>EJB  </li>
</ul>
</li>
<li>Hession  </li>
<li>Thrift  </li>
</ul>
</li>
<li>本文协议  <ul>
<li>XML-RPC  </li>
<li>WebService  </li>
<li>REST  </li>
<li>AJAX  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="客户端">客户端</span></h3><ul>
<li>Feign  <ul>
<li>灵感来源  <ul>
<li>Retrofit  </li>
<li>JAX-RS  </li>
<li>WebSocket  </li>
</ul>
</li>
</ul>
</li>
<li>Spring Cloud Feign  <ul>
<li>依赖  <ul>
<li>spring-cloud-starter-feign  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableFeignClients  </li>
</ul>
</li>
<li>接口声明  <ul>
<li>@FeignClient  </li>
</ul>
</li>
<li>支持  <ul>
<li>Hystrix  <ul>
<li>配置  </li>
</ul>
</li>
<li>Ribbon  <ul>
<li>配置  </li>
</ul>
</li>
</ul>
</li>
<li>源码分析  <ul>
<li>上下文  <ul>
<li>FeignContext  </li>
</ul>
</li>
<li>注解参数处理器  <ul>
<li>AnnotatedParameterProcessor  <ul>
<li>请求头  <ul>
<li>RequestHeaderParameterProcessor  </li>
</ul>
</li>
<li>请求参数  <ul>
<li>RequestParamParameterProcessor  </li>
</ul>
</li>
<li>路径变量  <ul>
<li>PathVariableParameterProcessor  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Hystrix 支持  <ul>
<li>命令  <ul>
<li>FallbackCommand  </li>
</ul>
</li>
</ul>
</li>
<li>Ribbon 支持  <ul>
<li>负载均衡  <ul>
<li>负载均衡器  <ul>
<li>FeignLoadBalancer  </li>
</ul>
</li>
<li>工厂  <ul>
<li>CachingSpringLoadBalancerFactory  </li>
</ul>
</li>
<li>客户端  <ul>
<li>LoadBalancerFeignClient  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>加码器（Encoder）  <ul>
<li>字符类型  <ul>
<li>SpringEncoder  </li>
</ul>
</li>
</ul>
</li>
<li>解码器（Decoder）  <ul>
<li>字符类型  <ul>
<li>StringDecoder  </li>
</ul>
</li>
<li>Spring MVC ResponseEntity  <ul>
<li>ResponseEntityDecoder  </li>
</ul>
</li>
</ul>
</li>
<li>请求拦截器  <ul>
<li>RequestInterceptor  <ul>
<li>GZIP 处理  <ul>
<li>Accept-Encoding 请求头  <ul>
<li>FeignAcceptGzipEncodingInterceptor  </li>
</ul>
</li>
<li>Content-Encoding 请求头  <ul>
<li>FeignContentGzipEncodingInterceptor  </li>
</ul>
</li>
</ul>
</li>
<li>BASIC 认证  <ul>
<li>BasicAuthRequestInterceptor  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>通用装配  <ul>
<li>FeignClientsConfiguration  </li>
</ul>
</li>
<li>自动装配  <ul>
<li>默认  <ul>
<li>FeignAutoConfiguration  </li>
</ul>
</li>
<li>GZIP 处理  <ul>
<li>Accept-Encoding 请求头  <ul>
<li>FeignAcceptGzipEncodingAutoConfiguration  </li>
</ul>
</li>
<li>Content-Encoding 请求头  <ul>
<li>FeignContentGzipEncodingAutoConfiguration  </li>
</ul>
</li>
</ul>
</li>
<li>Ribbon  <ul>
<li>FeignRibbonClientAutoConfiguration  </li>
</ul>
</li>
</ul>
</li>
<li>注册  <ul>
<li>处理对象  <ul>
<li>FeignClientsRegistrar  </li>
</ul>
</li>
<li>注解  <ul>
<li>候选注解  <ul>
<li>@FeignClient  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableFeignClients  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="服务网关gateway">服务网关（Gateway）</span></h2><h3><span id="核心理念">核心理念</span></h3><ul>
<li>使用场景  <ul>
<li>Web 网关  <ul>
<li>REST API 网关  </li>
<li>WebService 网关  </li>
</ul>
</li>
</ul>
</li>
<li><p>服务能力  </p>
<ul>
<li>监控（Monitoring）  </li>
<li>测试（Testing）  <ul>
<li>压力测试（Stress Testing）  </li>
<li>A/B 测试（A/B Testing）  </li>
</ul>
</li>
<li><p>动态路由（Dynamic Routing）  </p>
<ul>
<li><p>路由规则  </p>
<ul>
<li>域名匹配  <ul>
<li><a href="http://user.acme.com" target="_blank" rel="noopener">http://user.acme.com</a>  </li>
</ul>
</li>
<li>IP匹配  <ul>
<li><a href="http://192.168.1.2" target="_blank" rel="noopener">http://192.168.1.2</a> -&gt; user  </li>
</ul>
</li>
<li><p>路径匹配  </p>
<ul>
<li><a href="http://www.acme.com/user" target="_blank" rel="noopener">http://www.acme.com/user</a><br>  链接: <a href="http://www.acme.com/user" target="_blank" rel="noopener">acme.com/user</a>  </li>
</ul>
</li>
<li><p>协议匹配  </p>
<ul>
<li><a href="ftp://www.acme.com" target="_blank" rel="noopener">ftp://www.acme.com</a><br>  链接: <a href="ftp://wwwacme.com" target="_blank" rel="noopener">wwwacme.com</a>  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>服务整合（Service Migration）  </p>
</li>
<li>负荷减配（Load Shedding）  </li>
<li>安全（Security）  <ul>
<li>认证（Authentication）  </li>
</ul>
</li>
<li>静态资源处理（Static Resources handling）  </li>
<li>活跃流量管理（Active traffic management）  </li>
</ul>
</li>
<li>依赖  <ul>
<li>服务来源  <ul>
<li>服务发现  </li>
<li>服务注册  </li>
</ul>
</li>
<li>服务通讯  <ul>
<li>协议  <ul>
<li>二进制  </li>
<li>本文协议  </li>
</ul>
</li>
<li>方式  <ul>
<li>同步（Sync）  </li>
<li>异步（Async）  </li>
</ul>
</li>
</ul>
</li>
<li>服务接口  <ul>
<li>弱约束  <ul>
<li>XML  </li>
<li>JSON  </li>
<li>HTML  </li>
</ul>
</li>
<li>强约束  <ul>
<li>接口定义语言（IDL）  </li>
<li>RMI  </li>
<li>Hession  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>架构  <ul>
<li>SOA  </li>
<li>微服务  </li>
<li>事件驱动架构  </li>
</ul>
</li>
<li>类型  <ul>
<li>服务  <ul>
<li>ESB  </li>
<li>EJB  </li>
</ul>
</li>
<li>Web  <ul>
<li>上游（Upstream）  <ul>
<li>Apache  </li>
<li>Nginx  </li>
<li>其他反向代理服务器  </li>
</ul>
</li>
<li>下游（Downstream）  <ul>
<li>Java Web Server  <ul>
<li>Java Servlet  </li>
<li>Tomcat Valve  </li>
</ul>
</li>
<li>PHP Web Server  </li>
<li>.NET Web Server  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="服务端">服务端</span></h3><ul>
<li>Spring Cloud Zuul  <ul>
<li>用途  <ul>
<li>监控（Monitoring）  </li>
<li>压力测试（Stress Testing）  </li>
<li>动态路由（Dynamic Routing）  </li>
<li>服务整合（Service Migration）  </li>
<li>负荷减配（Load Shedding）  </li>
<li>安全（Security）  <ul>
<li>认证（Authentication）  </li>
</ul>
</li>
<li>静态请求处理（Static Response handling）  </li>
<li>活跃流量管理（Active traffic management）  </li>
</ul>
</li>
<li>依赖  <ul>
<li>spring-cloud-starter-zuul  </li>
</ul>
</li>
<li>激活  <ul>
<li>@EnableZuulProxy  </li>
<li>合并注解  <ul>
<li>@EnableSidecar  <ul>
<li>spring-cloud-netflix-sidecar  </li>
</ul>
</li>
<li>@SpringCloudApplication  </li>
</ul>
</li>
</ul>
</li>
<li>整合  <ul>
<li>Eureka  </li>
<li>Hystrix  <ul>
<li>ZuulFallbackProvider  </li>
</ul>
</li>
</ul>
</li>
<li>生命周期  <ul>
<li>初始化  <ul>
<li>ServletInitializer  <ul>
<li>ZuulFilterInitializer  </li>
</ul>
</li>
</ul>
</li>
<li>处理  <ul>
<li>ZuulServlet  <ul>
<li>ZuulRunner  <ul>
<li>ZuulFilter  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>销毁  <ul>
<li>移除 ZuulFilter  <ul>
<li>清楚 FilterLoader 缓存  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>路由  <ul>
<li>规则  </li>
<li>配置  </li>
<li>过程  </li>
</ul>
</li>
<li>Metrics  <ul>
<li>Spectator  <ul>
<li>spring-cloud-starter-spectator  </li>
</ul>
</li>
<li>Servo  </li>
<li>Atlas  </li>
</ul>
</li>
<li>源码分析  <ul>
<li>通用  <ul>
<li>路由处理  <ul>
<li>代理运行器  <ul>
<li>ZuulRunner  </li>
</ul>
</li>
<li>实际执行器  <ul>
<li>ZuulFilter  <ul>
<li>执行顺序控制  <ul>
<li>filterOrder()  </li>
</ul>
</li>
<li>类型控制  <ul>
<li>filterType()  </li>
<li>设计权限  <ul>
<li>字符类型描述类型  </li>
</ul>
</li>
</ul>
</li>
<li>是否应该执行  <ul>
<li>shouldFilter()  </li>
</ul>
</li>
<li>执行  <ul>
<li>run()  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>类型  <ul>
<li>路由预处理  <ul>
<li>pre  </li>
</ul>
</li>
<li>路由  <ul>
<li>route  </li>
</ul>
</li>
<li>路由后处理  <ul>
<li>post  </li>
</ul>
</li>
<li>错误  <ul>
<li>error  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Zuul  <ul>
<li>ZuulFilter 加载器  <ul>
<li>FilterLoader  <ul>
<li>加载ZuulFilter Java/Groovy 源文件  </li>
</ul>
</li>
</ul>
</li>
<li>ZuulFilter 仓储  <ul>
<li>FilterRegistry  </li>
</ul>
</li>
</ul>
</li>
<li>Spring Cloud Zuul  <ul>
<li>路由处理  <ul>
<li>前端总控制器  <ul>
<li>Servlet  <ul>
<li>ZuulServlet  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>装配  <ul>
<li>手动（@EnableZuulProxy）  <ul>
<li>配置 Bean（@Configuration）  <ul>
<li>ZuulConfiguration  </li>
</ul>
</li>
<li>配置属性 Bean（@ConfigurationProperties）  <ul>
<li>ZuulProperties  </li>
</ul>
</li>
<li>路由定位器  <ul>
<li>RouteLocator  </li>
</ul>
</li>
<li>前端总控制器  <ul>
<li>ZuulServlet  </li>
</ul>
</li>
<li>ZuulFilter 内置实现 Bean  <ul>
<li>DispatcherServlet 探测  <ul>
<li>ServletDetectionFilter  </li>
</ul>
</li>
<li>Form 表单数据  <ul>
<li>FormBodyWrapperFilter  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>设计模式  <ul>
<li>J2EE 设计模式  <ul>
<li>前端控制器模式  </li>
</ul>
</li>
<li>GoF 23  <ul>
<li>责任链模式  </li>
<li>代理模式  </li>
<li>策略模式  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span id="消息驱动整合message-driven-integration">消息驱动整合（Message-Driven Integration）</span></h2><h3><span id="核心理念">核心理念</span></h3><h2><span id="消息总线message-bus">消息总线（Message Bus）</span></h2><h3><span id="核心理念">核心理念</span></h3><h2><span id="分布式跟踪distributed-tracing">分布式跟踪（Distributed Tracing）</span></h2><h3><span id="核心理念">核心理念</span></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;预备（Preparation））&quot;&gt;&lt;a href=&quot;#预备（Preparation））&quot; class=&quot;headerlink&quot; title=&quot;预备（Preparation））&quot;&gt;&lt;/a&gt;预备（Preparation））&lt;/h2&gt;&lt;h3 id=&quot;技术体系&quot;&gt;&lt;a href=&quot;#技术体系&quot; class=&quot;headerlink&quot; title=&quot;技术体系&quot;&gt;&lt;/a&gt;技术体系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;架构  &lt;ul&gt;
&lt;li&gt;面向服务架构（SOA）  &lt;/li&gt;
&lt;li&gt;微服务（MSA）  &lt;ul&gt;
&lt;li&gt;测试驱动开发（TDD)  &lt;/li&gt;
&lt;li&gt;领域驱动设计（DDD）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件驱动架构（EDA）  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术  &lt;ul&gt;
&lt;li&gt;Java 8 基础  &lt;/li&gt;
&lt;li&gt;Spring Framework 4.x  &lt;/li&gt;
&lt;li&gt;Spring Boot 1.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;环境依赖&quot;&gt;&lt;a href=&quot;#环境依赖&quot; class=&quot;headerlink&quot; title=&quot;环境依赖&quot;&gt;&lt;/a&gt;环境依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring Cloud  &lt;ul&gt;
&lt;li&gt;Dalston.SR3  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Boot  &lt;ul&gt;
&lt;li&gt;1.5.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Framework  &lt;ul&gt;
&lt;li&gt;4.3.x  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maven  &lt;ul&gt;
&lt;li&gt;3.5.0  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java  &lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;= 8  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Springboot" scheme="http://www.forwardlee.com/tags/Springboot/"/>
    
      <category term="Springcloud" scheme="http://www.forwardlee.com/tags/Springcloud/"/>
    
      <category term="微服务" scheme="http://www.forwardlee.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装Docker-CE</title>
    <link href="http://www.forwardlee.com/2018/06/27/CentOS7%E5%AE%89%E8%A3%85Docker-CE/"/>
    <id>http://www.forwardlee.com/2018/06/27/CentOS7安装Docker-CE/</id>
    <published>2018-06-27T08:26:53.000Z</published>
    <updated>2018-06-27T09:00:19.337Z</updated>
    
    <content type="html"><![CDATA[<p>转【<a href="https://jkzhao.github.io/2017/08/28/CentOS%E5%AE%89%E8%A3%85Docker-CE/" target="_blank" rel="noopener">CentOS安装Docker CE</a>】</p>
<h1><span id="环境要求">环境要求</span></h1><p>To install Docker CE, you need the 64-bit version of CentOS 7.<br>The centos-extras repository must be enabled. This repository is enabled by default, but if you have disabled it, you need to re-enable it.</p>
<h1><span id="卸载安装的所有docker组件">卸载安装的所有Docker组件</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 lib]# systemctl stop docker.service</span><br><span class="line">[root@spark32 lib]# yum remove docker docker-common docker-selinux docker-engine container-selinux</span><br><span class="line">[root@spark32 lib]# rm -rf docker/</span><br></pre></td></tr></table></figure>
<h1><span id="通过仓库安装docker-ce">通过仓库安装Docker CE</span></h1><p>1.安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<p>2.下载docker yum源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>3.更新软件缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# yum makecache fast</span><br></pre></td></tr></table></figure>
<p>4.安装Docker CE</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# yum install docker-ce -y</span><br></pre></td></tr></table></figure>
<p>5.启动docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# systemctl start docker.service</span><br></pre></td></tr></table></figure>
<p>6.查看docker版本信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 17.06.1-ce</span><br><span class="line">Storage Driver: overlay</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br></pre></td></tr></table></figure>
<p><strong>【注意】:在生产环境中，可能需要使用某一个特定版本的Docker，而不是使用最新的版本，我们可以先列出版本，然后安装指定版本：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# yum list docker-ce.x86_64  --showduplicates | sort -r</span><br><span class="line">[root@spark32 ~]# yum install docker-ce-&lt;VERSION&gt;</span><br></pre></td></tr></table></figure>
<h1><span id="配置镜像加速">配置镜像加速</span></h1><p>国内访问 Docker Hub 有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了加速器服务，例如：</p>
<ul>
<li>阿里云加速器</li>
<li>DaoCloud 加速器</li>
<li>灵雀云加速器</li>
</ul>
<p>以阿里云加速器为例<br>1.首先进入阿里云docker库首页<br>注册用户并登录，点击右上角“管理中心”。如果第一次，会提示“您还没有开通服务”，点击“确定”，然后会出现弹窗“初始化设置”，设置docker登录时使用的密码。</p>
<p>2.点击左侧菜单“Docker Hub镜像站点”，可以看到“您的专属加速器地址：<a href="https://6101v8g5.mirror.aliyuncs.com”，我们需要将其配置到Docker" target="_blank" rel="noopener">https://6101v8g5.mirror.aliyuncs.com”，我们需要将其配置到Docker</a> 引擎。</p>
<p>3.修改daemon配置文件/etc/docker/daemon.json来使用加速器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://6101v8g5.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[root@spark32 ~]# systemctl daemon-reload</span><br><span class="line">[root@spark32 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>也可以配置docker中国的镜像源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="卸载docker-ce">卸载Docker CE</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@spark32 ~]# yum remove docker-ce</span><br><span class="line">[root@spark32 ~]# rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转【&lt;a href=&quot;https://jkzhao.github.io/2017/08/28/CentOS%E5%AE%89%E8%A3%85Docker-CE/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CentOS安装Docker CE&lt;/a&gt;】&lt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.forwardlee.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Nginx双层架构和数据缓存服务层组成的数据三级缓存策略</title>
    <link href="http://www.forwardlee.com/2018/06/20/Nginx%E8%AF%B7%E6%B1%82%E5%88%86%E5%8F%91%E5%B1%82%E5%92%8C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8F%8C%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%B1%82%E6%95%B0%E6%8D%AE%E9%9D%99%E6%80%81%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://www.forwardlee.com/2018/06/20/Nginx请求分发层和应用层双层架构模式下的应用层数据静态化策略/</id>
    <published>2018-06-20T01:01:28.000Z</published>
    <updated>2018-06-20T15:15:54.289Z</updated>
    
    <content type="html"><![CDATA[<p>接续《<a href="http://www.forwardlee.com/2018/06/19/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-LUA%E5%8F%8C%E5%B1%82Ngnix%E6%9E%B6%E6%9E%84/">基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略</a>》</p>
<h1><span id="应用架构设计">应用架构设计</span></h1><p>Nginx请求分发层+Nginx应用层（nginx cache）+业务数据两级缓存服务接口（ehcache+redis）<br><img src="/2018/06/20/Nginx请求分发层和应用层双层架构模式下的应用层数据静态化策略/1.png" alt="架构设计"></p>
<a id="more"></a>
<h1><span id="step1应用服务器nginx安装resty静态化模板">Step1:应用服务器Nginx安装resty静态化模板</span></h1><p>应用服务器要从缓存数据中获取数据并渲染到静态化模板中，所以在应用层Nginx安装模板包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/lualib/resty/</span><br><span class="line">wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template.lua</span><br><span class="line">mkdir /usr/hello/lualib/resty/html</span><br><span class="line">cd /usr/hello/lualib/resty/html</span><br><span class="line">wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template/html.lua</span><br></pre></td></tr></table></figure>
<h1><span id="step2模板配置">Step2：模板配置</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/</span><br><span class="line">mkdir templates</span><br><span class="line"></span><br><span class="line">vi hello.conf</span><br><span class="line">##在server配置中增加以下两行配置</span><br><span class="line">set $template_location &quot;/templates&quot;;  </span><br><span class="line">set $template_root &quot;/usr/hello/templates&quot;;</span><br><span class="line"></span><br><span class="line">cd /usr/hello/templates</span><br><span class="line"></span><br><span class="line">vi ecourse.html</span><br><span class="line"></span><br><span class="line">##放入以下内容</span><br><span class="line">ecourse id: &#123;* ecourseId *&#125;&lt;/br&gt;   </span><br><span class="line">ecourse name: &#123;* ecourseName *&#125;&lt;/br&gt;</span><br><span class="line">ecourse price: &#123;* ecoursePrice *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author name: &#123;* authorName *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author type: &#123;* authorType *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author addr: &#123;* authorAddr *&#125;&lt;/br&gt; </span><br><span class="line">ecourse author sex: &#123;* authorSex *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author level: &#123;* authorLevel *&#125;&lt;/br&gt;</span><br></pre></td></tr></table></figure>
<p>配置Nginx本地缓存的大小。Nginx会在缓存数据达到设置的大小后，进行LRU算法清理掉无效数据。还可以设置缓存数据过期时间，到期或者达到缓存设置的大小都会进行LRU清理缓存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/servers/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">##在http中增加以下配置，eccache是自定义的cache name</span><br><span class="line">lua_shared_dict eccache 128m;</span><br></pre></td></tr></table></figure>
<h1><span id="step3应用层nginx数据静态化过程lua脚本">Step3:应用层Nginx数据静态化过程LUA脚本</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/</span><br><span class="line">vi hello.conf</span><br><span class="line">##增加一个新的location配置</span><br><span class="line"></span><br><span class="line"> location /ecourse/info &#123;</span><br><span class="line">        default_type &apos;text/html&apos;;</span><br><span class="line">        content_by_lua_file /usr/local/common/lua_scripts/hello/lua/ecourse.lua;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>录入ecourse.lua脚本内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">local uri_args = ngx.req.get_uri_args()</span><br><span class="line">local ecourseId = uri_args[&quot;ecourseId&quot;]</span><br><span class="line">### eccache就是在hello.conf中定义的cache name</span><br><span class="line">local cache_ngx = ngx.shared.eccache</span><br><span class="line"></span><br><span class="line">local ecourseCacheKey = &quot;ecourse_info_&quot;..ecourseId</span><br><span class="line"></span><br><span class="line">local ecourseCache = cache_ngx:get(ecourseCacheKey)</span><br><span class="line"></span><br><span class="line">if ecourseCache == &quot;&quot; or ecourseCache == nil then</span><br><span class="line">	local http = require(&quot;resty.http&quot;)</span><br><span class="line">	local httpc = http.new()</span><br><span class="line"></span><br><span class="line">	local resp, err = httpc:request_uri(&quot;http://192.168.1.103:8080&quot;,&#123;</span><br><span class="line">  		method = &quot;GET&quot;,</span><br><span class="line">  		path = &quot;/getEcourseInfo?ecourseId=&quot;..ecourseId</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">     ecourseCache = resp.body</span><br><span class="line">	cache_ngx:set(ecourseCacheKey, ecourseCache, 10 * 60)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local cjson = require(&quot;cjson&quot;)</span><br><span class="line">local ecourseCacheJSON = cjson.decode(ecourseCache)</span><br><span class="line"></span><br><span class="line">local context = &#123;</span><br><span class="line">	ecourseId = ecourseCacheJSON.ecourseId,</span><br><span class="line">	ecourseName = ecourseCacheJSON.ecourseName,</span><br><span class="line">	ecoursePrice = ecourseCacheJSON.ecoursePrice,</span><br><span class="line">	authorName = ecourseCacheJSON.authorName,</span><br><span class="line">	authorType = ecourseCacheJSON.authorType,</span><br><span class="line">	authorAddr = ecourseCacheJSON.authorAddr,</span><br><span class="line">	authorSex = ecourseCacheJSON.authorSex,</span><br><span class="line">	authorLevel = ecourseCacheJSON.authorLevel,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">local template = require(&quot;resty.template&quot;)</span><br><span class="line">template.render(&quot;ecourse.html&quot;, context)</span><br></pre></td></tr></table></figure>
<p><strong>cache_ngx:set(ecourseCacheKey, ecourseCache, 10 * 60)设置了课程信息在nginx缓存中保留的时间为600s也就是10分钟。也就是说Nginx缓存保存的数据对时效性要求不能太高，对数据实时性要求很高的数据需要使用高并发请求转化成串型队列请求执行的逻辑，更新数据生产服务端的Redis缓存的方式实现，直接从Redis中读取数据，更好的实现数据状态的实时性</strong></p>
<h1><span id="step4nginx配置重新加载">Step4:Nginx配置重新加载</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<h1><span id="step5数据缓存层实现查询数据">Step5:数据缓存层实现查询数据</span></h1><p>因为ehcache是与数据缓存服务web实例绑定，多个数据缓存服务实例之间不能共享，所以查询接口要先从分布式缓存redis中获取数据，如果redis中数据为空，再从数据缓存服务实例的本地缓存ehcache中获取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/getEcourseInfo&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public JSONObject getEcourseInfo(Integer ecourseId)&#123;</span><br><span class="line">       ECourseInfo eCoureseInfo = ecCacheService.getECoureseInfoFromRedis(ecourseId);</span><br><span class="line">       log.info(&quot;=======从redis中查询课程信息=========&quot;);</span><br><span class="line">       if (eCoureseInfo == null) &#123;</span><br><span class="line">           log.info(&quot;=======从ehcache中查询课程信息=========&quot;);</span><br><span class="line">           eCoureseInfo = ecCacheService.getECoureseInfoFromEhcache(ecourseId);</span><br><span class="line">       &#125;</span><br><span class="line">       //如果从两级缓存中还是查不到，应该去数据生产服务中查询，注意并发查询更新缓存的冲突问题。</span><br><span class="line">       if (eCoureseInfo == null) &#123;</span><br><span class="line">           //some code</span><br><span class="line">       &#125;</span><br><span class="line">       Integer authorId = eCoureseInfo.getAuthorId();</span><br><span class="line">       ECourseAuthorInfo eCourseAuthorInfo = ecCacheService.getECourseAuthorInfoFromRedis(authorId);</span><br><span class="line">       log.info(&quot;=======从redis中查询作者信息=========&quot;);</span><br><span class="line">       if (eCourseAuthorInfo == null) &#123;</span><br><span class="line">           log.info(&quot;=======从ehcache中查询作者信息=========&quot;);</span><br><span class="line">           eCourseAuthorInfo = ecCacheService.getECourseAuthorInfoFromEhcache(authorId);</span><br><span class="line">       &#125;</span><br><span class="line">       //如果从两级缓存中还是查不到，应该去数据生产服务中查询，注意并发查询更新缓存的冲突问题。</span><br><span class="line">       if (eCourseAuthorInfo == null) &#123;</span><br><span class="line">           //some code</span><br><span class="line">       &#125;</span><br><span class="line">       JSONObject ecourseInfoJson = new JSONObject();</span><br><span class="line">       ecourseInfoJson.put(&quot;ecourseId&quot;,eCoureseInfo.getPkid());</span><br><span class="line">       ecourseInfoJson.put(&quot;ecourseName&quot;,eCoureseInfo.getName());</span><br><span class="line">       ecourseInfoJson.put(&quot;ecoursePrice&quot;,eCoureseInfo.getPrice());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorName&quot;,eCourseAuthorInfo.getName());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorType&quot;,eCourseAuthorInfo.getType());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorAddr&quot;,eCourseAuthorInfo.getAddr());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorSex&quot;,eCourseAuthorInfo.getSex());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorLevel&quot;,eCourseAuthorInfo.getLevel());</span><br><span class="line"></span><br><span class="line">       return ecourseInfoJson;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1><span id="step6测试">Step6:测试</span></h1><p>use case1：<br>启动数据缓存层web服务192.168.1.103:8080,然后在浏览器中请求分发层Nginx代理服务<a href="http://192.168.1.212/course/info?ecourseId=1,分别查看Nginx分发层和应用层请求的路由过程。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1,分别查看Nginx分发层和应用层请求的路由过程。</a><br>查看数据缓存服务后台日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:08:07.081  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从ehcache中查询课程信息=========</span><br><span class="line">2018-06-20 12:08:07.081  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从redis中查询课程信息=========</span><br><span class="line">2018-06-20 12:08:07.167  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从ehcache中查询作者信息=========</span><br><span class="line">2018-06-20 12:08:07.167  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从redis中查询作者信息=========</span><br></pre></td></tr></table></figure>
<p>浏览器显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case2：<br>数据缓存服务的本地缓存ehcache，在未达到maxElementsInMemory限制时，不会执行LRU数据清理。与此同时，应用层Nginx cache设置的数据过期时间为10分钟（为了测试方便可以缩短这个过期时间），在Nginx cache未过期时，在浏览器中再次请求Nginx分发层代理服务<a href="http://192.168.1.212/course/info?ecourseId=1，此时查看数据缓存服务端后台日志。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，此时查看数据缓存服务端后台日志。</a><br><strong>没有日志输出</strong></p>
<p>浏览器显示（乱码问题忽略）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case3：<br>等待应用层Nginx cache过期后，再次请求分发层Nginx代理服务<a href="http://192.168.1.212/course/info?ecourseId=1，此时再查看数据缓存服务后台日志，此时数据缓存服务只需要从本地缓存ehcache中读取数据。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，此时再查看数据缓存服务后台日志，此时数据缓存服务只需要从本地缓存ehcache中读取数据。</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:08:37.505  INFO 3963 --- [nio-8080-exec-2] c.k.eccache.controller.CacheController   : =======从ehcache中查询课程信息=========</span><br><span class="line">2018-06-20 12:08:37.505  INFO 3963 --- [nio-8080-exec-2] c.k.eccache.controller.CacheController   : =======从ehcache中查询作者信息=========</span><br></pre></td></tr></table></figure>
<p>浏览器显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case4：<br>给数据缓存服务从发送消息，更改课程价格：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool.Singleton.getInstance().submit(new KafkaProducer(&quot;kafkaConsume&quot;,&quot;abc&quot;,&quot;&#123;serviceId:&apos;ecourseInfoServiceUpdate&apos;,price:19.99&#125;&quot;));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;=======保存课程信息ehcache缓存数据：【&quot;+ JSONObject.toJSONString(eCourseInfo)+&quot;】=========&quot;); </span><br><span class="line">ecCacheService.saveECourseInfo2Ehcache(eCourseInfo);</span><br><span class="line">log.info(&quot;=======保存课程信息redis缓存数据：【&quot;+ JSONObject.toJSONString(eCourseInfo)+&quot;】=========&quot;);</span><br><span class="line">ecCacheService.saveECourseInfo2Redis(eCourseInfo);</span><br></pre></td></tr></table></figure>
<p>数据缓存服务后台日志输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:41:47.032  INFO 4010 --- [pool-1-thread-2] c.k.eccache.kafka.KafkaMessageProcessor  : =======收到消息[&#123;serviceId:&apos;ecourseInfoServiceUpdate&apos;,price:19.99&#125;]========</span><br><span class="line">2018-06-20 12:41:47.160  INFO 4010 --- [pool-1-thread-2] c.k.eccache.kafka.KafkaMessageProcessor  : =======保存课程信息ehcache缓存数据：【&#123;&quot;authorId&quot;:1,&quot;name&quot;:&quot;初二物理&quot;,&quot;pkid&quot;:1,&quot;price&quot;:19.99&#125;】=========</span><br><span class="line">2018-06-20 12:41:47.201  INFO 4010 --- [pool-1-thread-2] c.k.eccache.kafka.KafkaMessageProcessor  : =======保存课程信息redis缓存数据：【&#123;&quot;authorId&quot;:1,&quot;name&quot;:&quot;初二物理&quot;,&quot;pkid&quot;:1,&quot;price&quot;:19.99&#125;】=========</span><br></pre></td></tr></table></figure>
<p>此时再此请求分发层Nginx代理服务<a href="http://192.168.1.212/course/info?ecourseId=1，查看数据缓存层后台日志：" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，查看数据缓存层后台日志：</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:44:56.516  INFO 4010 --- [nio-8080-exec-3] c.k.eccache.controller.CacheController   : =======从ehcache中查询课程信息=========</span><br><span class="line">2018-06-20 12:44:56.516  INFO 4010 --- [nio-8080-exec-3] c.k.eccache.controller.CacheController   : =======从ehcache中查询作者信息=========</span><br></pre></td></tr></table></figure>
<p>此时如果应用层Nginx cache未过期，浏览器仍然显示课程价格29.99。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>如果应用层Nginx cache已经过期，浏览器显示课程价格为19.99。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 19.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case5：<br>浏览显示查询到的数据后，如果在Nginx cache过期时间内，停掉数据缓存服务，那么在浏览器刷新请求<a href="http://192.168.1.212/course/info?ecourseId=1，应用层Nginx从本地缓存中查询到数据，就不会再请求数据缓存服务，即使停掉数据缓存服务，浏览器也能够正常显示数据。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，应用层Nginx从本地缓存中查询到数据，就不会再请求数据缓存服务，即使停掉数据缓存服务，浏览器也能够正常显示数据。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接续《&lt;a href=&quot;http://www.forwardlee.com/2018/06/19/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-LUA%E5%8F%8C%E5%B1%82Ngnix%E6%9E%B6%E6%9E%84/&quot;&gt;基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略&lt;/a&gt;》&lt;/p&gt;
&lt;h1 id=&quot;应用架构设计&quot;&gt;&lt;a href=&quot;#应用架构设计&quot; class=&quot;headerlink&quot; title=&quot;应用架构设计&quot;&gt;&lt;/a&gt;应用架构设计&lt;/h1&gt;&lt;p&gt;Nginx请求分发层+Nginx应用层（nginx cache）+业务数据两级缓存服务接口（ehcache+redis）&lt;br&gt;&lt;img src=&quot;/2018/06/20/Nginx请求分发层和应用层双层架构模式下的应用层数据静态化策略/1.png&quot; alt=&quot;架构设计&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略</title>
    <link href="http://www.forwardlee.com/2018/06/19/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-LUA%E5%8F%8C%E5%B1%82Ngnix%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.forwardlee.com/2018/06/19/安装配置Nginx-LUA双层Ngnix架构/</id>
    <published>2018-06-19T09:20:51.000Z</published>
    <updated>2018-06-20T01:04:27.919Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="环境准备">环境准备</span></h1><p>台CentOS6.x<br>192.168.1.210<br>192.168.1.211<br>192.168.1.212<br>网络拓扑<br>210和211作为应用层web服务器<br>212作为网络请求分发代理服务器</p>
<h1><span id="step1安装linux依赖">Step1:安装Linux依赖</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y readline-devel pcre-devel openssl-devel gcc</span><br></pre></td></tr></table></figure>
<h1><span id="step2安装nginx-openresty">Step2:安装Nginx Openresty</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wget http://openresty.org/download/ngx_openresty-1.7.7.2.tar.gz  </span><br><span class="line">tar -xzvf ngx_openresty-1.7.7.2.tar.gz  </span><br><span class="line">cd /usr/servers/ngx_openresty-1.7.7.2/</span><br><span class="line"></span><br><span class="line">cd bundle/LuaJIT-2.1-20150120/  </span><br><span class="line">make clean &amp;&amp; make &amp;&amp; make install  </span><br><span class="line">ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit</span><br><span class="line"></span><br><span class="line">cd bundle  </span><br><span class="line">wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  </span><br><span class="line">tar -xvf 2.3.tar.gz  </span><br><span class="line"></span><br><span class="line">cd bundle  </span><br><span class="line">wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz  </span><br><span class="line">tar -xvf v0.3.0.tar.gz  </span><br><span class="line"></span><br><span class="line">cd /usr/servers/ngx_openresty-1.7.7.2  </span><br><span class="line">./configure --prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="step3检查安装并启动">Step3:检查安装并启动</span></h1><p>安装完成后有以下目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/servers/  </span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">/usr/servers/luajit</span><br><span class="line">/usr/servers/lualib</span><br><span class="line">/usr/servers/nginx</span><br></pre></td></tr></table></figure>
<p>检查nginx版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>
<p>启动nginx:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
<h1><span id="step4nginx添加lua配置">Step4:Nginx添加LUA配置</span></h1><p>使LUA配置按照工程化目录结构进行配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/hello</span><br><span class="line"></span><br><span class="line">cp -r /usr/servers/lualib /usr/hello/</span><br></pre></td></tr></table></figure>
<p>打开nginx.conf配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/servers/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>在http部分添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lua_package_path &quot;/usr/hello/lualib/?.lua;;&quot;;  </span><br><span class="line">lua_package_cpath &quot;/usr/hello/lualib/?.so;;&quot;;  </span><br><span class="line">include /usr/hello/hello.conf;</span><br></pre></td></tr></table></figure>
<p>创建hello的lua配置和脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/hello/hello.conf</span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">    listen       80;  </span><br><span class="line">    server_name  _;  </span><br><span class="line">  </span><br><span class="line">    location /hello/test &#123;  </span><br><span class="line">        default_type &apos;text/html&apos;;   </span><br><span class="line">        content_by_lua_file /usr/hello/lua/test.lua;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编辑lua脚本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/hello/lua</span><br><span class="line"></span><br><span class="line">vi /usr/hello/lua/test.lua</span><br><span class="line"></span><br><span class="line">ngx.say(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure>
<p>Nginx检查配置是否正确</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 hello]# /usr/servers/nginx/sbin/nginx -t  </span><br><span class="line">nginx: the configuration file /usr/servers/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/servers/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<p>Nginx重新加载配置生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<h1><span id="step5访问lua配置的location路径">Step5:访问LUA配置的location路径</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.1.210/hello/test</span><br></pre></td></tr></table></figure>
<p>返回test.lua中脚本输出的“hello world”。</p>
<h1><span id="step6分发层nginx安装lua脚本实现请求分发">Step6:分发层Nginx安装LUA脚本实现请求分发</span></h1><p>我们作为一个流量分发的nginx，会发送http请求到后端的应用nginx上面去，所以要先引入lua http lib包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/lualib/resty/  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</span><br></pre></td></tr></table></figure>
<p>在分发层Nginx写LUA脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">nano /usr/hello/lua/test.lua</span><br><span class="line"></span><br><span class="line">local uri_args = ngx.req.get_uri_args()</span><br><span class="line">local ecourseId = uri_args[&quot;ecourseId&quot;]</span><br><span class="line"></span><br><span class="line">local host = &#123;&quot;192.168.1.210&quot;, &quot;192.168.1.211&quot;&#125;</span><br><span class="line">local hash = ngx.crc32_long(ecourseId)</span><br><span class="line">hash = (hash % 2) + 1</span><br><span class="line">backend = &quot;http://&quot;..host[hash]</span><br><span class="line"></span><br><span class="line">local paras = &quot;&quot;;</span><br><span class="line">local request_args_tab = ngx.req.get_uri_args()</span><br><span class="line">for k, v in pairs(request_args_tab) do</span><br><span class="line">    paras=paras..k..&quot;=&quot;..v..&quot;&amp;&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local requestPath = ngx.var.uri</span><br><span class="line">requestPath = requestPath..&quot;?&quot;..paras</span><br><span class="line"></span><br><span class="line">local http = require(&quot;resty.http&quot;)</span><br><span class="line">local httpc = http.new()</span><br><span class="line"></span><br><span class="line">local resp, err = httpc:request_uri(backend, &#123;</span><br><span class="line">    method = &quot;GET&quot;,</span><br><span class="line">    path = requestPath</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">if not resp then</span><br><span class="line">    ngx.say(&quot;request error :&quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(resp.body)</span><br><span class="line"></span><br><span class="line">httpc:close()</span><br></pre></td></tr></table></figure>
<p>Nginx重新加载配置生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>测试请求分发,在浏览器地址栏输入</p>
<p><a href="http://192.168.1.212/hello/test?ecourseId=1" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=1</a><br><a href="http://192.168.1.212/hello/test?ecourseId=2" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=2</a><br><a href="http://192.168.1.212/hello/test?ecourseId=3" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=3</a><br><a href="http://192.168.1.212/hello/test?ecourseId=4" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=4</a><br>查看返回的结果，请求被分发到应用层web服务器节点了。根据ecourseId与应用层web服务节点数取模，找到对应的应用层服务器节点。</p>
<h1><span id="step7按照相同的方法部署另外两台机器的nginx">Step7:按照相同的方法部署另外两台机器的Nginx</span></h1><p>安装过程，略…<br>应用层Nginx添加http请求功能包即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/lualib/resty/  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</span><br></pre></td></tr></table></figure>
<h1><span id="补充lua脚本获取nginx-http请求的相关参数说明">补充：LUA脚本获取Nginx Http请求的相关参数说明</span></h1><p>1.获取当前请求的url相关信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">-- 这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI。</span><br><span class="line">local request_uri = ngx.var.request_uri</span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url==&quot;) .. tools.u8_to_gbk(cjson.encode(request_uri)) )</span><br><span class="line"></span><br><span class="line"> -- HTTP方法（如http，https）。按需使用，例：</span><br><span class="line"> local scheme = ngx.var.scheme server_addr</span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url scheme==&quot;) .. tools.u8_to_gbk(cjson.encode(scheme)) )</span><br><span class="line"></span><br><span class="line"> -- 服务器地址，在完成一次系统调用后可以确定这个值，如果要绕开系统调用，则必须在listen中指定地址并且使用bind参数。</span><br><span class="line"> local server_addr = ngx.var.server_addruri </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url server_addr==&quot;) .. tools.u8_to_gbk(cjson.encode(server_addr)) )</span><br><span class="line"></span><br><span class="line">-- 请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改。</span><br><span class="line"> local uri = ngx.var.uri </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url uri==&quot;) .. tools.u8_to_gbk(cjson.encode(uri)) )</span><br><span class="line"></span><br><span class="line"> -- 服务器名称</span><br><span class="line"> local server_name  = ngx.var.server_name  </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url server_name ==&quot;) .. tools.u8_to_gbk(cjson.encode(server_name )) </span><br><span class="line"></span><br><span class="line"> -- 请求到达服务器的端口号。</span><br><span class="line">local server_port  = ngx.var.server_name  </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url server_port ==&quot;) .. tools.u8_to_gbk(cjson.encode(server_port )) </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<p>2.获取发送请求端过来的url相关信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 获取远程的IP地址。</span><br><span class="line">local remote_addr  = ngx.var.remote_addr </span><br><span class="line"> log(m_uuid,tools.gbk_to_u8(&quot;获取发送请求过来的远程请求remote_addr ==&quot;) .. tools.u8_to_gbk(cjson.encode(remote_addr )) )</span><br><span class="line"></span><br><span class="line"> -- 获取远程的端口号</span><br><span class="line"> local remote_port  = ngx.var.remote_port  </span><br><span class="line"> log(m_uuid,tools.gbk_to_u8(&quot;获取发送请求过来的远程请求remote_port ==&quot;) .. tools.u8_to_gbk(cjson.encode(remote_port )) )</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;台CentOS6.x&lt;br&gt;192.168.1.210&lt;br&gt;192.168.1.211&lt;br&gt;192.168.1.212&lt;br&gt;网络拓扑&lt;br&gt;210和211作为应用层web服务器&lt;br&gt;212作为网络请求分发代理服务器&lt;/p&gt;
&lt;h1 id=&quot;Step1-安装Linux依赖&quot;&gt;&lt;a href=&quot;#Step1-安装Linux依赖&quot; class=&quot;headerlink&quot; title=&quot;Step1:安装Linux依赖&quot;&gt;&lt;/a&gt;Step1:安装Linux依赖&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y readline-devel pcre-devel openssl-devel gcc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Step2-安装Nginx-Openresty&quot;&gt;&lt;a href=&quot;#Step2-安装Nginx-Openresty&quot; class=&quot;headerlink&quot; title=&quot;Step2:安装Nginx Openresty&quot;&gt;&lt;/a&gt;Step2:安装Nginx Openresty&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://openresty.org/download/ngx_openresty-1.7.7.2.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf ngx_openresty-1.7.7.2.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/servers/ngx_openresty-1.7.7.2/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bundle/LuaJIT-2.1-20150120/  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make clean &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bundle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf 2.3.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bundle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf v0.3.0.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/servers/ngx_openresty-1.7.7.2  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure --prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://www.forwardlee.com/tags/Nginx/"/>
    
      <category term="LUA" scheme="http://www.forwardlee.com/tags/LUA/"/>
    
  </entry>
  
  <entry>
    <title>Redis LRU算法详情</title>
    <link href="http://www.forwardlee.com/2018/06/14/Redis-LRU%E7%AE%97%E6%B3%95%E8%AF%A6%E6%83%85/"/>
    <id>http://www.forwardlee.com/2018/06/14/Redis-LRU算法详情/</id>
    <published>2018-06-14T02:14:56.000Z</published>
    <updated>2018-06-14T03:25:26.116Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="什么是lru算法">什么是LRU算法</span></h1><p>LRU-Leaste Recently Use，最近使用最少。算法原理略。</p>
<h1><span id="redis-lru算法">Redis LRU算法</span></h1><p>redis在存储数据时达到最大内存设置maxmemory后，自身会清理数据，以减少内存使用量，保证Reids服务的正常状态。<br>Redis 内存使用策略maxmemory-policy可配置项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">noeviction 如果内存使用达到了maxmemory，client继续写入数据，那么Redis就直接报错给客户端</span><br><span class="line">allkeys-lru 移除掉最近最少使用的那些key对应的数据</span><br><span class="line">volatile-lru 仅对设置了过期时间的key进行LRU清理</span><br><span class="line">allkeys-random 随机删除一些key的数据</span><br><span class="line">volatile-random 随机删除一些设置了过期时间的key对应的数据</span><br><span class="line">volatile-ttl 删除哪些过期时间比较短的key对应的数据</span><br></pre></td></tr></table></figure>
<p>配置项多个，但实际应用场景中大多使用allkeys-lru策略</p>
<h1><span id="maxmemory-sample配置">maxmemory-sample配置</span></h1><p>Redis在进行LRU算法清理数据时，需要对多个key进行采样，选出采样key中最近使用最少的key进行数据清理，maxmemory-sample选项就是用来配置采样大小的。Redis给出了3\5\10三个可配置的值，配置为3执行LRU速度更快，但是精确率不高，5是一个速度和精确率适中的配置，10使得LRU算法精确率更高，但是会消耗更多的CPU</p>
<p><strong>在实际应用中，会选择配置10，消耗更多CPU以获得更精确的LRU数据清理</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;什么是lru算法&quot;&gt;什么是LRU算法&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;LRU-Leaste Recently Use，最近使用最少。算法原理略。&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;redis-lru算法&quot;&gt;Redis LRU算法&lt;/span&gt;&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-trib.rb工具的使用</title>
    <link href="http://www.forwardlee.com/2018/06/14/redis-trib-rb%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.forwardlee.com/2018/06/14/redis-trib-rb工具的使用/</id>
    <published>2018-06-14T01:52:43.000Z</published>
    <updated>2018-06-14T03:25:39.808Z</updated>
    
    <content type="html"><![CDATA[<p>【转】<a href="https://www.jianshu.com/p/21f67bd739cc" target="_blank" rel="noopener">https://www.jianshu.com/p/21f67bd739cc</a><br>【官方】<a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">http://www.redis.cn/topics/cluster-tutorial.html</a></p>
<h1><span id="参数配置">参数配置</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、create：创建集群</span><br><span class="line">2、check：检查集群</span><br><span class="line">3、info：查看集群信息</span><br><span class="line">4、fix：修复集群</span><br><span class="line">5、reshard：在线迁移slot</span><br><span class="line">6、rebalance：平衡集群节点slot数量</span><br><span class="line">7、add-node：将新节点加入集群</span><br><span class="line">8、del-node：从集群中删除节点</span><br><span class="line">9、set-timeout：设置集群节点间心跳连接的超时时间</span><br><span class="line">10、call：在集群全部节点上执行命令</span><br><span class="line">11、import：将外部redis数据导入集群</span><br></pre></td></tr></table></figure>
<h1><span id="创建集群">创建集群</span></h1><p>用户无需指定哪台节点为master，哪台节点为slave，因为redis内部算法帮我们实现了</p>
<p>create<br>–replicas # 可选参数，replicas表示每个master需要有几个slave。<br> 只有master节点的创建方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005</span><br></pre></td></tr></table></figure>
<p>使用 –replicas 1 创建 每个master带一个 slave 指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="检查集群情况check">检查集群情况check</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb check 192.168.66.2:7000    #后面的IP与端口,随便指定集群中的一个就行了。</span><br></pre></td></tr></table></figure>
<h1><span id="查看集群信息info">查看集群信息info</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb info 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[OK] 1 keys in 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br></pre></td></tr></table></figure>
<h1><span id="使用reshard在线迁移slot">使用reshard在线迁移slot</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">host:port：这个是必传参数，用来从一个节点获取整个集群信息，相当于获取集群信息的入口。</span><br><span class="line">--from &lt;arg&gt;：需要从哪些源节点上迁移slot，可从多个源节点完成迁移，以逗号隔开，传递的是节点的node id，还可以直接传递--from all，这样源节点就是集群的所有节点，不传递该参数的话，则会在迁移过程中提示用户输入。</span><br><span class="line">--to &lt;arg&gt;：slot需要迁移的目的节点的node id，目的节点只能填写一个，不传递该参数的话，则会在迁移过程中提示用户输入。</span><br><span class="line">--slots &lt;arg&gt;：需要迁移的slot数量，不传递该参数的话，则会在迁移过程中提示用户输入。</span><br><span class="line">--yes：设置该参数，可以在打印执行reshard计划的时候，提示用户输入yes确认后再执行reshard。</span><br><span class="line">--timeout &lt;arg&gt;：设置migrate命令的超时时间。</span><br><span class="line">--pipeline &lt;arg&gt;：定义cluster getkeysinslot命令一次取出的key数量，不传的话使用默认值为10。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb reshard --from all --to 80b661ecca260c89e3d8ea9b98f77edaeef43dcd --slots 11</span><br></pre></td></tr></table></figure>
<h1><span id="平衡集群节点slot数量rebalance">平衡集群节点slot数量rebalance</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host:port：这个是必传参数，用来从一个节点获取整个集群信息，相当于获取集群信息的入口。</span><br><span class="line">--weight &lt;arg&gt;：节点的权重，格式为node_id=weight，如果需要为多个节点分配权重的话，需要添加多个--weight &lt;arg&gt;参数，即--weight b31e3a2e=5 --weight 60b8e3a1=5，node_id可为节点名称的前缀，只要保证前缀位数能唯一区分该节点即可。没有传递–weight的节点的权重默认为1。</span><br><span class="line">--auto-weights：这个参数在rebalance流程中并未用到。</span><br><span class="line">--threshold &lt;arg&gt;：只有节点需要迁移的slot阈值超过threshold，才会执行rebalance操作。具体计算方法可以参考下面的rebalance命令流程的第四步。</span><br><span class="line">--use-empty-masters：rebalance是否考虑没有节点的master，默认没有分配slot节点的master是不参与rebalance的，设置--use-empty-masters可以让没有分配slot的节点参与rebalance。</span><br><span class="line">--timeout &lt;arg&gt;：设置migrate命令的超时时间。</span><br><span class="line">--simulate：设置该参数，可以模拟rebalance操作，提示用户会迁移哪些slots，而不会真正执行迁移操作。</span><br><span class="line">--pipeline &lt;arg&gt;：与reshar的pipeline参数一样，定义cluster getkeysinslot命令一次取出的key数量，不传的话使用默认值为10。</span><br></pre></td></tr></table></figure>
<h1><span id="增加一个主节点">增加一个主节点</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node 192.168.66.3:7006 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<p> 添加成功，但是并没有指定 slot ,所以必须 迁移slot节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb reshard 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<p><strong>提示一 ：How many slots do you want to move (from 1 to 16384)?<br>为了平衡每个master管理的slot的个数，所以输入 16384/master  的数量。如这里为4 那么就是 16384/4 = 4096个。</strong></p>
<p>输入 4096</p>
<p><strong>提示二：What is the receiving node ID?(接受的node ID是多少)<br>            890d2c8d989cce50e5fa48e37cd35738887f3f7d </strong><br>输入7006的ID</p>
<p><strong>提示三： Please enter all the source node IDs.<br>           Type ‘all’ to use all the nodes as source nodes for the hash slots.<br>           Type ‘done’ once you entered all the source nodes IDs.<br>                  （要从哪个节点中获取lost ？）</strong><br>不打算从特定的节点上取出指定数量的哈希槽， 那么可以输入 all，否则输入某个节点的 node ID </p>
<p>检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb check 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<h1><span id="增加一个从节点">增加一个从节点</span></h1><p>这样创建从节点会自动匹配主节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node --slave 127.0.0.1:7007 127.0.0.1:7000</span><br></pre></td></tr></table></figure>
<p>增加从节点的时候指定主节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node --slave --master-id 890d2c8d989cce50e5fa48e37cd35738887f3f7d 192.168.66.3:7008 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<h1><span id="从集群中删除节点del-node">从集群中删除节点del-node</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host:port：从该节点获取集群信息。</span><br><span class="line">node_id：需要删除的节点id。</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb del-node 192.168.66.2:7000 d5f6d1d17426bd564a6e309f32d0f5b96962fe53</span><br></pre></td></tr></table></figure>
<h1><span id="宕机情况">宕机情况</span></h1><p>当某个从节点挂掉之后，对于redis集群来说几乎没有什么影响，相当于这个从节点对应的 主节点少了一个备份而已。<br>当某一个主节点挂掉之后，redis 会从这个 主节点 的 多个从节点 中推选一个出来，担当master的工作，并且把之前依附在<br>主节点的从节点调整依附到新的master上。如果新任的master也挂掉并且他没有从节点了，那么这个集群也真正的挂掉了。<br>集群创建时 replicas 参数 指定情况。<br>使用 –replicas 1 参数时，如果节点数量<strong>少于六个</strong>。<br>报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*** ERROR: Invalid configuration for cluster creation.</span><br><span class="line">*** Redis Cluster requires at least 3 master nodes.</span><br><span class="line">*** This is not possible with 5 nodes and 1 replicas per node.</span><br><span class="line">*** At least 6 nodes are required.</span><br></pre></td></tr></table></figure>
<p>使用 –replicas 1 参数时，如果节点数量 大于六个，且为单数时。<br>这样会造成某个master拥有两个salve</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【转】&lt;a href=&quot;https://www.jianshu.com/p/21f67bd739cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/21f67bd739cc&lt;/a&gt;&lt;br&gt;【官方】&lt;a href=&quot;http://www.redis.cn/topics/cluster-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.redis.cn/topics/cluster-tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参数配置&quot;&gt;&lt;a href=&quot;#参数配置&quot; class=&quot;headerlink&quot; title=&quot;参数配置&quot;&gt;&lt;/a&gt;参数配置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、create：创建集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、check：检查集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、info：查看集群信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4、fix：修复集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5、reshard：在线迁移slot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6、rebalance：平衡集群节点slot数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7、add-node：将新节点加入集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8、del-node：从集群中删除节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9、set-timeout：设置集群节点间心跳连接的超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10、call：在集群全部节点上执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11、import：将外部redis数据导入集群&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;创建集群&quot;&gt;&lt;a href=&quot;#创建集群&quot; class=&quot;headerlink&quot; title=&quot;创建集群&quot;&gt;&lt;/a&gt;创建集群&lt;/h1&gt;&lt;p&gt;用户无需指定哪台节点为master，哪台节点为slave，因为redis内部算法帮我们实现了&lt;/p&gt;
&lt;p&gt;create&lt;br&gt;–replicas # 可选参数，replicas表示每个master需要有几个slave。&lt;br&gt; 只有master节点的创建方式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./redis-trib.rb create  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 –replicas 1 创建 每个master带一个 slave 指令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./redis-trib.rb create --replicas 1  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>数据库和缓存双写数据不一致问题分析和解决方案</title>
    <link href="http://www.forwardlee.com/2018/06/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.forwardlee.com/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/</id>
    <published>2018-06-07T02:15:31.000Z</published>
    <updated>2018-08-21T11:30:46.833Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="低并发读写更新数据和删除缓存的双写导致数据不一致">低并发读写—更新数据和删除缓存的双写导致数据不一致</span></h1><p><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/1.png" alt="数据更新操作"><br>step1：更新数据库中的数据<br>step2：删除缓存<br>如果step1执行成功，step2执行失败，那么客户端获取缓存中的数据就是旧数据，而数据库中是新数据，造成数据不一致。</p>
<p><strong>解决方案：</strong>先删除缓存，在执行数据库更新，保证缓存和数据库中数据一致。</p>
<h1><span id="高并发读写更新数据和删除缓存双写导致数据不一致">高并发读写—更新数据和删除缓存双写导致数据不一致</span></h1><p>低并发的读写策略在高并发场景下也会出现数据不一致的问题，图片中展示的操作步骤就会出现此类问题。<br><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/2.png" alt="优化后的数据更新操作"><br>step1：删除缓存<br>step2：更新数据库</p>
<p>如果step1执行完，step2正在执行的过程中还未flush到数据库，此时，客户端来一个请求获取正在更新的数据，缓存中已经删除了该数据，那么服务端会转到后端服务从数据库中加载旧数据并存到缓存一份，恰巧缓存完成后，step2执行完成了，该数据在数据库被更新了，那么就导致数据库和缓存中的数据是不一致的。</p>
<p><strong>解决方案：</strong>把并发读写的的指令在服务层内存做成串行队列按顺序执行，在内存中执行效率高，不会明显影响数据服务的响应速度。把被执行更新操作的对象id做hash，然后根据队列数取模，对应该对象的操作指令队列。（可采取nginx的hash路由功能，保证在读取每个对象数据时，每次都从同一个内存队列中执行）</p>
<p>读指令堆积的内存队列：<br><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/3.png" alt="指令内存队列"></p>
<p>进一步优化，因为服务接口每次查询都会把数据放入缓存，那么有一个更新后堆积了大量的查询操作，就会造成数据读取性能。可以在查询操作在内存队列存储之前，先查找队列上一个指令是不是update操作，如果是update操作，那么就直接存储当前select操作，如果是select操作，那么就把当前的查询服务等待200ms后，等待上一个select完成把数据存入缓存，当前select转向查询缓存数据。</p>
<p>优化后，出现update指令堆积的内存队列：<br><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/4.png" alt="指令内存队列"></p>
<p>PS：需要做数据演练，监视内存队列中update指令和最后一个select指令的个数，判断最后一个select需要等待前面n个update操作完成后的时间间隔t（单个update请求执行时间t/n应该小于10ms），t不能超过系统预期要求（通常要求一个读请求在200ms内完成）。如果内存队列堆积的update操作指令数据量太大，那么就需要考虑增加更多机器处理内存队列中的update操作，减少队列堆积量，提高服务接口的响应速度。</p>
<h1><span id="主机异常导致内存队列数据丢失的解决方案">主机异常导致内存队列数据丢失的解决方案</span></h1><p>采用异步内存阻塞队列，按顺序执行数据读写指令，当队列中存在写指令时，主机发生宕机，就会导致在内存队列中未写入数据库的数据丢失。</p>
<p><strong>解决方案：</strong>为解决这个问题，可以在执行写指令时，先把数据写入一个独立的数据库缓冲集群中，等到内存队列中的数据写入到数据库后，再删除数据库缓冲表中的数据。如果内存队列所在主机发生宕机，机器在重启后，服务启动时启动监听器Listener，从数据库缓冲表中的数据写入指令加载到内存阻塞队列。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;低并发读写更新数据和删除缓存的双写导致数据不一致&quot;&gt;低并发读写—更新数据和删除缓存的双写导致数据不一致&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/1.png&quot; alt=&quot;数
    
    </summary>
    
    
      <category term="数据不一致" scheme="http://www.forwardlee.com/tags/%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4/"/>
    
      <category term="数据丢失" scheme="http://www.forwardlee.com/tags/%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/"/>
    
  </entry>
  
  <entry>
    <title>Redis生产环境常见问题及优化</title>
    <link href="http://www.forwardlee.com/2018/06/06/Redis%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>http://www.forwardlee.com/2018/06/06/Redis生产环境常见问题及优化/</id>
    <published>2018-06-06T06:33:39.000Z</published>
    <updated>2018-06-06T09:20:09.813Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="fork导致的redis延时增大">fork导致的Redis延时增大</span></h1><p>Redis在进行RDB和AOF持久化时，为了使主进程继续提供读写服务，Redis就会fork一个子进程进行RDB和AOF持久化，子进程会拷贝Redis主进程的全量数据，此时Redis会阻塞执行读写服务，如果Redis中存储的数据量过大，那么在拷贝时耗时会增大，因为阻塞导致Redis的响应速度从几毫秒延迟到几百或者达到1秒。</p>
<p><strong>解决方案：</strong>单个Redis实例分配的内存空间不要大于10G，降低fork给Redis带来的延迟影响</p>
<h1><span id="一主多从导致的复制风暴问题">一主多从导致的复制风暴问题</span></h1><p>如果一个Master带有n多个Slava，可能会出现Slave在某一个时间节点，同时对Master进行复制，那么就会导致网络带宽被复制数据占满，导致Redis服务不可用。</p>
<p><strong>解决方案：</strong>把围绕一个Master创建n个Slave的网络拓扑结构进行优化，减少1个Master的Slave节点。Redis集群只支持一层Slave，如果要使用更多的Slave节点，那么就不能使用集群，而使用Redis的主从复制能力进行纵向扩展，给Slave节点创建Slave节点，使Redis节点成树形结构。</p>
<a id="more"></a>
<h1><span id="aof持久化导致的redis阻塞问题">AOF持久化导致的Redis阻塞问题</span></h1><p>Redis的AOF持久化方式，把数据以Redis写指令日志的形式先被写入os cache，然后进每秒进行fsync操作，把数据从os cache落入磁盘。Redis自身会对fsync的状态进行检查，如果两次fsync操作的时间间隔超过2s，那么Redis的写数据服务就会被阻塞，整个Redis的写服务就会被严重拖慢。</p>
<p><strong>解决方案：</strong> 造成两次fsync操作的间隔超过两秒，是因为磁盘的I/O性能不足所导致数据不能高效地从os cache落入磁盘，可以通过更换SSD固态硬盘，提高磁盘的I/O来提高fsync的数据写入速度，减少延迟。</p>
<h1><span id="主从复制的数据同步状态延迟较大">主从复制的数据同步状态延迟较大</span></h1><p>Redis在主从复制过程中，可能因为网络等例外因素导致主从复制延迟过大问题，影响Redis的数据一致性。</p>
<p><strong>解决方案：</strong>人为介入，写定时任务脚本检查主从复制的offset值之间的差值，当差值达到预设阈值时，进行报警通知，排查估值，使主从复制的数据延迟缩小到有效范围内。</p>
<h1><span id="redis申请内存的linux内核参数优化-vmovercommit_memory">Redis申请内存的linux内核参数优化-vm.overcommit_memory</span></h1><p>看一下redis启动日志的警告提醒：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">25483:M 27 May 13:41:39.856 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. </span><br><span class="line">To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</span><br></pre></td></tr></table></figure>
<p>0：检查有没有足够的内存，没有的话申请内存失败。例如fork子进程时申请内存，可能因为申请不到内存导致fork操作失败。<br>1：允许使用内存，直到用完为止。<strong>常用配置</strong><br>2：内存地址使用率不能超过swap+50%</p>
<p>按照redis的警告提醒进行修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/overcommit_memory</span><br><span class="line">echo &quot;vm.overcommit_memory=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl vm.overcommit_memory=1</span><br></pre></td></tr></table></figure>
<h1><span id="redis申请内存的linux内核参数优化-swappiness">Redis申请内存的linux内核参数优化-swappiness</span></h1><p>设置linux在内存不足时，是否杀掉进程以获得更多空间。<br>查看linux内核版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure>
<p>linux内核版本&lt;3.5，swappiness设置为0，<br>linux内核版本&gt;=3.5，swappiness设置为1，<br>这样在内存不足时lunix进行swap操作，也不会杀掉进程，保证Redis进程不会被linux杀掉。</p>
<p>修改方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/vm/swappiness</span><br><span class="line">echo vm.swappiness=0 &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<h1><span id="linux打开的文件句柄数修改">linux打开的文件句柄数修改</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25525:M 27 May 15:48:29.008 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br></pre></td></tr></table></figure>
<p>linux系统默认的打开句柄数最大为1024，修改为10032。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n 10032 10032</span><br></pre></td></tr></table></figure>
<h1><span id="linux内核进行tcp-socket连接通信参数优化-tcp-backlog">linux内核进行TCP Socket连接通信参数优化-tcp backlog</span></h1><p>backlog在Redis主从复制时，用来缓存每次进行socket连接复制的数据和offset。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25483:M 27 May 13:41:39.856 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br></pre></td></tr></table></figure>
<p>修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 511 &gt;&gt; /proc/sys/net/core/somaxconn</span><br></pre></td></tr></table></figure>
<p>PS:TCP socket服务开发的4个步骤 socket-&gt;bind-&gt;listen-&gt;accept<br>调用listen函数时,有一个backlog参数，此时TCP请求的连接状态是ESTABLISHED，TCP backlog值表示的就是ESTABLISHED状态的请求连接所在的队列大小，在linux内核中/proc/sys/net/core/somaxconn进行设置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fork导致的Redis延时增大&quot;&gt;&lt;a href=&quot;#fork导致的Redis延时增大&quot; class=&quot;headerlink&quot; title=&quot;fork导致的Redis延时增大&quot;&gt;&lt;/a&gt;fork导致的Redis延时增大&lt;/h1&gt;&lt;p&gt;Redis在进行RDB和AOF持久化时，为了使主进程继续提供读写服务，Redis就会fork一个子进程进行RDB和AOF持久化，子进程会拷贝Redis主进程的全量数据，此时Redis会阻塞执行读写服务，如果Redis中存储的数据量过大，那么在拷贝时耗时会增大，因为阻塞导致Redis的响应速度从几毫秒延迟到几百或者达到1秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;单个Redis实例分配的内存空间不要大于10G，降低fork给Redis带来的延迟影响&lt;/p&gt;
&lt;h1 id=&quot;一主多从导致的复制风暴问题&quot;&gt;&lt;a href=&quot;#一主多从导致的复制风暴问题&quot; class=&quot;headerlink&quot; title=&quot;一主多从导致的复制风暴问题&quot;&gt;&lt;/a&gt;一主多从导致的复制风暴问题&lt;/h1&gt;&lt;p&gt;如果一个Master带有n多个Slava，可能会出现Slave在某一个时间节点，同时对Master进行复制，那么就会导致网络带宽被复制数据占满，导致Redis服务不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;把围绕一个Master创建n个Slave的网络拓扑结构进行优化，减少1个Master的Slave节点。Redis集群只支持一层Slave，如果要使用更多的Slave节点，那么就不能使用集群，而使用Redis的主从复制能力进行纵向扩展，给Slave节点创建Slave节点，使Redis节点成树形结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cluster维护</title>
    <link href="http://www.forwardlee.com/2018/06/01/Redis-Cluster%E7%BB%B4%E6%8A%A4/"/>
    <id>http://www.forwardlee.com/2018/06/01/Redis-Cluster维护/</id>
    <published>2018-06-01T08:49:11.000Z</published>
    <updated>2018-06-01T10:08:18.908Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="增加redis-cluster-master节点">增加Redis Cluster Master节点</span></h1><p>在安装了Redis Cluster集群环境机器上执行增加节点命令。<br>redis-trib.rb add-node NEW_NODE ANY_NODE_OF_CLUSTER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb add-node 192.168.1.212:7007 192.168.1.212:7005</span><br><span class="line"></span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb add-node 192.168.1.212:7007 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Adding node 192.168.1.212:7007 to cluster 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.211:7003)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.212:7007 to make it join the cluster.</span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>
<p>再次查看集群状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb check 192.168.1.211:7003</span><br><span class="line"></span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb  check 192.168.1.212:7007</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.212:7007)</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是新增Master节点的slots=0，那么需要重新规划Redis Cluster Hash Slots.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb reshard 192.168.1.211:7004</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">How many slots do you want to move (from 1 to 16384)?</span><br></pre></td></tr></table></figure>
<p>迁移多少个Slot，这里是指新的Master节点分配多少个Slot，可以用16384除以4（4个Master节点）得到的整数结,当然也可以根据实际情况配置合适的Slot个数。</p>
<p>后面还需要输入从哪几个Master源获取Slot，输入Master Node ID，最后一个需要结束时输入done，Redis Cluster重新规划Hash Slot。</p>
<p>查看重新规划后的Slot，每个Master都是4096个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb check 192.168.1.212:7005</span><br><span class="line"></span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.212:7005</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.212:7005)</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6827-10922 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="给master节点增加slave">给Master节点增加Slave</span></h1><p>redis-trib.rb add-node –slave –master-id MASTER_ID NEW_NODE ANY_NODE_OF_CLUSTER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb add-node --slave --master-id 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7008 192.168.1.211:7003</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Adding node 192.168.1.211:7008 to cluster 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.211:7003)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6827-10922 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.211:7008 to make it join the cluster.</span><br><span class="line">Waiting for the cluster to join.</span><br><span class="line">&gt;&gt;&gt; Configure node as replica of 192.168.1.211:7004.</span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>
<p>检查新增的slave节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.211:7003)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6827-10922 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates db864e7965225405f65f36c1cd0a0bb32f2df6ce</span><br><span class="line">S: 7fe0f90658458209f39578981b32d24a223e26b1 192.168.1.211:7008</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="删除集群节点">删除集群节点</span></h1><p>step1:迁移要删除节点Hash Slot<br>redis-trib.rb reshard ANY_NODE_OF_CLUSTER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb reshard 192.168.1.211:7004</span><br></pre></td></tr></table></figure>
<p>把要删除的Master节点Slots分配给其他Master</p>
<p>step2：删除节点<br>redis-trib.rb del-node ANY_NODE_OF_CLUSTER DEL_NODE_ID</p>
<p>删除新增的7007节点（Master节点）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb del-node 192.168.1.210:7001 db864e7965225405f65f36c1cd0a0bb32f2df6ce</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Removing node db864e7965225405f65f36c1cd0a0bb32f2df6ce from cluster 192.168.1.210:7001</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br></pre></td></tr></table></figure>
<p>step3：查看集群</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.210:7001</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:5461-6825,12288-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6826-12287 (5462 slots) master</span><br><span class="line">   2 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 7fe0f90658458209f39578981b32d24a223e26b1 192.168.1.211:7008</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>被删除的Master节点的Slave节点会自动被Redis Cluster挂在到其他Maser节点上去，本例中看到Redis Cluster 7003节点多了一个从节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6826-12287 (5462 slots) master</span><br><span class="line">   2 additional replica(s)</span><br></pre></td></tr></table></figure>
<p>在删除的7007节点机器上查看redis进程发现，7007的Redis已经被Redis Cluster自动关闭了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache03 init.d]# ps -ef | grep redis</span><br><span class="line">root     25143     1  0 May26 ?        00:00:47 /usr/local/bin/redis-server 192.168.1.212:7005 [cluster]</span><br><span class="line">root     25149     1  0 May26 ?        00:00:30 /usr/local/bin/redis-server 192.168.1.212:7006 [cluster]</span><br><span class="line">root     25272 25091  0 03:57 pts/1    00:00:00 grep redis</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;增加Redis-Cluster-Master节点&quot;&gt;&lt;a href=&quot;#增加Redis-Cluster-Master节点&quot; class=&quot;headerlink&quot; title=&quot;增加Redis Cluster Master节点&quot;&gt;&lt;/a&gt;增加Redis Cluster Master节点&lt;/h1&gt;&lt;p&gt;在安装了Redis Cluster集群环境机器上执行增加节点命令。&lt;br&gt;redis-trib.rb add-node NEW_NODE ANY_NODE_OF_CLUSTER&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-trib.rb add-node 192.168.1.212:7007 192.168.1.212:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@eshop-cache01 init.d]# redis-trib.rb add-node 192.168.1.212:7007 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Adding node 192.168.1.212:7007 to cluster 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 192.168.1.211:7003)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:5461-10922 (5462 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 389568b7d660edfb016521d2c06aa898733a28c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 434f96e83bea38adeb97a5df293da3b008f76768&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates b843b0530233e861dc674f1d78856a0de1f5c438&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:10923-16383 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:0-5460 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All nodes agree about slots configuration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check for open slots...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check slots coverage...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All 16384 slots covered.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Send CLUSTER MEET to node 192.168.1.212:7007 to make it join the cluster.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] New node added correctly.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次查看集群状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-trib.rb check 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@eshop-cache01 init.d]# redis-trib.rb  check 192.168.1.212:7007&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 192.168.1.212:7007)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:5461-10922 (5462 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:0-5460 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 389568b7d660edfb016521d2c06aa898733a28c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:10923-16383 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates b843b0530233e861dc674f1d78856a0de1f5c438&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 434f96e83bea38adeb97a5df293da3b008f76768&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All nodes agree about slots configuration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check for open slots...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check slots coverage...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All 16384 slots covered.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>RedisCluster配置和部署--创建多master多slave高可用集群环境</title>
    <link href="http://www.forwardlee.com/2018/06/01/RedisCluster%E9%85%8D%E7%BD%AE%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.forwardlee.com/2018/06/01/RedisCluster配置和部署/</id>
    <published>2018-06-01T02:37:51.000Z</published>
    <updated>2018-06-01T10:04:40.208Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的主从配置的主要作用是实现读写分离，并且可以通过配置一主多从来实现Redis横向扩展，保证Redis读取数据的QPS能够达到10W+。<strong>如果应用的Redis写数据量QPS只需要几万，而读数据要几十万或上百万QPS，那么Redis Sentinel集群就可以满足业务需求，一主多从，而且可以实现自动Master主备切换，实现高可用。</strong>当写数据的QPS需要几十万或者上百万QPS，或者写数据量达到1T以上的场景，Sentinel的一主多从就不能满足业务需求，此时需要更多的Master来支撑写操作。</p>
<p>Redis Cluster实现多主多从的集群架构，并且能够进行自动故障节点转移和恢复，并支持多Master节点写入，能够支撑更大数据量的写操作。虽然Redis Cluster实现了读写分离的主从结构，但是Redis的客户端Jedis操作对读写分离支持不够完善，需要对Jedis进行扩展才能支持读写分离。而且Redis Cluster本身slave节点不能直接读取数据，需要先执行readonly命令，再读取数据。所以<strong>Redis Cluster的重点在实现Master节点的横向扩展支撑更大数据量，能够通过Master节点实现读写操作，Slave节点的作用主要用是数据热备和在Master节点故障时的主备自动切换，保证Redis Cluster的高可用。</strong></p>
<a id="more"></a>
<h1><span id="创建配置文件">创建配置文件</span></h1><p>Redis Cluster的用处可以实现多主多从，实现读写分离，实现Redis高可用。</p>
<p>官方推荐至少3个master，3个slave，这样可以让数据冗余1份。</p>
<p>需要n个节点的redis集群，就创建n份redis配置文件。For example：7001.conf 7002.conf 7003.conf 7004.conf 7005.conf 7006.conf</p>
<p>创建备用目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /etc/redis-cluter</span><br><span class="line">mkdir -pv /var/log/redis</span><br><span class="line">mkdir -pv /var/redis/7001</span><br><span class="line">mv /usr/local/common/redis-3.28/redis.conf /etc/redis/7001.conf</span><br><span class="line">vi /etc/redis/7001.conf</span><br></pre></td></tr></table></figure>
<p>修改7001.conf以下配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 7001</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /etc/redis-cluster/node-7001.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line">dir /var/redis/7001</span><br><span class="line">logfile /var/log/redis/7001.log</span><br><span class="line">bind 192.168.1.210</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<h1><span id="创建启动脚本">创建启动脚本</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/init.d/redis_6379 /etc/init.d/redis_7001</span><br><span class="line"></span><br><span class="line">vi redis_7001</span><br></pre></td></tr></table></figure>
<p>修改启动脚本中使用的端口号即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">chkconfig redis_7001 on</span><br><span class="line"></span><br><span class="line">REDISPORT=7001</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis_7001 start</span><br></pre></td></tr></table></figure>
<h1><span id="创建集群">创建集群</span></h1><p>step1：安装ruby环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++ patch readline readline-devel zlib zlib-devel \</span><br><span class="line">   libyaml-devel libffi-devel openssl-devel make \</span><br><span class="line">   bzip2 autoconf automake libtool bison iconv-devel sqlite-devel</span><br><span class="line">   </span><br><span class="line">wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.4.tar.gz</span><br><span class="line">tar zxf ruby-2.3.4.tar.gz</span><br><span class="line">cd ruby-2.3.4</span><br><span class="line">./configure --prefix=/usr/local/ruby</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cd /usr/local/ruby</span><br><span class="line">cp bin/ruby /usr/local/bin/</span><br><span class="line">cp bin/gem /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>step2：使用ruby安装redis集群redis-trib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://rubygems.org/downloads/redis-3.3.0.gem</span><br><span class="line">gem install -l redis-3.3.0.gem</span><br></pre></td></tr></table></figure>
<p>此时在redis-3.2.8/src/下出现一个redis-trib.rb文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/common/redis-3.2.8/src/redis-trib.rb /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>使用redis-trib.rb创建集群，–replicas 1表示每个master有1个slave，并且会让master和slave尽量不在一台机器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb create --replicas 1 192.168.1.210:7001 192.168.1.210:7002 192.168.1.211:7003 192.168.1.211:7004 192.168.1.212:7005 192.168.1.212:7006</span><br></pre></td></tr></table></figure>
<p>输出以下集群信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">192.168.1.210:7001</span><br><span class="line">192.168.1.211:7003</span><br><span class="line">192.168.1.212:7005</span><br><span class="line">Adding replica 192.168.1.211:7004 to 192.168.1.210:7001</span><br><span class="line">Adding replica 192.168.1.210:7002 to 192.168.1.211:7003</span><br><span class="line">Adding replica 192.168.1.212:7006 to 192.168.1.212:7005</span><br><span class="line">M: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">S: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   replicates 279addebc5ef0f0d7beef81d86201e3f8874fbd7</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">M: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 279addebc5ef0f0d7beef81d86201e3f8874fbd7</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="集群创建成功">集群创建成功</span></h1><p>集群环境支持master+slave的读写分离，支持master宕机的，slave自动切换成master，支持Redis Hash Slot分布式算法，支持Redis服务高可用。</p>
<p>查看集群状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# redis-trib.rb check 192.168.1.210:7001</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">M: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 279addebc5ef0f0d7beef81d86201e3f8874fbd7</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>干掉其中一个master，在看集群状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# ps -ef | grep redis</span><br><span class="line">root      2300     1  0 12:16 ?        00:00:05 /usr/local/bin/redis-server 192.168.1.210:7001 [cluster]</span><br><span class="line">root      2309     1  0 12:16 ?        00:00:06 /usr/local/bin/redis-server 192.168.1.210:7002 [cluster]</span><br><span class="line">root     16856  2229  0 13:54 pts/2    00:00:00 grep redis</span><br><span class="line">[root@eshop-cache01 src]# kill -9 2300</span><br><span class="line">[root@eshop-cache01 src]# rm -rf /var/run/redis_7001.pid </span><br><span class="line">[root@eshop-cache01 src]# redis-trib.rb check 192.168.1.210:7002</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7002)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>恢复启动7001的redis，再看集群状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# cd /etc/init.d/</span><br><span class="line">[root@eshop-cache01 init.d]# ./redis_7001 start</span><br><span class="line">Starting Redis server...</span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.210:7001</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="redis集群数据操作">Redis集群数据操作</span></h1><p>数据插入会根据key的hash值与16384取摩，分配到固定的slot值所在的master节点，例如加入k1 v1可以存在7001节点，k2 v2只能存在7005节点，那么通过7001节点的客户端操作set k1 v1可以存入，但是set k2 v2就会返回数据要存入哪个master节点的路由信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-cli -h 192.168.1.211 -p 7003</span><br><span class="line">192.168.1.211:7003&gt; set k2 v2</span><br><span class="line">(error) MOVED 449 192.168.1.211:7004</span><br></pre></td></tr></table></figure>
<p>这样操作数据会很麻烦，不过redis cluster为了能让redis操作起来更简单，可以进行一下操作。在使用redis-cli连接redis cluster时，加上-c的这个参数就可以了。操作会返回key的hash slot值，并带有存储到哪个master节点的路由信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-cli -h 192.168.1.211 -p 7003 -c</span><br><span class="line">192.168.1.211:7003&gt; set k2 v2</span><br><span class="line">-&gt; Redirected to slot [449] located at 192.168.1.211:7004</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>查看master下的slave节点，并在slave节点读取数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.211:7003&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.1.210,port=7002,state=online,offset=16769,lag=1</span><br><span class="line">master_repl_offset:16769</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:16768</span><br></pre></td></tr></table></figure>
<p>连接slave节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-cli -h 192.168.1.210 -p 7002</span><br><span class="line">192.168.1.210:7002&gt; get k4</span><br><span class="line">(error) MOVED 8455 192.168.1.211:7003</span><br></pre></td></tr></table></figure>
<p>直接获取k4的值，会提示需要从master节点7003获取的错误提示。此时需要先发送readonly指令，再执行get操作即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.210:7002&gt; readonly</span><br><span class="line">OK</span><br><span class="line">192.168.1.210:7002&gt; get k4</span><br><span class="line">&quot;v4&quot;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis的主从配置的主要作用是实现读写分离，并且可以通过配置一主多从来实现Redis横向扩展，保证Redis读取数据的QPS能够达到10W+。&lt;strong&gt;如果应用的Redis写数据量QPS只需要几万，而读数据要几十万或上百万QPS，那么Redis Sentinel集群就可以满足业务需求，一主多从，而且可以实现自动Master主备切换，实现高可用。&lt;/strong&gt;当写数据的QPS需要几十万或者上百万QPS，或者写数据量达到1T以上的场景，Sentinel的一主多从就不能满足业务需求，此时需要更多的Master来支撑写操作。&lt;/p&gt;
&lt;p&gt;Redis Cluster实现多主多从的集群架构，并且能够进行自动故障节点转移和恢复，并支持多Master节点写入，能够支撑更大数据量的写操作。虽然Redis Cluster实现了读写分离的主从结构，但是Redis的客户端Jedis操作对读写分离支持不够完善，需要对Jedis进行扩展才能支持读写分离。而且Redis Cluster本身slave节点不能直接读取数据，需要先执行readonly命令，再读取数据。所以&lt;strong&gt;Redis Cluster的重点在实现Master节点的横向扩展支撑更大数据量，能够通过Master节点实现读写操作，Slave节点的作用主要用是数据热备和在Master节点故障时的主备自动切换，保证Redis Cluster的高可用。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Sentinels哨兵管理</title>
    <link href="http://www.forwardlee.com/2018/05/31/Sentinels%E5%93%A8%E5%85%B5%E7%AE%A1%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/05/31/Sentinels哨兵管理/</id>
    <published>2018-05-31T10:58:16.000Z</published>
    <updated>2018-05-31T12:14:04.007Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="删除哨兵节点">删除哨兵节点</span></h1><p>step1：停掉哨兵进程<br>ps -ef  | grep redis-sentinel<br>kill -9 PROCESSID<br>step2：过一会，在其他哨兵节点执行哨兵重置，清理旧哨兵的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 ~]# redis-cli -h 192.168.1.210 -p 5000</span><br><span class="line">192.168.1.210:5000&gt; sentinel reset * </span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<p>step3：在所有哨兵节点上执行以下命令，查看所有的哨兵数量是否一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel master mymaster</span><br></pre></td></tr></table></figure>
<h1><span id="redis的slave节点下线">Redis的slave节点下线</span></h1><p>停掉或删除Redis服务后，停掉哨兵节点，在其他所有哨兵节点上执行sentinel reset mymaster。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;删除哨兵节点&quot;&gt;删除哨兵节点&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;step1：停掉哨兵进程&lt;br&gt;ps -ef  | grep redis-sentinel&lt;br&gt;kill -9 PROCESSID&lt;br&gt;step2：过一会，在其他哨兵节点执行哨兵重置，清理旧
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Sentinel" scheme="http://www.forwardlee.com/tags/Sentinel/"/>
    
  </entry>
  
</feed>
