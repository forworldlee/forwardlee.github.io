<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不忘初心</title>
  <subtitle>李奉华的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.forwardlee.com/"/>
  <updated>2018-06-20T15:15:54.289Z</updated>
  <id>http://www.forwardlee.com/</id>
  
  <author>
    <name>ForwardLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Nginx双层架构和数据缓存服务层组成的数据三级缓存策略</title>
    <link href="http://www.forwardlee.com/2018/06/20/Nginx%E8%AF%B7%E6%B1%82%E5%88%86%E5%8F%91%E5%B1%82%E5%92%8C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8F%8C%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%B1%82%E6%95%B0%E6%8D%AE%E9%9D%99%E6%80%81%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://www.forwardlee.com/2018/06/20/Nginx请求分发层和应用层双层架构模式下的应用层数据静态化策略/</id>
    <published>2018-06-20T01:01:28.000Z</published>
    <updated>2018-06-20T15:15:54.289Z</updated>
    
    <content type="html"><![CDATA[<p>接续《<a href="http://www.forwardlee.com/2018/06/19/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-LUA%E5%8F%8C%E5%B1%82Ngnix%E6%9E%B6%E6%9E%84/">基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略</a>》</p>
<h1><span id="应用架构设计">应用架构设计</span></h1><p>Nginx请求分发层+Nginx应用层（nginx cache）+业务数据两级缓存服务接口（ehcache+redis）<br><img src="/2018/06/20/Nginx请求分发层和应用层双层架构模式下的应用层数据静态化策略/1.png" alt="架构设计"></p>
<a id="more"></a>
<h1><span id="step1应用服务器nginx安装resty静态化模板">Step1:应用服务器Nginx安装resty静态化模板</span></h1><p>应用服务器要从缓存数据中获取数据并渲染到静态化模板中，所以在应用层Nginx安装模板包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/lualib/resty/</span><br><span class="line">wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template.lua</span><br><span class="line">mkdir /usr/hello/lualib/resty/html</span><br><span class="line">cd /usr/hello/lualib/resty/html</span><br><span class="line">wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template/html.lua</span><br></pre></td></tr></table></figure>
<h1><span id="step2模板配置">Step2：模板配置</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/</span><br><span class="line">mkdir templates</span><br><span class="line"></span><br><span class="line">vi hello.conf</span><br><span class="line">##在server配置中增加以下两行配置</span><br><span class="line">set $template_location &quot;/templates&quot;;  </span><br><span class="line">set $template_root &quot;/usr/hello/templates&quot;;</span><br><span class="line"></span><br><span class="line">cd /usr/hello/templates</span><br><span class="line"></span><br><span class="line">vi ecourse.html</span><br><span class="line"></span><br><span class="line">##放入以下内容</span><br><span class="line">ecourse id: &#123;* ecourseId *&#125;&lt;/br&gt;   </span><br><span class="line">ecourse name: &#123;* ecourseName *&#125;&lt;/br&gt;</span><br><span class="line">ecourse price: &#123;* ecoursePrice *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author name: &#123;* authorName *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author type: &#123;* authorType *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author addr: &#123;* authorAddr *&#125;&lt;/br&gt; </span><br><span class="line">ecourse author sex: &#123;* authorSex *&#125;&lt;/br&gt;</span><br><span class="line">ecourse author level: &#123;* authorLevel *&#125;&lt;/br&gt;</span><br></pre></td></tr></table></figure>
<p>配置Nginx本地缓存的大小。Nginx会在缓存数据达到设置的大小后，进行LRU算法清理掉无效数据。还可以设置缓存数据过期时间，到期或者达到缓存设置的大小都会进行LRU清理缓存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/servers/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">##在http中增加以下配置，eccache是自定义的cache name</span><br><span class="line">lua_shared_dict eccache 128m;</span><br></pre></td></tr></table></figure>
<h1><span id="step3应用层nginx数据静态化过程lua脚本">Step3:应用层Nginx数据静态化过程LUA脚本</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/</span><br><span class="line">vi hello.conf</span><br><span class="line">##增加一个新的location配置</span><br><span class="line"></span><br><span class="line"> location /ecourse/info &#123;</span><br><span class="line">        default_type &apos;text/html&apos;;</span><br><span class="line">        content_by_lua_file /usr/local/common/lua_scripts/hello/lua/ecourse.lua;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>录入ecourse.lua脚本内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">local uri_args = ngx.req.get_uri_args()</span><br><span class="line">local ecourseId = uri_args[&quot;ecourseId&quot;]</span><br><span class="line">### eccache就是在hello.conf中定义的cache name</span><br><span class="line">local cache_ngx = ngx.shared.eccache</span><br><span class="line"></span><br><span class="line">local ecourseCacheKey = &quot;ecourse_info_&quot;..ecourseId</span><br><span class="line"></span><br><span class="line">local ecourseCache = cache_ngx:get(ecourseCacheKey)</span><br><span class="line"></span><br><span class="line">if ecourseCache == &quot;&quot; or ecourseCache == nil then</span><br><span class="line">	local http = require(&quot;resty.http&quot;)</span><br><span class="line">	local httpc = http.new()</span><br><span class="line"></span><br><span class="line">	local resp, err = httpc:request_uri(&quot;http://192.168.1.103:8080&quot;,&#123;</span><br><span class="line">  		method = &quot;GET&quot;,</span><br><span class="line">  		path = &quot;/getEcourseInfo?ecourseId=&quot;..ecourseId</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">     ecourseCache = resp.body</span><br><span class="line">	cache_ngx:set(ecourseCacheKey, ecourseCache, 10 * 60)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local cjson = require(&quot;cjson&quot;)</span><br><span class="line">local ecourseCacheJSON = cjson.decode(ecourseCache)</span><br><span class="line"></span><br><span class="line">local context = &#123;</span><br><span class="line">	ecourseId = ecourseCacheJSON.ecourseId,</span><br><span class="line">	ecourseName = ecourseCacheJSON.ecourseName,</span><br><span class="line">	ecoursePrice = ecourseCacheJSON.ecoursePrice,</span><br><span class="line">	authorName = ecourseCacheJSON.authorName,</span><br><span class="line">	authorType = ecourseCacheJSON.authorType,</span><br><span class="line">	authorAddr = ecourseCacheJSON.authorAddr,</span><br><span class="line">	authorSex = ecourseCacheJSON.authorSex,</span><br><span class="line">	authorLevel = ecourseCacheJSON.authorLevel,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">local template = require(&quot;resty.template&quot;)</span><br><span class="line">template.render(&quot;ecourse.html&quot;, context)</span><br></pre></td></tr></table></figure>
<p><strong>cache_ngx:set(ecourseCacheKey, ecourseCache, 10 * 60)设置了课程信息在nginx缓存中保留的时间为600s也就是10分钟。也就是说Nginx缓存保存的数据对时效性要求不能太高，对数据实时性要求很高的数据需要使用高并发请求转化成串型队列请求执行的逻辑，更新数据生产服务端的Redis缓存的方式实现，直接从Redis中读取数据，更好的实现数据状态的实时性</strong></p>
<h1><span id="step4nginx配置重新加载">Step4:Nginx配置重新加载</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<h1><span id="step5数据缓存层实现查询数据">Step5:数据缓存层实现查询数据</span></h1><p>因为ehcache是与数据缓存服务web实例绑定，多个数据缓存服务实例之间不能共享，所以查询接口要先从分布式缓存redis中获取数据，如果redis中数据为空，再从数据缓存服务实例的本地缓存ehcache中获取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/getEcourseInfo&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public JSONObject getEcourseInfo(Integer ecourseId)&#123;</span><br><span class="line">       ECourseInfo eCoureseInfo = ecCacheService.getECoureseInfoFromRedis(ecourseId);</span><br><span class="line">       log.info(&quot;=======从redis中查询课程信息=========&quot;);</span><br><span class="line">       if (eCoureseInfo == null) &#123;</span><br><span class="line">           log.info(&quot;=======从ehcache中查询课程信息=========&quot;);</span><br><span class="line">           eCoureseInfo = ecCacheService.getECoureseInfoFromEhcache(ecourseId);</span><br><span class="line">       &#125;</span><br><span class="line">       //如果从两级缓存中还是查不到，应该去数据生产服务中查询，注意并发查询更新缓存的冲突问题。</span><br><span class="line">       if (eCoureseInfo == null) &#123;</span><br><span class="line">           //some code</span><br><span class="line">       &#125;</span><br><span class="line">       Integer authorId = eCoureseInfo.getAuthorId();</span><br><span class="line">       ECourseAuthorInfo eCourseAuthorInfo = ecCacheService.getECourseAuthorInfoFromRedis(authorId);</span><br><span class="line">       log.info(&quot;=======从redis中查询作者信息=========&quot;);</span><br><span class="line">       if (eCourseAuthorInfo == null) &#123;</span><br><span class="line">           log.info(&quot;=======从ehcache中查询作者信息=========&quot;);</span><br><span class="line">           eCourseAuthorInfo = ecCacheService.getECourseAuthorInfoFromEhcache(authorId);</span><br><span class="line">       &#125;</span><br><span class="line">       //如果从两级缓存中还是查不到，应该去数据生产服务中查询，注意并发查询更新缓存的冲突问题。</span><br><span class="line">       if (eCourseAuthorInfo == null) &#123;</span><br><span class="line">           //some code</span><br><span class="line">       &#125;</span><br><span class="line">       JSONObject ecourseInfoJson = new JSONObject();</span><br><span class="line">       ecourseInfoJson.put(&quot;ecourseId&quot;,eCoureseInfo.getPkid());</span><br><span class="line">       ecourseInfoJson.put(&quot;ecourseName&quot;,eCoureseInfo.getName());</span><br><span class="line">       ecourseInfoJson.put(&quot;ecoursePrice&quot;,eCoureseInfo.getPrice());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorName&quot;,eCourseAuthorInfo.getName());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorType&quot;,eCourseAuthorInfo.getType());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorAddr&quot;,eCourseAuthorInfo.getAddr());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorSex&quot;,eCourseAuthorInfo.getSex());</span><br><span class="line">       ecourseInfoJson.put(&quot;authorLevel&quot;,eCourseAuthorInfo.getLevel());</span><br><span class="line"></span><br><span class="line">       return ecourseInfoJson;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1><span id="step6测试">Step6:测试</span></h1><p>use case1：<br>启动数据缓存层web服务192.168.1.103:8080,然后在浏览器中请求分发层Nginx代理服务<a href="http://192.168.1.212/course/info?ecourseId=1,分别查看Nginx分发层和应用层请求的路由过程。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1,分别查看Nginx分发层和应用层请求的路由过程。</a><br>查看数据缓存服务后台日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:08:07.081  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从ehcache中查询课程信息=========</span><br><span class="line">2018-06-20 12:08:07.081  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从redis中查询课程信息=========</span><br><span class="line">2018-06-20 12:08:07.167  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从ehcache中查询作者信息=========</span><br><span class="line">2018-06-20 12:08:07.167  INFO 3963 --- [nio-8080-exec-1] c.k.eccache.controller.CacheController   : =======从redis中查询作者信息=========</span><br></pre></td></tr></table></figure>
<p>浏览器显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case2：<br>数据缓存服务的本地缓存ehcache，在未达到maxElementsInMemory限制时，不会执行LRU数据清理。与此同时，应用层Nginx cache设置的数据过期时间为10分钟（为了测试方便可以缩短这个过期时间），在Nginx cache未过期时，在浏览器中再次请求Nginx分发层代理服务<a href="http://192.168.1.212/course/info?ecourseId=1，此时查看数据缓存服务端后台日志。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，此时查看数据缓存服务端后台日志。</a><br><strong>没有日志输出</strong></p>
<p>浏览器显示（乱码问题忽略）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case3：<br>等待应用层Nginx cache过期后，再次请求分发层Nginx代理服务<a href="http://192.168.1.212/course/info?ecourseId=1，此时再查看数据缓存服务后台日志，此时数据缓存服务只需要从本地缓存ehcache中读取数据。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，此时再查看数据缓存服务后台日志，此时数据缓存服务只需要从本地缓存ehcache中读取数据。</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:08:37.505  INFO 3963 --- [nio-8080-exec-2] c.k.eccache.controller.CacheController   : =======从ehcache中查询课程信息=========</span><br><span class="line">2018-06-20 12:08:37.505  INFO 3963 --- [nio-8080-exec-2] c.k.eccache.controller.CacheController   : =======从ehcache中查询作者信息=========</span><br></pre></td></tr></table></figure>
<p>浏览器显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case4：<br>给数据缓存服务从发送消息，更改课程价格：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool.Singleton.getInstance().submit(new KafkaProducer(&quot;kafkaConsume&quot;,&quot;abc&quot;,&quot;&#123;serviceId:&apos;ecourseInfoServiceUpdate&apos;,price:19.99&#125;&quot;));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;=======保存课程信息ehcache缓存数据：【&quot;+ JSONObject.toJSONString(eCourseInfo)+&quot;】=========&quot;); </span><br><span class="line">ecCacheService.saveECourseInfo2Ehcache(eCourseInfo);</span><br><span class="line">log.info(&quot;=======保存课程信息redis缓存数据：【&quot;+ JSONObject.toJSONString(eCourseInfo)+&quot;】=========&quot;);</span><br><span class="line">ecCacheService.saveECourseInfo2Redis(eCourseInfo);</span><br></pre></td></tr></table></figure>
<p>数据缓存服务后台日志输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:41:47.032  INFO 4010 --- [pool-1-thread-2] c.k.eccache.kafka.KafkaMessageProcessor  : =======收到消息[&#123;serviceId:&apos;ecourseInfoServiceUpdate&apos;,price:19.99&#125;]========</span><br><span class="line">2018-06-20 12:41:47.160  INFO 4010 --- [pool-1-thread-2] c.k.eccache.kafka.KafkaMessageProcessor  : =======保存课程信息ehcache缓存数据：【&#123;&quot;authorId&quot;:1,&quot;name&quot;:&quot;初二物理&quot;,&quot;pkid&quot;:1,&quot;price&quot;:19.99&#125;】=========</span><br><span class="line">2018-06-20 12:41:47.201  INFO 4010 --- [pool-1-thread-2] c.k.eccache.kafka.KafkaMessageProcessor  : =======保存课程信息redis缓存数据：【&#123;&quot;authorId&quot;:1,&quot;name&quot;:&quot;初二物理&quot;,&quot;pkid&quot;:1,&quot;price&quot;:19.99&#125;】=========</span><br></pre></td></tr></table></figure>
<p>此时再此请求分发层Nginx代理服务<a href="http://192.168.1.212/course/info?ecourseId=1，查看数据缓存层后台日志：" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，查看数据缓存层后台日志：</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20 12:44:56.516  INFO 4010 --- [nio-8080-exec-3] c.k.eccache.controller.CacheController   : =======从ehcache中查询课程信息=========</span><br><span class="line">2018-06-20 12:44:56.516  INFO 4010 --- [nio-8080-exec-3] c.k.eccache.controller.CacheController   : =======从ehcache中查询作者信息=========</span><br></pre></td></tr></table></figure>
<p>此时如果应用层Nginx cache未过期，浏览器仍然显示课程价格29.99。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 29.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>如果应用层Nginx cache已经过期，浏览器显示课程价格为19.99。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ecourse id: 1</span><br><span class="line">ecourse name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse price: 19.99</span><br><span class="line">ecourse author name: 鍒濅簩鐗╃悊</span><br><span class="line">ecourse author type: 2</span><br><span class="line">ecourse author addr: 鍖椾含</span><br><span class="line">ecourse author sex: 1</span><br><span class="line">ecourse author level: 8</span><br></pre></td></tr></table></figure>
<p>use case5：<br>浏览显示查询到的数据后，如果在Nginx cache过期时间内，停掉数据缓存服务，那么在浏览器刷新请求<a href="http://192.168.1.212/course/info?ecourseId=1，应用层Nginx从本地缓存中查询到数据，就不会再请求数据缓存服务，即使停掉数据缓存服务，浏览器也能够正常显示数据。" target="_blank" rel="noopener">http://192.168.1.212/course/info?ecourseId=1，应用层Nginx从本地缓存中查询到数据，就不会再请求数据缓存服务，即使停掉数据缓存服务，浏览器也能够正常显示数据。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接续《&lt;a href=&quot;http://www.forwardlee.com/2018/06/19/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-LUA%E5%8F%8C%E5%B1%82Ngnix%E6%9E%B6%E6%9E%84/&quot;&gt;基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略&lt;/a&gt;》&lt;/p&gt;
&lt;h1 id=&quot;应用架构设计&quot;&gt;&lt;a href=&quot;#应用架构设计&quot; class=&quot;headerlink&quot; title=&quot;应用架构设计&quot;&gt;&lt;/a&gt;应用架构设计&lt;/h1&gt;&lt;p&gt;Nginx请求分发层+Nginx应用层（nginx cache）+业务数据两级缓存服务接口（ehcache+redis）&lt;br&gt;&lt;img src=&quot;/2018/06/20/Nginx请求分发层和应用层双层架构模式下的应用层数据静态化策略/1.png&quot; alt=&quot;架构设计&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略</title>
    <link href="http://www.forwardlee.com/2018/06/19/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-LUA%E5%8F%8C%E5%B1%82Ngnix%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.forwardlee.com/2018/06/19/安装配置Nginx-LUA双层Ngnix架构/</id>
    <published>2018-06-19T09:20:51.000Z</published>
    <updated>2018-06-20T01:04:27.919Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="环境准备">环境准备</span></h1><p>台CentOS6.x<br>192.168.1.210<br>192.168.1.211<br>192.168.1.212<br>网络拓扑<br>210和211作为应用层web服务器<br>212作为网络请求分发代理服务器</p>
<h1><span id="step1安装linux依赖">Step1:安装Linux依赖</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y readline-devel pcre-devel openssl-devel gcc</span><br></pre></td></tr></table></figure>
<h1><span id="step2安装nginx-openresty">Step2:安装Nginx Openresty</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wget http://openresty.org/download/ngx_openresty-1.7.7.2.tar.gz  </span><br><span class="line">tar -xzvf ngx_openresty-1.7.7.2.tar.gz  </span><br><span class="line">cd /usr/servers/ngx_openresty-1.7.7.2/</span><br><span class="line"></span><br><span class="line">cd bundle/LuaJIT-2.1-20150120/  </span><br><span class="line">make clean &amp;&amp; make &amp;&amp; make install  </span><br><span class="line">ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit</span><br><span class="line"></span><br><span class="line">cd bundle  </span><br><span class="line">wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  </span><br><span class="line">tar -xvf 2.3.tar.gz  </span><br><span class="line"></span><br><span class="line">cd bundle  </span><br><span class="line">wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz  </span><br><span class="line">tar -xvf v0.3.0.tar.gz  </span><br><span class="line"></span><br><span class="line">cd /usr/servers/ngx_openresty-1.7.7.2  </span><br><span class="line">./configure --prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="step3检查安装并启动">Step3:检查安装并启动</span></h1><p>安装完成后有以下目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/servers/  </span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">/usr/servers/luajit</span><br><span class="line">/usr/servers/lualib</span><br><span class="line">/usr/servers/nginx</span><br></pre></td></tr></table></figure>
<p>检查nginx版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure>
<p>启动nginx:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
<h1><span id="step4nginx添加lua配置">Step4:Nginx添加LUA配置</span></h1><p>使LUA配置按照工程化目录结构进行配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/hello</span><br><span class="line"></span><br><span class="line">cp -r /usr/servers/lualib /usr/hello/</span><br></pre></td></tr></table></figure>
<p>打开nginx.conf配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/servers/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>在http部分添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lua_package_path &quot;/usr/hello/lualib/?.lua;;&quot;;  </span><br><span class="line">lua_package_cpath &quot;/usr/hello/lualib/?.so;;&quot;;  </span><br><span class="line">include /usr/hello/hello.conf;</span><br></pre></td></tr></table></figure>
<p>创建hello的lua配置和脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/hello/hello.conf</span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">    listen       80;  </span><br><span class="line">    server_name  _;  </span><br><span class="line">  </span><br><span class="line">    location /hello/test &#123;  </span><br><span class="line">        default_type &apos;text/html&apos;;   </span><br><span class="line">        content_by_lua_file /usr/hello/lua/test.lua;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编辑lua脚本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/hello/lua</span><br><span class="line"></span><br><span class="line">vi /usr/hello/lua/test.lua</span><br><span class="line"></span><br><span class="line">ngx.say(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure>
<p>Nginx检查配置是否正确</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 hello]# /usr/servers/nginx/sbin/nginx -t  </span><br><span class="line">nginx: the configuration file /usr/servers/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/servers/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<p>Nginx重新加载配置生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<h1><span id="step5访问lua配置的location路径">Step5:访问LUA配置的location路径</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.1.210/hello/test</span><br></pre></td></tr></table></figure>
<p>返回test.lua中脚本输出的“hello world”。</p>
<h1><span id="step6分发层nginx安装lua脚本实现请求分发">Step6:分发层Nginx安装LUA脚本实现请求分发</span></h1><p>我们作为一个流量分发的nginx，会发送http请求到后端的应用nginx上面去，所以要先引入lua http lib包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/lualib/resty/  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</span><br></pre></td></tr></table></figure>
<p>在分发层Nginx写LUA脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">nano /usr/hello/lua/test.lua</span><br><span class="line"></span><br><span class="line">local uri_args = ngx.req.get_uri_args()</span><br><span class="line">local ecourseId = uri_args[&quot;ecourseId&quot;]</span><br><span class="line"></span><br><span class="line">local host = &#123;&quot;192.168.1.210&quot;, &quot;192.168.1.211&quot;&#125;</span><br><span class="line">local hash = ngx.crc32_long(ecourseId)</span><br><span class="line">hash = (hash % 2) + 1</span><br><span class="line">backend = &quot;http://&quot;..host[hash]</span><br><span class="line"></span><br><span class="line">local paras = &quot;&quot;;</span><br><span class="line">local request_args_tab = ngx.req.get_uri_args()</span><br><span class="line">for k, v in pairs(request_args_tab) do</span><br><span class="line">    paras=paras..k..&quot;=&quot;..v..&quot;&amp;&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local requestPath = ngx.var.uri</span><br><span class="line">requestPath = requestPath..&quot;?&quot;..paras</span><br><span class="line"></span><br><span class="line">local http = require(&quot;resty.http&quot;)</span><br><span class="line">local httpc = http.new()</span><br><span class="line"></span><br><span class="line">local resp, err = httpc:request_uri(backend, &#123;</span><br><span class="line">    method = &quot;GET&quot;,</span><br><span class="line">    path = requestPath</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">if not resp then</span><br><span class="line">    ngx.say(&quot;request error :&quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(resp.body)</span><br><span class="line"></span><br><span class="line">httpc:close()</span><br></pre></td></tr></table></figure>
<p>Nginx重新加载配置生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>测试请求分发,在浏览器地址栏输入</p>
<p><a href="http://192.168.1.212/hello/test?ecourseId=1" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=1</a><br><a href="http://192.168.1.212/hello/test?ecourseId=2" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=2</a><br><a href="http://192.168.1.212/hello/test?ecourseId=3" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=3</a><br><a href="http://192.168.1.212/hello/test?ecourseId=4" target="_blank" rel="noopener">http://192.168.1.212/hello/test?ecourseId=4</a><br>查看返回的结果，请求被分发到应用层web服务器节点了。根据ecourseId与应用层web服务节点数取模，找到对应的应用层服务器节点。</p>
<h1><span id="step7按照相同的方法部署另外两台机器的nginx">Step7:按照相同的方法部署另外两台机器的Nginx</span></h1><p>安装过程，略…<br>应用层Nginx添加http请求功能包即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/hello/lualib/resty/  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</span><br></pre></td></tr></table></figure>
<h1><span id="补充lua脚本获取nginx-http请求的相关参数说明">补充：LUA脚本获取Nginx Http请求的相关参数说明</span></h1><p>1.获取当前请求的url相关信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">-- 这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI。</span><br><span class="line">local request_uri = ngx.var.request_uri</span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url==&quot;) .. tools.u8_to_gbk(cjson.encode(request_uri)) )</span><br><span class="line"></span><br><span class="line"> -- HTTP方法（如http，https）。按需使用，例：</span><br><span class="line"> local scheme = ngx.var.scheme server_addr</span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url scheme==&quot;) .. tools.u8_to_gbk(cjson.encode(scheme)) )</span><br><span class="line"></span><br><span class="line"> -- 服务器地址，在完成一次系统调用后可以确定这个值，如果要绕开系统调用，则必须在listen中指定地址并且使用bind参数。</span><br><span class="line"> local server_addr = ngx.var.server_addruri </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url server_addr==&quot;) .. tools.u8_to_gbk(cjson.encode(server_addr)) )</span><br><span class="line"></span><br><span class="line">-- 请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改。</span><br><span class="line"> local uri = ngx.var.uri </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url uri==&quot;) .. tools.u8_to_gbk(cjson.encode(uri)) )</span><br><span class="line"></span><br><span class="line"> -- 服务器名称</span><br><span class="line"> local server_name  = ngx.var.server_name  </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url server_name ==&quot;) .. tools.u8_to_gbk(cjson.encode(server_name )) </span><br><span class="line"></span><br><span class="line"> -- 请求到达服务器的端口号。</span><br><span class="line">local server_port  = ngx.var.server_name  </span><br><span class="line"> log(tools.gbk_to_u8(&quot;获取当前请求的url server_port ==&quot;) .. tools.u8_to_gbk(cjson.encode(server_port )) </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<p>2.获取发送请求端过来的url相关信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 获取远程的IP地址。</span><br><span class="line">local remote_addr  = ngx.var.remote_addr </span><br><span class="line"> log(m_uuid,tools.gbk_to_u8(&quot;获取发送请求过来的远程请求remote_addr ==&quot;) .. tools.u8_to_gbk(cjson.encode(remote_addr )) )</span><br><span class="line"></span><br><span class="line"> -- 获取远程的端口号</span><br><span class="line"> local remote_port  = ngx.var.remote_port  </span><br><span class="line"> log(m_uuid,tools.gbk_to_u8(&quot;获取发送请求过来的远程请求remote_port ==&quot;) .. tools.u8_to_gbk(cjson.encode(remote_port )) )</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;台CentOS6.x&lt;br&gt;192.168.1.210&lt;br&gt;192.168.1.211&lt;br&gt;192.168.1.212&lt;br&gt;网络拓扑&lt;br&gt;210和211作为应用层web服务器&lt;br&gt;212作为网络请求分发代理服务器&lt;/p&gt;
&lt;h1 id=&quot;Step1-安装Linux依赖&quot;&gt;&lt;a href=&quot;#Step1-安装Linux依赖&quot; class=&quot;headerlink&quot; title=&quot;Step1:安装Linux依赖&quot;&gt;&lt;/a&gt;Step1:安装Linux依赖&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y readline-devel pcre-devel openssl-devel gcc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Step2-安装Nginx-Openresty&quot;&gt;&lt;a href=&quot;#Step2-安装Nginx-Openresty&quot; class=&quot;headerlink&quot; title=&quot;Step2:安装Nginx Openresty&quot;&gt;&lt;/a&gt;Step2:安装Nginx Openresty&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://openresty.org/download/ngx_openresty-1.7.7.2.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf ngx_openresty-1.7.7.2.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/servers/ngx_openresty-1.7.7.2/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bundle/LuaJIT-2.1-20150120/  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make clean &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bundle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf 2.3.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bundle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf v0.3.0.tar.gz  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/servers/ngx_openresty-1.7.7.2  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure --prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://www.forwardlee.com/tags/Nginx/"/>
    
      <category term="LUA" scheme="http://www.forwardlee.com/tags/LUA/"/>
    
  </entry>
  
  <entry>
    <title>Redis LRU算法详情</title>
    <link href="http://www.forwardlee.com/2018/06/14/Redis-LRU%E7%AE%97%E6%B3%95%E8%AF%A6%E6%83%85/"/>
    <id>http://www.forwardlee.com/2018/06/14/Redis-LRU算法详情/</id>
    <published>2018-06-14T02:14:56.000Z</published>
    <updated>2018-06-14T03:25:26.116Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="什么是lru算法">什么是LRU算法</span></h1><p>LRU-Leaste Recently Use，最近使用最少。算法原理略。</p>
<h1><span id="redis-lru算法">Redis LRU算法</span></h1><p>redis在存储数据时达到最大内存设置maxmemory后，自身会清理数据，以减少内存使用量，保证Reids服务的正常状态。<br>Redis 内存使用策略maxmemory-policy可配置项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">noeviction 如果内存使用达到了maxmemory，client继续写入数据，那么Redis就直接报错给客户端</span><br><span class="line">allkeys-lru 移除掉最近最少使用的那些key对应的数据</span><br><span class="line">volatile-lru 仅对设置了过期时间的key进行LRU清理</span><br><span class="line">allkeys-random 随机删除一些key的数据</span><br><span class="line">volatile-random 随机删除一些设置了过期时间的key对应的数据</span><br><span class="line">volatile-ttl 删除哪些过期时间比较短的key对应的数据</span><br></pre></td></tr></table></figure>
<p>配置项多个，但实际应用场景中大多使用allkeys-lru策略</p>
<h1><span id="maxmemory-sample配置">maxmemory-sample配置</span></h1><p>Redis在进行LRU算法清理数据时，需要对多个key进行采样，选出采样key中最近使用最少的key进行数据清理，maxmemory-sample选项就是用来配置采样大小的。Redis给出了3\5\10三个可配置的值，配置为3执行LRU速度更快，但是精确率不高，5是一个速度和精确率适中的配置，10使得LRU算法精确率更高，但是会消耗更多的CPU</p>
<p><strong>在实际应用中，会选择配置10，消耗更多CPU以获得更精确的LRU数据清理</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;什么是lru算法&quot;&gt;什么是LRU算法&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;LRU-Leaste Recently Use，最近使用最少。算法原理略。&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;redis-lru算法&quot;&gt;Redis LRU算法&lt;/span&gt;&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-trib.rb工具的使用</title>
    <link href="http://www.forwardlee.com/2018/06/14/redis-trib-rb%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.forwardlee.com/2018/06/14/redis-trib-rb工具的使用/</id>
    <published>2018-06-14T01:52:43.000Z</published>
    <updated>2018-06-14T03:25:39.808Z</updated>
    
    <content type="html"><![CDATA[<p>【转】<a href="https://www.jianshu.com/p/21f67bd739cc" target="_blank" rel="noopener">https://www.jianshu.com/p/21f67bd739cc</a><br>【官方】<a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">http://www.redis.cn/topics/cluster-tutorial.html</a></p>
<h1><span id="参数配置">参数配置</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、create：创建集群</span><br><span class="line">2、check：检查集群</span><br><span class="line">3、info：查看集群信息</span><br><span class="line">4、fix：修复集群</span><br><span class="line">5、reshard：在线迁移slot</span><br><span class="line">6、rebalance：平衡集群节点slot数量</span><br><span class="line">7、add-node：将新节点加入集群</span><br><span class="line">8、del-node：从集群中删除节点</span><br><span class="line">9、set-timeout：设置集群节点间心跳连接的超时时间</span><br><span class="line">10、call：在集群全部节点上执行命令</span><br><span class="line">11、import：将外部redis数据导入集群</span><br></pre></td></tr></table></figure>
<h1><span id="创建集群">创建集群</span></h1><p>用户无需指定哪台节点为master，哪台节点为slave，因为redis内部算法帮我们实现了</p>
<p>create<br>–replicas # 可选参数，replicas表示每个master需要有几个slave。<br> 只有master节点的创建方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005</span><br></pre></td></tr></table></figure>
<p>使用 –replicas 1 创建 每个master带一个 slave 指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="检查集群情况check">检查集群情况check</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb check 192.168.66.2:7000    #后面的IP与端口,随便指定集群中的一个就行了。</span><br></pre></td></tr></table></figure>
<h1><span id="查看集群信息info">查看集群信息info</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb info 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[OK] 1 keys in 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br></pre></td></tr></table></figure>
<h1><span id="使用reshard在线迁移slot">使用reshard在线迁移slot</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">host:port：这个是必传参数，用来从一个节点获取整个集群信息，相当于获取集群信息的入口。</span><br><span class="line">--from &lt;arg&gt;：需要从哪些源节点上迁移slot，可从多个源节点完成迁移，以逗号隔开，传递的是节点的node id，还可以直接传递--from all，这样源节点就是集群的所有节点，不传递该参数的话，则会在迁移过程中提示用户输入。</span><br><span class="line">--to &lt;arg&gt;：slot需要迁移的目的节点的node id，目的节点只能填写一个，不传递该参数的话，则会在迁移过程中提示用户输入。</span><br><span class="line">--slots &lt;arg&gt;：需要迁移的slot数量，不传递该参数的话，则会在迁移过程中提示用户输入。</span><br><span class="line">--yes：设置该参数，可以在打印执行reshard计划的时候，提示用户输入yes确认后再执行reshard。</span><br><span class="line">--timeout &lt;arg&gt;：设置migrate命令的超时时间。</span><br><span class="line">--pipeline &lt;arg&gt;：定义cluster getkeysinslot命令一次取出的key数量，不传的话使用默认值为10。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb reshard --from all --to 80b661ecca260c89e3d8ea9b98f77edaeef43dcd --slots 11</span><br></pre></td></tr></table></figure>
<h1><span id="平衡集群节点slot数量rebalance">平衡集群节点slot数量rebalance</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host:port：这个是必传参数，用来从一个节点获取整个集群信息，相当于获取集群信息的入口。</span><br><span class="line">--weight &lt;arg&gt;：节点的权重，格式为node_id=weight，如果需要为多个节点分配权重的话，需要添加多个--weight &lt;arg&gt;参数，即--weight b31e3a2e=5 --weight 60b8e3a1=5，node_id可为节点名称的前缀，只要保证前缀位数能唯一区分该节点即可。没有传递–weight的节点的权重默认为1。</span><br><span class="line">--auto-weights：这个参数在rebalance流程中并未用到。</span><br><span class="line">--threshold &lt;arg&gt;：只有节点需要迁移的slot阈值超过threshold，才会执行rebalance操作。具体计算方法可以参考下面的rebalance命令流程的第四步。</span><br><span class="line">--use-empty-masters：rebalance是否考虑没有节点的master，默认没有分配slot节点的master是不参与rebalance的，设置--use-empty-masters可以让没有分配slot的节点参与rebalance。</span><br><span class="line">--timeout &lt;arg&gt;：设置migrate命令的超时时间。</span><br><span class="line">--simulate：设置该参数，可以模拟rebalance操作，提示用户会迁移哪些slots，而不会真正执行迁移操作。</span><br><span class="line">--pipeline &lt;arg&gt;：与reshar的pipeline参数一样，定义cluster getkeysinslot命令一次取出的key数量，不传的话使用默认值为10。</span><br></pre></td></tr></table></figure>
<h1><span id="增加一个主节点">增加一个主节点</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node 192.168.66.3:7006 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<p> 添加成功，但是并没有指定 slot ,所以必须 迁移slot节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb reshard 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<p><strong>提示一 ：How many slots do you want to move (from 1 to 16384)?<br>为了平衡每个master管理的slot的个数，所以输入 16384/master  的数量。如这里为4 那么就是 16384/4 = 4096个。</strong></p>
<p>输入 4096</p>
<p><strong>提示二：What is the receiving node ID?(接受的node ID是多少)<br>            890d2c8d989cce50e5fa48e37cd35738887f3f7d </strong><br>输入7006的ID</p>
<p><strong>提示三： Please enter all the source node IDs.<br>           Type ‘all’ to use all the nodes as source nodes for the hash slots.<br>           Type ‘done’ once you entered all the source nodes IDs.<br>                  （要从哪个节点中获取lost ？）</strong><br>不打算从特定的节点上取出指定数量的哈希槽， 那么可以输入 all，否则输入某个节点的 node ID </p>
<p>检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb check 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<h1><span id="增加一个从节点">增加一个从节点</span></h1><p>这样创建从节点会自动匹配主节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node --slave 127.0.0.1:7007 127.0.0.1:7000</span><br></pre></td></tr></table></figure>
<p>增加从节点的时候指定主节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node --slave --master-id 890d2c8d989cce50e5fa48e37cd35738887f3f7d 192.168.66.3:7008 192.168.66.2:7000</span><br></pre></td></tr></table></figure>
<h1><span id="从集群中删除节点del-node">从集群中删除节点del-node</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host:port：从该节点获取集群信息。</span><br><span class="line">node_id：需要删除的节点id。</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb del-node 192.168.66.2:7000 d5f6d1d17426bd564a6e309f32d0f5b96962fe53</span><br></pre></td></tr></table></figure>
<h1><span id="宕机情况">宕机情况</span></h1><p>当某个从节点挂掉之后，对于redis集群来说几乎没有什么影响，相当于这个从节点对应的 主节点少了一个备份而已。<br>当某一个主节点挂掉之后，redis 会从这个 主节点 的 多个从节点 中推选一个出来，担当master的工作，并且把之前依附在<br>主节点的从节点调整依附到新的master上。如果新任的master也挂掉并且他没有从节点了，那么这个集群也真正的挂掉了。<br>集群创建时 replicas 参数 指定情况。<br>使用 –replicas 1 参数时，如果节点数量<strong>少于六个</strong>。<br>报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*** ERROR: Invalid configuration for cluster creation.</span><br><span class="line">*** Redis Cluster requires at least 3 master nodes.</span><br><span class="line">*** This is not possible with 5 nodes and 1 replicas per node.</span><br><span class="line">*** At least 6 nodes are required.</span><br></pre></td></tr></table></figure>
<p>使用 –replicas 1 参数时，如果节点数量 大于六个，且为单数时。<br>这样会造成某个master拥有两个salve</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【转】&lt;a href=&quot;https://www.jianshu.com/p/21f67bd739cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/21f67bd739cc&lt;/a&gt;&lt;br&gt;【官方】&lt;a href=&quot;http://www.redis.cn/topics/cluster-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.redis.cn/topics/cluster-tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参数配置&quot;&gt;&lt;a href=&quot;#参数配置&quot; class=&quot;headerlink&quot; title=&quot;参数配置&quot;&gt;&lt;/a&gt;参数配置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、create：创建集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、check：检查集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、info：查看集群信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4、fix：修复集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5、reshard：在线迁移slot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6、rebalance：平衡集群节点slot数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7、add-node：将新节点加入集群&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8、del-node：从集群中删除节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9、set-timeout：设置集群节点间心跳连接的超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10、call：在集群全部节点上执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11、import：将外部redis数据导入集群&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;创建集群&quot;&gt;&lt;a href=&quot;#创建集群&quot; class=&quot;headerlink&quot; title=&quot;创建集群&quot;&gt;&lt;/a&gt;创建集群&lt;/h1&gt;&lt;p&gt;用户无需指定哪台节点为master，哪台节点为slave，因为redis内部算法帮我们实现了&lt;/p&gt;
&lt;p&gt;create&lt;br&gt;–replicas # 可选参数，replicas表示每个master需要有几个slave。&lt;br&gt; 只有master节点的创建方式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./redis-trib.rb create  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 –replicas 1 创建 每个master带一个 slave 指令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./redis-trib.rb create --replicas 1  192.168.66.2:7000 192.168.66.2:7001 192.168.66.2:7002 192.168.66.3:7003 192.168.66.3:7004 192.168.66.3:7005&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>数据库和缓存致数据不一致问题分析和解决方案</title>
    <link href="http://www.forwardlee.com/2018/06/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.forwardlee.com/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/</id>
    <published>2018-06-07T02:15:31.000Z</published>
    <updated>2018-06-07T04:39:16.589Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="低并发读写更新数据和删除缓存的双写导致数据不一致">低并发读写—更新数据和删除缓存的双写导致数据不一致</span></h1><p><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/1.png" alt="数据更新操作"><br>step1：更新数据库中的数据<br>step2：删除缓存<br>如果step1执行成功，step2执行失败，那么客户端获取缓存中的数据就是旧数据，而数据库中是新数据，造成数据不一致。</p>
<p><strong>解决方案：</strong>先删除缓存，在执行数据库更新，保证缓存和数据库中数据一致。</p>
<h1><span id="高并发读写更新数据和删除缓存双写导致数据不一致">高并发读写—更新数据和删除缓存双写导致数据不一致</span></h1><p>低并发的读写策略在高并发场景下也会出现数据不一致的问题，图片中展示的操作步骤就会出现此类问题。<br><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/2.png" alt="优化后的数据更新操作"><br>step1：删除缓存<br>step2：更新数据库</p>
<p>如果step1执行完，step2正在执行的过程中还未flush到数据库，此时，客户端来一个请求获取正在更新的数据，缓存中已经删除了该数据，那么服务端会转到后端服务从数据库中加载旧数据并存到缓存一份，恰巧缓存完成后，step2执行完成了，该数据在数据库被更新了，那么就导致数据库和缓存中的数据是不一致的。</p>
<p><strong>解决方案：</strong>把并发读写的的指令在服务层内存做成串行队列按顺序执行，在内存中执行效率高，不会明显影响数据服务的响应速度。把被执行更新操作的对象id做hash，然后根据队列数取模，对应该对象的操作指令队列。（可采取nginx的hash路由功能，保证在读取每个对象数据时，每次都从同一个内存队列中执行）</p>
<p>读写指令的内存队列：<br><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/3.png" alt="指令内存队列"></p>
<p>进一步优化，因为服务接口每次查询都会把数据放入缓存，那么有一个更新后堆积了大量的查询操作，就会造成数据读取性能。可以在查询操作在内存队列存储之前，先查找队列上一个指令是不是update操作，如果是update操作，那么就直接存储当前select操作，如果是select操作，那么就把当前的查询服务等待200ms后，等待上一个select完成把数据存入缓存，当前select转向查询缓存数据。</p>
<p>优化后，出现update指令堆积的内存队列：<br><img src="/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/4.png" alt="指令内存队列"></p>
<p>PS：需要做数据演练，监视内存队列中update指令和最后一个select指令的个数，判断最后一个select需要等待前面n个update操作完成后的时间间隔t（单个update请求执行时间t/n应该小于10ms），t不能超过系统预期要求（通常要求一个读请求在200ms内完成）。如果内存队列堆积的update操作指令数据量太大，那么就需要考虑增加更多机器处理内存队列中的update操作，减少队列堆积量，提高服务接口的响应速度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;低并发读写更新数据和删除缓存的双写导致数据不一致&quot;&gt;低并发读写—更新数据和删除缓存的双写导致数据不一致&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/06/07/数据库和缓存双写导致数据不一致问题分析和解决方案/1.png&quot; alt=&quot;数
    
    </summary>
    
    
      <category term="数据不一致" scheme="http://www.forwardlee.com/tags/%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4/"/>
    
  </entry>
  
  <entry>
    <title>Redis生产环境常见问题及优化</title>
    <link href="http://www.forwardlee.com/2018/06/06/Redis%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>http://www.forwardlee.com/2018/06/06/Redis生产环境常见问题及优化/</id>
    <published>2018-06-06T06:33:39.000Z</published>
    <updated>2018-06-06T09:20:09.813Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="fork导致的redis延时增大">fork导致的Redis延时增大</span></h1><p>Redis在进行RDB和AOF持久化时，为了使主进程继续提供读写服务，Redis就会fork一个子进程进行RDB和AOF持久化，子进程会拷贝Redis主进程的全量数据，此时Redis会阻塞执行读写服务，如果Redis中存储的数据量过大，那么在拷贝时耗时会增大，因为阻塞导致Redis的响应速度从几毫秒延迟到几百或者达到1秒。</p>
<p><strong>解决方案：</strong>单个Redis实例分配的内存空间不要大于10G，降低fork给Redis带来的延迟影响</p>
<h1><span id="一主多从导致的复制风暴问题">一主多从导致的复制风暴问题</span></h1><p>如果一个Master带有n多个Slava，可能会出现Slave在某一个时间节点，同时对Master进行复制，那么就会导致网络带宽被复制数据占满，导致Redis服务不可用。</p>
<p><strong>解决方案：</strong>把围绕一个Master创建n个Slave的网络拓扑结构进行优化，减少1个Master的Slave节点。Redis集群只支持一层Slave，如果要使用更多的Slave节点，那么就不能使用集群，而使用Redis的主从复制能力进行纵向扩展，给Slave节点创建Slave节点，使Redis节点成树形结构。</p>
<a id="more"></a>
<h1><span id="aof持久化导致的redis阻塞问题">AOF持久化导致的Redis阻塞问题</span></h1><p>Redis的AOF持久化方式，把数据以Redis写指令日志的形式先被写入os cache，然后进每秒进行fsync操作，把数据从os cache落入磁盘。Redis自身会对fsync的状态进行检查，如果两次fsync操作的时间间隔超过2s，那么Redis的写数据服务就会被阻塞，整个Redis的写服务就会被严重拖慢。</p>
<p><strong>解决方案：</strong> 造成两次fsync操作的间隔超过两秒，是因为磁盘的I/O性能不足所导致数据不能高效地从os cache落入磁盘，可以通过更换SSD固态硬盘，提高磁盘的I/O来提高fsync的数据写入速度，减少延迟。</p>
<h1><span id="主从复制的数据同步状态延迟较大">主从复制的数据同步状态延迟较大</span></h1><p>Redis在主从复制过程中，可能因为网络等例外因素导致主从复制延迟过大问题，影响Redis的数据一致性。</p>
<p><strong>解决方案：</strong>人为介入，写定时任务脚本检查主从复制的offset值之间的差值，当差值达到预设阈值时，进行报警通知，排查估值，使主从复制的数据延迟缩小到有效范围内。</p>
<h1><span id="redis申请内存的linux内核参数优化-vmovercommit_memory">Redis申请内存的linux内核参数优化-vm.overcommit_memory</span></h1><p>看一下redis启动日志的警告提醒：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">25483:M 27 May 13:41:39.856 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. </span><br><span class="line">To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</span><br></pre></td></tr></table></figure>
<p>0：检查有没有足够的内存，没有的话申请内存失败。例如fork子进程时申请内存，可能因为申请不到内存导致fork操作失败。<br>1：允许使用内存，直到用完为止。<strong>常用配置</strong><br>2：内存地址使用率不能超过swap+50%</p>
<p>按照redis的警告提醒进行修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/overcommit_memory</span><br><span class="line">echo &quot;vm.overcommit_memory=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl vm.overcommit_memory=1</span><br></pre></td></tr></table></figure>
<h1><span id="redis申请内存的linux内核参数优化-swappiness">Redis申请内存的linux内核参数优化-swappiness</span></h1><p>设置linux在内存不足时，是否杀掉进程以获得更多空间。<br>查看linux内核版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure>
<p>linux内核版本&lt;3.5，swappiness设置为0，<br>linux内核版本&gt;=3.5，swappiness设置为1，<br>这样在内存不足时lunix进行swap操作，也不会杀掉进程，保证Redis进程不会被linux杀掉。</p>
<p>修改方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/vm/swappiness</span><br><span class="line">echo vm.swappiness=0 &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<h1><span id="linux打开的文件句柄数修改">linux打开的文件句柄数修改</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25525:M 27 May 15:48:29.008 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br></pre></td></tr></table></figure>
<p>linux系统默认的打开句柄数最大为1024，修改为10032。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n 10032 10032</span><br></pre></td></tr></table></figure>
<h1><span id="linux内核进行tcp-socket连接通信参数优化-tcp-backlog">linux内核进行TCP Socket连接通信参数优化-tcp backlog</span></h1><p>backlog在Redis主从复制时，用来缓存每次进行socket连接复制的数据和offset。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25483:M 27 May 13:41:39.856 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br></pre></td></tr></table></figure>
<p>修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 511 &gt;&gt; /proc/sys/net/core/somaxconn</span><br></pre></td></tr></table></figure>
<p>PS:TCP socket服务开发的4个步骤 socket-&gt;bind-&gt;listen-&gt;accept<br>调用listen函数时,有一个backlog参数，此时TCP请求的连接状态是ESTABLISHED，TCP backlog值表示的就是ESTABLISHED状态的请求连接所在的队列大小，在linux内核中/proc/sys/net/core/somaxconn进行设置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fork导致的Redis延时增大&quot;&gt;&lt;a href=&quot;#fork导致的Redis延时增大&quot; class=&quot;headerlink&quot; title=&quot;fork导致的Redis延时增大&quot;&gt;&lt;/a&gt;fork导致的Redis延时增大&lt;/h1&gt;&lt;p&gt;Redis在进行RDB和AOF持久化时，为了使主进程继续提供读写服务，Redis就会fork一个子进程进行RDB和AOF持久化，子进程会拷贝Redis主进程的全量数据，此时Redis会阻塞执行读写服务，如果Redis中存储的数据量过大，那么在拷贝时耗时会增大，因为阻塞导致Redis的响应速度从几毫秒延迟到几百或者达到1秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;单个Redis实例分配的内存空间不要大于10G，降低fork给Redis带来的延迟影响&lt;/p&gt;
&lt;h1 id=&quot;一主多从导致的复制风暴问题&quot;&gt;&lt;a href=&quot;#一主多从导致的复制风暴问题&quot; class=&quot;headerlink&quot; title=&quot;一主多从导致的复制风暴问题&quot;&gt;&lt;/a&gt;一主多从导致的复制风暴问题&lt;/h1&gt;&lt;p&gt;如果一个Master带有n多个Slava，可能会出现Slave在某一个时间节点，同时对Master进行复制，那么就会导致网络带宽被复制数据占满，导致Redis服务不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;把围绕一个Master创建n个Slave的网络拓扑结构进行优化，减少1个Master的Slave节点。Redis集群只支持一层Slave，如果要使用更多的Slave节点，那么就不能使用集群，而使用Redis的主从复制能力进行纵向扩展，给Slave节点创建Slave节点，使Redis节点成树形结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cluster维护</title>
    <link href="http://www.forwardlee.com/2018/06/01/Redis-Cluster%E7%BB%B4%E6%8A%A4/"/>
    <id>http://www.forwardlee.com/2018/06/01/Redis-Cluster维护/</id>
    <published>2018-06-01T08:49:11.000Z</published>
    <updated>2018-06-01T10:08:18.908Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="增加redis-cluster-master节点">增加Redis Cluster Master节点</span></h1><p>在安装了Redis Cluster集群环境机器上执行增加节点命令。<br>redis-trib.rb add-node NEW_NODE ANY_NODE_OF_CLUSTER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb add-node 192.168.1.212:7007 192.168.1.212:7005</span><br><span class="line"></span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb add-node 192.168.1.212:7007 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Adding node 192.168.1.212:7007 to cluster 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.211:7003)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.212:7007 to make it join the cluster.</span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>
<p>再次查看集群状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb check 192.168.1.211:7003</span><br><span class="line"></span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb  check 192.168.1.212:7007</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.212:7007)</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是新增Master节点的slots=0，那么需要重新规划Redis Cluster Hash Slots.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb reshard 192.168.1.211:7004</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">How many slots do you want to move (from 1 to 16384)?</span><br></pre></td></tr></table></figure>
<p>迁移多少个Slot，这里是指新的Master节点分配多少个Slot，可以用16384除以4（4个Master节点）得到的整数结,当然也可以根据实际情况配置合适的Slot个数。</p>
<p>后面还需要输入从哪几个Master源获取Slot，输入Master Node ID，最后一个需要结束时输入done，Redis Cluster重新规划Hash Slot。</p>
<p>查看重新规划后的Slot，每个Master都是4096个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb check 192.168.1.212:7005</span><br><span class="line"></span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.212:7005</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.212:7005)</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6827-10922 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="给master节点增加slave">给Master节点增加Slave</span></h1><p>redis-trib.rb add-node –slave –master-id MASTER_ID NEW_NODE ANY_NODE_OF_CLUSTER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb add-node --slave --master-id 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7008 192.168.1.211:7003</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Adding node 192.168.1.211:7008 to cluster 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.211:7003)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6827-10922 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.211:7008 to make it join the cluster.</span><br><span class="line">Waiting for the cluster to join.</span><br><span class="line">&gt;&gt;&gt; Configure node as replica of 192.168.1.211:7004.</span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>
<p>检查新增的slave节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.211:7003</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.211:7003)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6827-10922 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007</span><br><span class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates db864e7965225405f65f36c1cd0a0bb32f2df6ce</span><br><span class="line">S: 7fe0f90658458209f39578981b32d24a223e26b1 192.168.1.211:7008</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="删除集群节点">删除集群节点</span></h1><p>step1:迁移要删除节点Hash Slot<br>redis-trib.rb reshard ANY_NODE_OF_CLUSTER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb reshard 192.168.1.211:7004</span><br></pre></td></tr></table></figure>
<p>把要删除的Master节点Slots分配给其他Master</p>
<p>step2：删除节点<br>redis-trib.rb del-node ANY_NODE_OF_CLUSTER DEL_NODE_ID</p>
<p>删除新增的7007节点（Master节点）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb del-node 192.168.1.210:7001 db864e7965225405f65f36c1cd0a0bb32f2df6ce</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Removing node db864e7965225405f65f36c1cd0a0bb32f2df6ce from cluster 192.168.1.210:7001</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br></pre></td></tr></table></figure>
<p>step3：查看集群</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.210:7001</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:5461-6825,12288-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6826-12287 (5462 slots) master</span><br><span class="line">   2 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 7fe0f90658458209f39578981b32d24a223e26b1 192.168.1.211:7008</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>被删除的Master节点的Slave节点会自动被Redis Cluster挂在到其他Maser节点上去，本例中看到Redis Cluster 7003节点多了一个从节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:6826-12287 (5462 slots) master</span><br><span class="line">   2 additional replica(s)</span><br></pre></td></tr></table></figure>
<p>在删除的7007节点机器上查看redis进程发现，7007的Redis已经被Redis Cluster自动关闭了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache03 init.d]# ps -ef | grep redis</span><br><span class="line">root     25143     1  0 May26 ?        00:00:47 /usr/local/bin/redis-server 192.168.1.212:7005 [cluster]</span><br><span class="line">root     25149     1  0 May26 ?        00:00:30 /usr/local/bin/redis-server 192.168.1.212:7006 [cluster]</span><br><span class="line">root     25272 25091  0 03:57 pts/1    00:00:00 grep redis</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;增加Redis-Cluster-Master节点&quot;&gt;&lt;a href=&quot;#增加Redis-Cluster-Master节点&quot; class=&quot;headerlink&quot; title=&quot;增加Redis Cluster Master节点&quot;&gt;&lt;/a&gt;增加Redis Cluster Master节点&lt;/h1&gt;&lt;p&gt;在安装了Redis Cluster集群环境机器上执行增加节点命令。&lt;br&gt;redis-trib.rb add-node NEW_NODE ANY_NODE_OF_CLUSTER&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-trib.rb add-node 192.168.1.212:7007 192.168.1.212:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@eshop-cache01 init.d]# redis-trib.rb add-node 192.168.1.212:7007 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Adding node 192.168.1.212:7007 to cluster 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 192.168.1.211:7003)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:5461-10922 (5462 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 389568b7d660edfb016521d2c06aa898733a28c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 434f96e83bea38adeb97a5df293da3b008f76768&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates b843b0530233e861dc674f1d78856a0de1f5c438&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:10923-16383 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:0-5460 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All nodes agree about slots configuration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check for open slots...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check slots coverage...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All 16384 slots covered.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Send CLUSTER MEET to node 192.168.1.212:7007 to make it join the cluster.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] New node added correctly.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次查看集群状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-trib.rb check 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@eshop-cache01 init.d]# redis-trib.rb  check 192.168.1.212:7007&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 192.168.1.212:7007)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: db864e7965225405f65f36c1cd0a0bb32f2df6ce 192.168.1.212:7007&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:5461-10922 (5462 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:0-5460 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 389568b7d660edfb016521d2c06aa898733a28c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots:10923-16383 (5461 slots) master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1 additional replica(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates b843b0530233e861dc674f1d78856a0de1f5c438&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   slots: (0 slots) slave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   replicates 434f96e83bea38adeb97a5df293da3b008f76768&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All nodes agree about slots configuration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check for open slots...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; Check slots coverage...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[OK] All 16384 slots covered.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>RedisCluster配置和部署--创建多master多slave高可用集群环境</title>
    <link href="http://www.forwardlee.com/2018/06/01/RedisCluster%E9%85%8D%E7%BD%AE%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.forwardlee.com/2018/06/01/RedisCluster配置和部署/</id>
    <published>2018-06-01T02:37:51.000Z</published>
    <updated>2018-06-01T10:04:40.208Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的主从配置的主要作用是实现读写分离，并且可以通过配置一主多从来实现Redis横向扩展，保证Redis读取数据的QPS能够达到10W+。<strong>如果应用的Redis写数据量QPS只需要几万，而读数据要几十万或上百万QPS，那么Redis Sentinel集群就可以满足业务需求，一主多从，而且可以实现自动Master主备切换，实现高可用。</strong>当写数据的QPS需要几十万或者上百万QPS，或者写数据量达到1T以上的场景，Sentinel的一主多从就不能满足业务需求，此时需要更多的Master来支撑写操作。</p>
<p>Redis Cluster实现多主多从的集群架构，并且能够进行自动故障节点转移和恢复，并支持多Master节点写入，能够支撑更大数据量的写操作。虽然Redis Cluster实现了读写分离的主从结构，但是Redis的客户端Jedis操作对读写分离支持不够完善，需要对Jedis进行扩展才能支持读写分离。而且Redis Cluster本身slave节点不能直接读取数据，需要先执行readonly命令，再读取数据。所以<strong>Redis Cluster的重点在实现Master节点的横向扩展支撑更大数据量，能够通过Master节点实现读写操作，Slave节点的作用主要用是数据热备和在Master节点故障时的主备自动切换，保证Redis Cluster的高可用。</strong></p>
<a id="more"></a>
<h1><span id="创建配置文件">创建配置文件</span></h1><p>Redis Cluster的用处可以实现多主多从，实现读写分离，实现Redis高可用。</p>
<p>官方推荐至少3个master，3个slave，这样可以让数据冗余1份。</p>
<p>需要n个节点的redis集群，就创建n份redis配置文件。For example：7001.conf 7002.conf 7003.conf 7004.conf 7005.conf 7006.conf</p>
<p>创建备用目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /etc/redis-cluter</span><br><span class="line">mkdir -pv /var/log/redis</span><br><span class="line">mkdir -pv /var/redis/7001</span><br><span class="line">mv /usr/local/common/redis-3.28/redis.conf /etc/redis/7001.conf</span><br><span class="line">vi /etc/redis/7001.conf</span><br></pre></td></tr></table></figure>
<p>修改7001.conf以下配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 7001</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /etc/redis-cluster/node-7001.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line">dir /var/redis/7001</span><br><span class="line">logfile /var/log/redis/7001.log</span><br><span class="line">bind 192.168.1.210</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<h1><span id="创建启动脚本">创建启动脚本</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/init.d/redis_6379 /etc/init.d/redis_7001</span><br><span class="line"></span><br><span class="line">vi redis_7001</span><br></pre></td></tr></table></figure>
<p>修改启动脚本中使用的端口号即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">chkconfig redis_7001 on</span><br><span class="line"></span><br><span class="line">REDISPORT=7001</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis_7001 start</span><br></pre></td></tr></table></figure>
<h1><span id="创建集群">创建集群</span></h1><p>step1：安装ruby环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++ patch readline readline-devel zlib zlib-devel \</span><br><span class="line">   libyaml-devel libffi-devel openssl-devel make \</span><br><span class="line">   bzip2 autoconf automake libtool bison iconv-devel sqlite-devel</span><br><span class="line">   </span><br><span class="line">wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.4.tar.gz</span><br><span class="line">tar zxf ruby-2.3.4.tar.gz</span><br><span class="line">cd ruby-2.3.4</span><br><span class="line">./configure --prefix=/usr/local/ruby</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cd /usr/local/ruby</span><br><span class="line">cp bin/ruby /usr/local/bin/</span><br><span class="line">cp bin/gem /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>step2：使用ruby安装redis集群redis-trib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://rubygems.org/downloads/redis-3.3.0.gem</span><br><span class="line">gem install -l redis-3.3.0.gem</span><br></pre></td></tr></table></figure>
<p>此时在redis-3.2.8/src/下出现一个redis-trib.rb文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/common/redis-3.2.8/src/redis-trib.rb /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>使用redis-trib.rb创建集群，–replicas 1表示每个master有1个slave，并且会让master和slave尽量不在一台机器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb create --replicas 1 192.168.1.210:7001 192.168.1.210:7002 192.168.1.211:7003 192.168.1.211:7004 192.168.1.212:7005 192.168.1.212:7006</span><br></pre></td></tr></table></figure>
<p>输出以下集群信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">192.168.1.210:7001</span><br><span class="line">192.168.1.211:7003</span><br><span class="line">192.168.1.212:7005</span><br><span class="line">Adding replica 192.168.1.211:7004 to 192.168.1.210:7001</span><br><span class="line">Adding replica 192.168.1.210:7002 to 192.168.1.211:7003</span><br><span class="line">Adding replica 192.168.1.212:7006 to 192.168.1.212:7005</span><br><span class="line">M: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">S: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   replicates 279addebc5ef0f0d7beef81d86201e3f8874fbd7</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">M: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 279addebc5ef0f0d7beef81d86201e3f8874fbd7</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="集群创建成功">集群创建成功</span></h1><p>集群环境支持master+slave的读写分离，支持master宕机的，slave自动切换成master，支持Redis Hash Slot分布式算法，支持Redis服务高可用。</p>
<p>查看集群状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# redis-trib.rb check 192.168.1.210:7001</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">M: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 279addebc5ef0f0d7beef81d86201e3f8874fbd7</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>干掉其中一个master，在看集群状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# ps -ef | grep redis</span><br><span class="line">root      2300     1  0 12:16 ?        00:00:05 /usr/local/bin/redis-server 192.168.1.210:7001 [cluster]</span><br><span class="line">root      2309     1  0 12:16 ?        00:00:06 /usr/local/bin/redis-server 192.168.1.210:7002 [cluster]</span><br><span class="line">root     16856  2229  0 13:54 pts/2    00:00:00 grep redis</span><br><span class="line">[root@eshop-cache01 src]# kill -9 2300</span><br><span class="line">[root@eshop-cache01 src]# rm -rf /var/run/redis_7001.pid </span><br><span class="line">[root@eshop-cache01 src]# redis-trib.rb check 192.168.1.210:7002</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7002)</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   0 additional replica(s)</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>恢复启动7001的redis，再看集群状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# cd /etc/init.d/</span><br><span class="line">[root@eshop-cache01 init.d]# ./redis_7001 start</span><br><span class="line">Starting Redis server...</span><br><span class="line">[root@eshop-cache01 init.d]# redis-trib.rb check 192.168.1.210:7001</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.210:7001)</span><br><span class="line">S: 279addebc5ef0f0d7beef81d86201e3f8874fbd7 192.168.1.210:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 389568b7d660edfb016521d2c06aa898733a28c0</span><br><span class="line">S: d2e15ab71bbe2cca6cce19a5bacd92944368d230 192.168.1.210:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 434f96e83bea38adeb97a5df293da3b008f76768</span><br><span class="line">M: b843b0530233e861dc674f1d78856a0de1f5c438 192.168.1.212:7005</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 434f96e83bea38adeb97a5df293da3b008f76768 192.168.1.211:7003</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 389568b7d660edfb016521d2c06aa898733a28c0 192.168.1.211:7004</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 70ae536a26cd28807a41b2009755f613d9691322 192.168.1.212:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b843b0530233e861dc674f1d78856a0de1f5c438</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h1><span id="redis集群数据操作">Redis集群数据操作</span></h1><p>数据插入会根据key的hash值与16384取摩，分配到固定的slot值所在的master节点，例如加入k1 v1可以存在7001节点，k2 v2只能存在7005节点，那么通过7001节点的客户端操作set k1 v1可以存入，但是set k2 v2就会返回数据要存入哪个master节点的路由信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-cli -h 192.168.1.211 -p 7003</span><br><span class="line">192.168.1.211:7003&gt; set k2 v2</span><br><span class="line">(error) MOVED 449 192.168.1.211:7004</span><br></pre></td></tr></table></figure>
<p>这样操作数据会很麻烦，不过redis cluster为了能让redis操作起来更简单，可以进行一下操作。在使用redis-cli连接redis cluster时，加上-c的这个参数就可以了。操作会返回key的hash slot值，并带有存储到哪个master节点的路由信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-cli -h 192.168.1.211 -p 7003 -c</span><br><span class="line">192.168.1.211:7003&gt; set k2 v2</span><br><span class="line">-&gt; Redirected to slot [449] located at 192.168.1.211:7004</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>查看master下的slave节点，并在slave节点读取数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.211:7003&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.1.210,port=7002,state=online,offset=16769,lag=1</span><br><span class="line">master_repl_offset:16769</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:16768</span><br></pre></td></tr></table></figure>
<p>连接slave节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 init.d]# redis-cli -h 192.168.1.210 -p 7002</span><br><span class="line">192.168.1.210:7002&gt; get k4</span><br><span class="line">(error) MOVED 8455 192.168.1.211:7003</span><br></pre></td></tr></table></figure>
<p>直接获取k4的值，会提示需要从master节点7003获取的错误提示。此时需要先发送readonly指令，再执行get操作即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.210:7002&gt; readonly</span><br><span class="line">OK</span><br><span class="line">192.168.1.210:7002&gt; get k4</span><br><span class="line">&quot;v4&quot;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis的主从配置的主要作用是实现读写分离，并且可以通过配置一主多从来实现Redis横向扩展，保证Redis读取数据的QPS能够达到10W+。&lt;strong&gt;如果应用的Redis写数据量QPS只需要几万，而读数据要几十万或上百万QPS，那么Redis Sentinel集群就可以满足业务需求，一主多从，而且可以实现自动Master主备切换，实现高可用。&lt;/strong&gt;当写数据的QPS需要几十万或者上百万QPS，或者写数据量达到1T以上的场景，Sentinel的一主多从就不能满足业务需求，此时需要更多的Master来支撑写操作。&lt;/p&gt;
&lt;p&gt;Redis Cluster实现多主多从的集群架构，并且能够进行自动故障节点转移和恢复，并支持多Master节点写入，能够支撑更大数据量的写操作。虽然Redis Cluster实现了读写分离的主从结构，但是Redis的客户端Jedis操作对读写分离支持不够完善，需要对Jedis进行扩展才能支持读写分离。而且Redis Cluster本身slave节点不能直接读取数据，需要先执行readonly命令，再读取数据。所以&lt;strong&gt;Redis Cluster的重点在实现Master节点的横向扩展支撑更大数据量，能够通过Master节点实现读写操作，Slave节点的作用主要用是数据热备和在Master节点故障时的主备自动切换，保证Redis Cluster的高可用。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Redis集群" scheme="http://www.forwardlee.com/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Sentinels哨兵管理</title>
    <link href="http://www.forwardlee.com/2018/05/31/Sentinels%E5%93%A8%E5%85%B5%E7%AE%A1%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/05/31/Sentinels哨兵管理/</id>
    <published>2018-05-31T10:58:16.000Z</published>
    <updated>2018-05-31T12:14:04.007Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="删除哨兵节点">删除哨兵节点</span></h1><p>step1：停掉哨兵进程<br>ps -ef  | grep redis-sentinel<br>kill -9 PROCESSID<br>step2：过一会，在其他哨兵节点执行哨兵重置，清理旧哨兵的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 ~]# redis-cli -h 192.168.1.210 -p 5000</span><br><span class="line">192.168.1.210:5000&gt; sentinel reset * </span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
<p>step3：在所有哨兵节点上执行以下命令，查看所有的哨兵数量是否一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel master mymaster</span><br></pre></td></tr></table></figure>
<h1><span id="redis的slave节点下线">Redis的slave节点下线</span></h1><p>停掉或删除Redis服务后，停掉哨兵节点，在其他所有哨兵节点上执行sentinel reset mymaster。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;删除哨兵节点&quot;&gt;删除哨兵节点&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;step1：停掉哨兵进程&lt;br&gt;ps -ef  | grep redis-sentinel&lt;br&gt;kill -9 PROCESSID&lt;br&gt;step2：过一会，在其他哨兵节点执行哨兵重置，清理旧
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Sentinel" scheme="http://www.forwardlee.com/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>使用Sentinel（哨兵）实现Redis主从切换的机制原理</title>
    <link href="http://www.forwardlee.com/2018/05/31/%E4%BD%BF%E7%94%A8Sentinel%EF%BC%88%E5%93%A8%E5%85%B5%EF%BC%89%E5%AE%9E%E7%8E%B0Redis%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E7%9A%84%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/05/31/使用Sentinel（哨兵）实现Redis主从切换的机制原理/</id>
    <published>2018-05-31T07:08:18.000Z</published>
    <updated>2018-05-31T12:13:55.105Z</updated>
    
    <content type="html"><![CDATA[<p>哨兵-Sentinel，用于监控和管理Redis集群的高可用中间件。</p>
<h1><span id="哨兵配置和启动">哨兵配置和启动</span></h1><p>创建需要的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /etc/sentinel</span><br><span class="line">mkdir -pv /var/sentinel/5000</span><br><span class="line">mkdir -pv /var/log/sentinel/5000/</span><br><span class="line"></span><br><span class="line">cp /usr/local/common/redis-3.2.8/sentinel.conf /etc/sentinel/5000.conf</span><br></pre></td></tr></table></figure>
<p>5000.conf哨兵配置,可以配置多份，监控多个redis。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#守护进程启动</span><br><span class="line">daemonize yes</span><br><span class="line">#哨兵日志</span><br><span class="line">logfile /var/log/sentinel/5000</span><br><span class="line">#哨兵绑定本机IP</span><br><span class="line">bind 192.168.1.212 </span><br><span class="line">#哨兵服务端口号</span><br><span class="line">port 5002</span><br><span class="line">#sentinel工作空间</span><br><span class="line">dir /var/sentinel/5000/</span><br><span class="line">#哨兵监控的master配置信息 master_redis_name master_redis_ip master_redis_port quorum</span><br><span class="line">sentinel monitor mymaster 192.168.1.210 6379 2</span><br><span class="line">#哨兵给master发送ping指令的超时时间，用来确定master的主观宕机sdown</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000 </span><br><span class="line">#哨兵执行slave切换成master的失败超时，新的哨兵接替执行</span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line">#slave切换成master后，设置n个slave节点同时连接新master进行数据复制</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br></pre></td></tr></table></figure>
<p>哨兵启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /etc/sentinel/5000.conf</span><br><span class="line"></span><br><span class="line">2083:X 27 May 07:29:50.702 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &apos;&apos;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &apos;&apos;-._           Redis 3.2.8 (00000000/0) 32 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &apos;&apos;-._                                   </span><br><span class="line"> (    &apos;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&apos;` _.-&apos;|     Port: 5000</span><br><span class="line"> |    `-._   `._    /     _.-&apos;    |     PID: 2083</span><br><span class="line">  `-._    `-._  `-./  _.-&apos;    _.-&apos;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </span><br><span class="line">      `-._    `-.__.-&apos;    _.-&apos;                                       </span><br><span class="line">          `-._        _.-&apos;                                           </span><br><span class="line">              `-.__.-&apos;                                               </span><br><span class="line"></span><br><span class="line">2083:X 27 May 07:29:50.703 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">2083:X 27 May 07:29:50.703 # Sentinel ID is 79c3f195844be0b84babec19b2fa8a84cc07190d</span><br><span class="line">2083:X 27 May 07:29:50.703 # +monitor master mymaster 192.168.1.210 6379 quorum 2</span><br><span class="line">2083:X 27 May 07:29:50.704 * +slave slave 192.168.1.211:6379 192.168.1.211 6379 @ mymaster 192.168.1.210 6379</span><br><span class="line">2083:X 27 May 07:29:50.714 * +slave slave 192.168.1.212:6379 192.168.1.212 6379 @ mymaster 192.168.1.210 6379</span><br><span class="line">2083:X 27 May 07:30:22.643 * +sentinel sentinel 6e8c9dbc97a385acbbb2cd640e63b0370d1a5c31 192.168.1.211 5000 @ mymaster 192.168.1.210 6379</span><br><span class="line">2083:X 27 May 07:30:43.491 * +sentinel sentinel b273c5b89b90f01ca5b90bd167a8092dedfae69a 192.168.1.212 5000 @ mymaster 192.168.1.210 6379</span><br><span class="line">2083:X 27 May 07:30:51.041 * +fix-slave-config slave 192.168.1.211:6379 192.168.1.211 6379 @ mymaster 192.168.1.210 6379</span><br></pre></td></tr></table></figure>
<p>连接并查看哨兵信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.1.210 -p 5000</span><br><span class="line">192.168.1.210:5000&gt; sentinel master mymaster</span><br><span class="line"> 1) &quot;name&quot;</span><br><span class="line"> 2) &quot;mymaster&quot;</span><br><span class="line"> 3) &quot;ip&quot;</span><br><span class="line"> 4) &quot;192.168.1.210&quot;</span><br><span class="line"> 5) &quot;port&quot;</span><br><span class="line"> 6) &quot;6379&quot;</span><br><span class="line"> 7) &quot;runid&quot;</span><br><span class="line"> 8) &quot;8e990a05ba6ab1e915870dffc9184b689e960c7d&quot;</span><br><span class="line"> 9) &quot;flags&quot;</span><br><span class="line">10) &quot;master&quot;</span><br><span class="line">11) &quot;link-pending-commands&quot;</span><br><span class="line">12) &quot;0&quot;</span><br><span class="line">13) &quot;link-refcount&quot;</span><br><span class="line">14) &quot;1&quot;</span><br><span class="line">15) &quot;last-ping-sent&quot;</span><br><span class="line">16) &quot;0&quot;</span><br><span class="line">17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">18) &quot;394&quot;</span><br><span class="line">19) &quot;last-ping-reply&quot;</span><br><span class="line">20) &quot;394&quot;</span><br><span class="line">21) &quot;down-after-milliseconds&quot;</span><br><span class="line">22) &quot;5000&quot;</span><br><span class="line">23) &quot;info-refresh&quot;</span><br><span class="line">24) &quot;159&quot;</span><br><span class="line">25) &quot;role-reported&quot;</span><br><span class="line">26) &quot;master&quot;</span><br><span class="line">27) &quot;role-reported-time&quot;</span><br><span class="line">28) &quot;381542&quot;</span><br><span class="line">29) &quot;config-epoch&quot;</span><br><span class="line">30) &quot;0&quot;</span><br><span class="line">31) &quot;num-slaves&quot;</span><br><span class="line">32) &quot;2&quot;</span><br><span class="line">33) &quot;num-other-sentinels&quot;</span><br><span class="line">34) &quot;2&quot;</span><br><span class="line">35) &quot;quorum&quot;</span><br><span class="line">36) &quot;2&quot;</span><br><span class="line">37) &quot;failover-timeout&quot;</span><br><span class="line">38) &quot;60000&quot;</span><br><span class="line">39) &quot;parallel-syncs&quot;</span><br><span class="line">40) &quot;1&quot;</span><br></pre></td></tr></table></figure>
<p>其他命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看master下的slave信息</span><br><span class="line">sentinel slaves mymaster</span><br><span class="line"></span><br><span class="line">#mymaster下所有的哨兵</span><br><span class="line">sentinel sentinels mymaster</span><br><span class="line"></span><br><span class="line">#当前哨兵所指向的master地址和端口</span><br><span class="line">sentinel get-master-addr-by-name mymaster</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="哨兵转换机制">哨兵转换机制</span></h1><p>n个哨兵分别对Redis的master节点发送ping命令，如果在is-master-down-after-milliseconds指定的连接超时后，哨兵会“主观”认为master节点宕机-主观宕机（subjective down=sdown)。在哨兵机制中配置一个quorum参数m，用来判断m个哨兵都认为master主观宕机sdown，此时master就被哨兵认为是“客观”上宕机了（objective down=odown)，也就完成了哨兵从主观宕机到客观宕机的转换。</p>
<h1><span id="多个哨兵节点之间的相互发现机制">多个哨兵节点之间的相互发现机制</span></h1><p>Redis具有Pub/Sub的发布订阅消息队列的能力，每个哨兵都会往[<em>sentinel</em>:hello]这个channel中发送状态消息，并且其他的哨兵节点都监听这个channel的消息，感知到其他哨兵的存在。每隔2秒钟，每隔哨兵都会往[<em>sentinel</em>:hello]的channel发送自己的host、ip、runid、对master的监控配置信息。</p>
<h1><span id="哨兵对redis的slave节点自动纠正">哨兵对Redis的slave节点自动纠正</span></h1><p>哨兵发现master宕机后，会把slave节点通过选举出新的master提供服务，并且其他slave节点都要连接到新的master上。</p>
<h1><span id="redis的slave被转换为master的选举算法">Redis的slave被转换为master的选举算法</span></h1><p>如果一个master被quorum个哨兵认为主观宕机sdown了，master也就是达到了客观宕机odown的条件，而且配置的大多数（majority配置大多数的个数）哨兵同意进行主备切换，那么就通过选举算法，选出一个slave切换成master。<br>（1）与master断开时长过滤，如果一个slave跟master断开连接已经超过了down-after-milliseconds的10倍+master宕机的时长，那么slave就被认为不适合选举为master，这样的slave节点就会被过滤掉。<br>(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state；<br>（2）slave的优先级slave-priority,在redis配置文件中默认是100，越小优先级越高；<br>（3）slave复制数据的offset，offset越大，优先级越高；（每个slave在与master同步后offset自动增加）<br>（4）slave节点run_id越小，优先级越高。（每个redis实例，都会有一个runid）</p>
<h1><span id="哨兵接替进行主备切换的机制">哨兵接替进行主备切换的机制</span></h1><p>哨兵进行主备切换时，会从当选master的slave节点获取一个进行切换的版本号configuration epoch信息，如果进行操作主备切换的哨兵，执行切换的等待时间超过了failover-timeout配置，那么就会有新的哨兵接替进行主备切换，此时哨兵要重新获取configuration epoch版本号的值，保证每次主备切换版本号是唯一的。</p>
<h1><span id="master配置信息的传播">master配置信息的传播</span></h1><p>哨兵把当选的slave节点转换成master，并且把新的master配置信息通过[<em>sentinel</em>:hello]这个channel发布出去，订阅这个channel的其他slave节点收到消息后，自动更改配置连接到新的master节点上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哨兵-Sentinel，用于监控和管理Redis集群的高可用中间件。&lt;/p&gt;
&lt;h1 id=&quot;哨兵配置和启动&quot;&gt;&lt;a href=&quot;#哨兵配置和启动&quot; class=&quot;headerlink&quot; title=&quot;哨兵配置和启动&quot;&gt;&lt;/a&gt;哨兵配置和启动&lt;/h1&gt;&lt;p&gt;创建需要的目录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -pv /etc/sentinel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir -pv /var/sentinel/5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir -pv /var/log/sentinel/5000/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /usr/local/common/redis-3.2.8/sentinel.conf /etc/sentinel/5000.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5000.conf哨兵配置,可以配置多份，监控多个redis。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#守护进程启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;daemonize yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#哨兵日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logfile /var/log/sentinel/5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#哨兵绑定本机IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind 192.168.1.212 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#哨兵服务端口号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;port 5002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#sentinel工作空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dir /var/sentinel/5000/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#哨兵监控的master配置信息 master_redis_name master_redis_ip master_redis_port quorum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel monitor mymaster 192.168.1.210 6379 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#哨兵给master发送ping指令的超时时间，用来确定master的主观宕机sdown&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel down-after-milliseconds mymaster 5000 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#哨兵执行slave切换成master的失败超时，新的哨兵接替执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel failover-timeout mymaster 60000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#slave切换成master后，设置n个slave节点同时连接新master进行数据复制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel parallel-syncs mymaster 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;哨兵启动&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-sentinel /etc/sentinel/5000.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:29:50.702 * Increased maximum number of open files to 10032 (it was originally set to 1024).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _._                                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           _.-``__ &amp;apos;&amp;apos;-._                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _.-``    `.  `_.  &amp;apos;&amp;apos;-._           Redis 3.2.8 (00000000/0) 32 bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .-`` .-```.  ```\/    _.,_ &amp;apos;&amp;apos;-._                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; (    &amp;apos;      ,       .-`  | `,    )     Running in sentinel mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |`-._`-...-` __...-.``-._|&amp;apos;` _.-&amp;apos;|     Port: 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |    `-._   `._    /     _.-&amp;apos;    |     PID: 2083&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `-._    `-._  `-./  _.-&amp;apos;    _.-&amp;apos;                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |`-._`-._    `-.__.-&amp;apos;    _.-&amp;apos;_.-&amp;apos;|                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |    `-._`-._        _.-&amp;apos;_.-&amp;apos;    |           http://redis.io        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `-._    `-._`-.__.-&amp;apos;_.-&amp;apos;    _.-&amp;apos;                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |`-._`-._    `-.__.-&amp;apos;    _.-&amp;apos;_.-&amp;apos;|                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |    `-._`-._        _.-&amp;apos;_.-&amp;apos;    |                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `-._    `-._`-.__.-&amp;apos;_.-&amp;apos;    _.-&amp;apos;                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      `-._    `-.__.-&amp;apos;    _.-&amp;apos;                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          `-._        _.-&amp;apos;                                           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              `-.__.-&amp;apos;                                               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:29:50.703 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:29:50.703 # Sentinel ID is 79c3f195844be0b84babec19b2fa8a84cc07190d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:29:50.703 # +monitor master mymaster 192.168.1.210 6379 quorum 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:29:50.704 * +slave slave 192.168.1.211:6379 192.168.1.211 6379 @ mymaster 192.168.1.210 6379&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:29:50.714 * +slave slave 192.168.1.212:6379 192.168.1.212 6379 @ mymaster 192.168.1.210 6379&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:30:22.643 * +sentinel sentinel 6e8c9dbc97a385acbbb2cd640e63b0370d1a5c31 192.168.1.211 5000 @ mymaster 192.168.1.210 6379&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:30:43.491 * +sentinel sentinel b273c5b89b90f01ca5b90bd167a8092dedfae69a 192.168.1.212 5000 @ mymaster 192.168.1.210 6379&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2083:X 27 May 07:30:51.041 * +fix-slave-config slave 192.168.1.211:6379 192.168.1.211 6379 @ mymaster 192.168.1.210 6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;连接并查看哨兵信息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-cli -h 192.168.1.210 -p 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.1.210:5000&amp;gt; sentinel master mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1) &amp;quot;name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 2) &amp;quot;mymaster&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 3) &amp;quot;ip&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 4) &amp;quot;192.168.1.210&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 5) &amp;quot;port&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 6) &amp;quot;6379&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 7) &amp;quot;runid&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 8) &amp;quot;8e990a05ba6ab1e915870dffc9184b689e960c7d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 9) &amp;quot;flags&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10) &amp;quot;master&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11) &amp;quot;link-pending-commands&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12) &amp;quot;0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13) &amp;quot;link-refcount&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14) &amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15) &amp;quot;last-ping-sent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16) &amp;quot;0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17) &amp;quot;last-ok-ping-reply&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18) &amp;quot;394&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19) &amp;quot;last-ping-reply&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20) &amp;quot;394&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21) &amp;quot;down-after-milliseconds&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22) &amp;quot;5000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23) &amp;quot;info-refresh&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24) &amp;quot;159&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25) &amp;quot;role-reported&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26) &amp;quot;master&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27) &amp;quot;role-reported-time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28) &amp;quot;381542&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29) &amp;quot;config-epoch&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30) &amp;quot;0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31) &amp;quot;num-slaves&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32) &amp;quot;2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33) &amp;quot;num-other-sentinels&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34) &amp;quot;2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35) &amp;quot;quorum&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36) &amp;quot;2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37) &amp;quot;failover-timeout&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38) &amp;quot;60000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39) &amp;quot;parallel-syncs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40) &amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#查看master下的slave信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel slaves mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#mymaster下所有的哨兵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel sentinels mymaster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#当前哨兵所指向的master地址和端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sentinel get-master-addr-by-name mymaster&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="Sentinel" scheme="http://www.forwardlee.com/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制原理</title>
    <link href="http://www.forwardlee.com/2018/05/29/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/05/29/Redis主从复制原理/</id>
    <published>2018-05-29T06:37:15.000Z</published>
    <updated>2018-05-29T09:57:31.096Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="主从复制原理">主从复制原理</span></h1><p> <img src="/2018/05/29/Redis主从复制原理/Redis主从复制原理.jpg" alt="Redis主从复制原理"><br><strong> PS:</strong></p>
<p> full resynchronization:新的slave节点连接master同步复制数据，是一个完整的数据同步过程，叫做full resynchronization操作。</p>
<p> backlog：master在进行主从复制时，先在本机内存生成backlog，并且把要每次复制给slave的数据保存到backlog一份，目的是要记录数据同步的位置标识offset，以便于全量复制失败后，能够再次进行断点续传的增量复制。backlog的大小为1M。</p>
<p> master run id：salve用来区分master节点是新数据同步还是已有数据同步，如果slave发现mater的run id发生了变化，那么slava就会进行全量数据复制。<br>在slave执行命令，查看master的run id：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info server</span><br><span class="line"># Server</span><br><span class="line">redis_version:3.2.8</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:5da7c5438a3ad5de</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 2.6.32-431.el6.i686 i686</span><br><span class="line">arch_bits:32</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">gcc_version:4.4.7</span><br><span class="line">process_id:2119</span><br><span class="line">run_id:5b80bdc81f1624e2ee403c5ccfa0a542e99fbb3e</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:62</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">lru_clock:562478</span><br><span class="line">executable:/usr/local/bin/redis-server</span><br><span class="line">config_file:/etc/redis/6379.conf</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="全量复制">全量复制</span></h1><p>（1）master执行bgsave命令，在本地生成一份rdb数据快照。<br>（2）master把rdb快照文件发送给slave，发送过程有超时配置。<br> master节点主从复制的超时设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-timeout 60</span><br></pre></td></tr></table></figure>
<p>默认配置，如果主从复制时间超过60s，那么slave就会复制失败，所以根据rdb文件大小、网卡I/O能力、带宽大小调节该参数。例如rdb文件6G，千兆网卡的I/O在每秒中100M，那么就需要传输60s才能复制完毕，因此就可能导致复制失败。</p>
<p>（3）master在拷贝并同步原有rdb数据时，会将新增数据写入内存缓冲区，等到原有数据同步完成后，再从内存缓冲区把新增数据同步给slave。</p>
<p>master节点主从复制的内存缓冲区设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">client-output-buffer-limit slave 256M 64m 60</span><br><span class="line">``` </span><br><span class="line">在配置的复制持续事件60s内，master内存缓冲区消耗64M，或者一次性超过256M，那么就会停止复制，复制失败。所以可以根据master节点的硬件条件，优化该配置。内存大的机器，就配置的大一点，内存小的机器就配置的小一点。</span><br><span class="line"></span><br><span class="line">（4）slave接收rdb数据快照文件后，清空自己的旧数据，然后重新加载rdb到内存中，在数据没有完全加载完之前，slave仍然使用旧数据提供读写服务。</span><br><span class="line"></span><br><span class="line">（5）如果slave开启了AOF配置，那么就会立即执行BGREWRITEAOF，重新生成AOF文件。</span><br><span class="line"></span><br><span class="line"># 增量复制</span><br><span class="line">（1） 如果全量复制过程中，master和slave断开连接，那么slave重新连接master后，会触发增量复制。</span><br><span class="line"></span><br><span class="line">（2）master从backlog中可以得到数据已经同步到offset位置，那么直接发送未同步的数据给slave。</span><br><span class="line"></span><br><span class="line">（3）从节点执行psync命令获取master的runid和全局offset，如果master返回PSYNC_FULLRESYNC，则进行全量复制；如果返回PSYNC_CONTINUE，则进行增量复制。</span><br><span class="line"></span><br><span class="line">#  断点续传</span><br><span class="line"> Redis在主从数据同步过程中，master会在内存中创建backlog日志，把同步的数据位置标识offset记录在backlog中，master和slave都会记录masterid和offset，如果slave在同步数据过程中断开了与master之间的连接，等到再次连接时，slave会从上次记录的offset开始同步数据，而不是全部重新同步。</span><br><span class="line">  </span><br><span class="line">#  无磁盘操作设置</span><br><span class="line">Redis在默认配置下进行主从同步复制数据，只在内存中就能完成操作，不需要数据在磁盘落地。master在内存中拷贝一份完整的数据快照，通过slave socket发送给slave，slave在内存中加载数据。</span><br><span class="line">当然Redis也支持数据在磁盘落地的方式进行主从复制。需要修改以下配置：</span><br></pre></td></tr></table></figure>
<h1><span id="无磁盘操作-根据英语语境肯定回答要使用无磁盘操作就配置为no如果使用磁盘操作就配置为yes">无磁盘操作 根据英语语境肯定回答要使用无磁盘操作，就配置为no；如果使用磁盘操作，就配置为yes。</span></h1><p>repl-diskless-sync no </p>
<h1><span id="延迟多少秒后开始数据同步目的是等待更多的slave节点连接上master一起同步数据-如果master已经完成完整数据快照的拷贝那么新的slave节点就无法再连接master直到这次同步完成为止">延迟多少秒后开始数据同步，目的是等待更多的slave节点连接上master一起同步数据。如果master已经完成完整数据快照的拷贝，那么新的slave节点就无法再连接master，直到这次同步完成为止。</span></h1><p>repl-diskless-sync-delay 5</p>
<p><code>`</code> </p>
<h1><span id="过期key数据同步">过期key数据同步</span></h1><p>master中的key在一定时间有效后会做过期处理，对于这样的过期key，master会向slave发送一条del操作指令，在slave节点删除过期key的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主从复制原理&quot;&gt;&lt;a href=&quot;#主从复制原理&quot; class=&quot;headerlink&quot; title=&quot;主从复制原理&quot;&gt;&lt;/a&gt;主从复制原理&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/2018/05/29/Redis主从复制原理/Redis主从复制原理.jpg&quot; alt=&quot;Redis主从复制原理&quot;&gt;&lt;br&gt;&lt;strong&gt; PS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; full resynchronization:新的slave节点连接master同步复制数据，是一个完整的数据同步过程，叫做full resynchronization操作。&lt;/p&gt;
&lt;p&gt; backlog：master在进行主从复制时，先在本机内存生成backlog，并且把要每次复制给slave的数据保存到backlog一份，目的是要记录数据同步的位置标识offset，以便于全量复制失败后，能够再次进行断点续传的增量复制。backlog的大小为1M。&lt;/p&gt;
&lt;p&gt; master run id：salve用来区分master节点是新数据同步还是已有数据同步，如果slave发现mater的run id发生了变化，那么slava就会进行全量数据复制。&lt;br&gt;在slave执行命令，查看master的run id：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; info server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis_version:3.2.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis_git_sha1:00000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis_git_dirty:0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis_build_id:5da7c5438a3ad5de&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis_mode:standalone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os:Linux 2.6.32-431.el6.i686 i686&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arch_bits:32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;multiplexing_api:epoll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc_version:4.4.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;process_id:2119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run_id:5b80bdc81f1624e2ee403c5ccfa0a542e99fbb3e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_port:6379&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uptime_in_seconds:62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uptime_in_days:0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hz:10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lru_clock:562478&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;executable:/usr/local/bin/redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config_file:/etc/redis/6379.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据灾备和恢复过程中踩到的雷</title>
    <link href="http://www.forwardlee.com/2018/05/28/Redis%E6%95%B0%E6%8D%AE%E7%81%BE%E5%A4%87%E5%92%8C%E6%81%A2%E5%A4%8D%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E5%88%B0%E7%9A%84%E9%9B%B7/"/>
    <id>http://www.forwardlee.com/2018/05/28/Redis数据灾备和恢复过程中踩到的雷/</id>
    <published>2018-05-28T08:35:45.000Z</published>
    <updated>2018-05-28T10:32:03.574Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="生产环境配置策略">生产环境配置策略</span></h1><p>RDB 生成快照的频率策略要在每分钟生成一次，但是有多少key发生变化可根据自身业务量配置。<br>save 60 1000</p>
<p>AOF 在生产环境一定要打开，与RDB同时运行，fsync策略为everysec。</p>
<h1><span id="生产环境备份策略">生产环境备份策略</span></h1><p>RDB主要做冷备，用craontab执行定时脚本，做数据备份。<br>备份数据保留48小时，脚本清理48小时以前的数据。<br>每天备份当日的数据，每天的数据保存一个月。<br>把所有数据再备份到远程云服务器上。</p>
<p>每小时备份脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cur_date=`date +%Y%m%d%H`</span><br><span class="line">rm -rf /var/redis/6379/bak/hour/$cur_date</span><br><span class="line">cp /var/redis/6379/dump.rdb /var/redis/6379/bak/hour/$cur_date</span><br><span class="line"></span><br><span class="line">pre_date=`date -d -48hour +%Y%m%d%H`</span><br><span class="line">rm -rf /var/redis/6379/bak/hour/$pre_date</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>每天备份</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cur_date=`date +%Y%m%d`</span><br><span class="line">rm -rf /var/redis/6379/bak/hour/$cur_date</span><br><span class="line">cp /var/redis/6379/dump.rdb /var/redis/6379/bak/dayli/$cur_date</span><br><span class="line"></span><br><span class="line">pre_date=`date -d -1month +%Y%m%d`</span><br><span class="line">rm -rf /var/redis/6379/bak/dayli/$pre_date</span><br></pre></td></tr></table></figure>
<p>创建定时脚本crontab -e</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 dayli]# crontab -e</span><br><span class="line">0 * * * * sh /usr/local/redis/redis_rdb_data_bak_hour.sh</span><br><span class="line">0 0 * * * sh /usr/local/redis/redis_rdb_data_bak_dayli.sh</span><br></pre></td></tr></table></figure>
<h1><span id="踩过雷后的数据恢复流程">踩过雷后的数据恢复流程</span></h1><p><strong>NO.1雷：</strong>我们理解的redis优先使用aof文件恢复数据，如果aof文件没有数据，应该从rdb恢复数据。【错】</p>
<p><strong>原因：</strong>在redis配置文件中appendonly为yes，把备份数据拷贝到redis数据目录下，启动redis服务，并没有加载备份数据，而是优先加载了aof空数据，恢复失败。</p>
<p><strong>NO.2雷：</strong>既然优先使用aof恢复数据，那么我们把aof文件删除掉，再启动redis服务，恢复rdb数据。【错】</p>
<p><strong>原因：</strong>即使删除了aof文件，redis在启动时也会优先检查是否存在aof文件，如果没有则创建一个空的aof文件并加载空数据。恢复失败。</p>
<p><strong>NO.3雷：</strong>把redis配置的appendonly设置为no，再恢复rdb数据，启动redis加载rdb数据后，再停掉redis，修改配置appendonly为yes，再启动redis，恢复数据。【错】</p>
<p><strong>原因：</strong>配置appendonly为no，那么redis的appendonly.aof文件将失效，其中的数据也将不是正确的数据，恢复rdb数据后，再把appendonly修改为yes，此时再重启redis服务，redis将加载appendonly.aof的错误数据。恢复失败。</p>
<h2><span id="正确的数据恢复流程">正确的数据恢复流程</span></h2><p>停止redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli SHUDOWN</span><br></pre></td></tr></table></figure>
<p>修改redis配置vi /etc/redis/6379.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">appendonly no</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>删除aof文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/redis/6379/appendonly.aof</span><br></pre></td></tr></table></figure>
<p>拷贝最新一个小时的数据到redis目录下命名为dump.rdb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /var/redis/6379/bak/2019052600 /var/redis/6379/dump.rdb</span><br></pre></td></tr></table></figure>
<p>启动redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">./redis_6379 start</span><br></pre></td></tr></table></figure>
<p><strong>热配置redis的appendonly为yes，这是最重要的一步。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; config get appendonly</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;no&quot;</span><br><span class="line">127.0.0.1:6379&gt; config set appendonly yes</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>停止redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli SHUDOWN</span><br></pre></td></tr></table></figure>
<p>修改redis配置vi /etc/redis/6379.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">appendonly yes</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>启动redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">./redis_6379 start</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产环境配置策略&quot;&gt;&lt;a href=&quot;#生产环境配置策略&quot; class=&quot;headerlink&quot; title=&quot;生产环境配置策略&quot;&gt;&lt;/a&gt;生产环境配置策略&lt;/h1&gt;&lt;p&gt;RDB 生成快照的频率策略要在每分钟生成一次，但是有多少key发生变化可根据自身业务量配置。&lt;br&gt;save 60 1000&lt;/p&gt;
&lt;p&gt;AOF 在生产环境一定要打开，与RDB同时运行，fsync策略为everysec。&lt;/p&gt;
&lt;h1 id=&quot;生产环境备份策略&quot;&gt;&lt;a href=&quot;#生产环境备份策略&quot; class=&quot;headerlink&quot; title=&quot;生产环境备份策略&quot;&gt;&lt;/a&gt;生产环境备份策略&lt;/h1&gt;&lt;p&gt;RDB主要做冷备，用craontab执行定时脚本，做数据备份。&lt;br&gt;备份数据保留48小时，脚本清理48小时以前的数据。&lt;br&gt;每天备份当日的数据，每天的数据保存一个月。&lt;br&gt;把所有数据再备份到远程云服务器上。&lt;/p&gt;
&lt;p&gt;每小时备份脚本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur_date=`date +%Y%m%d%H`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/redis/6379/bak/hour/$cur_date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /var/redis/6379/dump.rdb /var/redis/6379/bak/hour/$cur_date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pre_date=`date -d -48hour +%Y%m%d%H`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/redis/6379/bak/hour/$pre_date&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="缓存" scheme="http://www.forwardlee.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化方式RDB和AOF比较应用</title>
    <link href="http://www.forwardlee.com/2018/05/25/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8FRDB%E5%92%8CAOF%E6%AF%94%E8%BE%83%E5%BA%94%E7%94%A8/"/>
    <id>http://www.forwardlee.com/2018/05/25/Redis持久化方式RDB和AOF比较应用/</id>
    <published>2018-05-25T10:00:11.000Z</published>
    <updated>2018-05-25T14:57:51.805Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/05/25/Redis持久化方式RDB和AOF比较应用/RDB和AOF的介绍.png" alt="RDB和AOF工作原理"></p>
<h1><span id="rdb持久化方式的工作原理">RDB持久化方式的工作原理</span></h1><p>设定时间间隔t内有n次key的操作检查，就进行持久化。例如save 60 1000，每个60秒有1000个key发生变化，则进行持久化。<br>RDB在做持久化时，保存完整的一份数据快照，旧的快照文件被覆盖。</p>
<h2><span id="rdb持久化方案的优点">RDB持久化方案的优点</span></h2><p>（1）持久化的时间间隔可以由redis控制，所以可以按照一定的时间间隔把数据快照文件拷贝出来，更好的支撑数据冷备份。<br>（2）RDB持久化文件是Redis数据文件，在做redis故障恢复时，数据加载效率更高。<br>（3）Redis数据操作都在内存中进行，效率高。<br>（4）Redis会创建一个副本进程（fork）进行数据持久化，持久化过程中，对redis本身的数据操作影响较小。</p>
<h2><span id="rdb持久化方式的缺点">RDB持久化方式的缺点</span></h2><p>（1）两次持久化操作的间隔时间内，Redis发生故障，那么将丢失这个时间内的所有数据。–重点<br>（2）当两次持久化操作间隔时间较长，Redis内可能产生大量新的数据，生成数据快照文件时，可能导致Redis数据服务暂停数秒。</p>
<a id="more"></a>
<h1><span id="aof持久化方式的工作原理">AOF持久化方式的工作原理</span></h1><p>设定一个AOF持久化文件大小，Redis每隔1秒进行一次append only的完整数据指令日志的写文件持久化操作，当AOF文件大小达到指定大小后，Redis会使用LRU算法淘汰无效数据，缩小数据大小，重新创建一个AOF文件，旧的AOF文件就会删除。<br>AOF在做持久化时，保存的是完整数据的写指令日志数据。</p>
<p>PS:现代操作系统的写文件操作过程是，先将文件数据写入到系统os cache缓存层，当os cache内的数据达到一定量后，再写入磁盘。</p>
<h2><span id="aof持久化方式的优点">AOF持久化方式的优点</span></h2><p>（1）数据持久化每秒钟进行一次，即使Redis发生故障，丢失的数据只是1秒钟的数据。–重点<br>（2）数据持久化时，数据从os cache中写入磁盘时，文件不易破损，即使破损，redis有可用的工具进行修复。</p>
<h2><span id="aof持久化方式的缺点">AOF持久化方式的缺点</span></h2><p>（1）Redis数据操作每次都些人os cache中，要比直接写入内存效率有所降低，导致Redis的吞吐量QPS略有下降。<br>（2）AOF文件的rewrite时机不可控，所以不容易实现数据备份。<br>（3）持久化保存的是全量数据的写指令日志，并非Redis数据文件，在Redis启动加载数据时，效率低下。–重点</p>
<h2><span id="rdb和aof持久化方式选择">RDB和AOF持久化方式选择</span></h2><p>两种方式，各有优缺点。RDB效率更高，但是丢失数据量会比较大；AOF的数据要进行写文件操作，效率略低，但是保存的持久化数据更完整。在实际应用中，通常会同时选择两种方案。<br>可用方案：<br>实现Redis主从集群，主节点用AOF，保证数据更好的完整性，即使出现故障，也能从故障中恢复数据，虽然AOF方式的Redis数据QPS会下降，但影响不大；从节点用短时间间隔（秒级）的RDB，从节点对外不提供服务，这样从节点出现故障的几率就会大大降低，RDB方式能够很好的实现数据文件的备份。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/05/25/Redis持久化方式RDB和AOF比较应用/RDB和AOF的介绍.png&quot; alt=&quot;RDB和AOF工作原理&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;RDB持久化方式的工作原理&quot;&gt;&lt;a href=&quot;#RDB持久化方式的工作原理&quot; class=&quot;headerlink&quot; title=&quot;RDB持久化方式的工作原理&quot;&gt;&lt;/a&gt;RDB持久化方式的工作原理&lt;/h1&gt;&lt;p&gt;设定时间间隔t内有n次key的操作检查，就进行持久化。例如save 60 1000，每个60秒有1000个key发生变化，则进行持久化。&lt;br&gt;RDB在做持久化时，保存完整的一份数据快照，旧的快照文件被覆盖。&lt;/p&gt;
&lt;h2 id=&quot;RDB持久化方案的优点&quot;&gt;&lt;a href=&quot;#RDB持久化方案的优点&quot; class=&quot;headerlink&quot; title=&quot;RDB持久化方案的优点&quot;&gt;&lt;/a&gt;RDB持久化方案的优点&lt;/h2&gt;&lt;p&gt;（1）持久化的时间间隔可以由redis控制，所以可以按照一定的时间间隔把数据快照文件拷贝出来，更好的支撑数据冷备份。&lt;br&gt;（2）RDB持久化文件是Redis数据文件，在做redis故障恢复时，数据加载效率更高。&lt;br&gt;（3）Redis数据操作都在内存中进行，效率高。&lt;br&gt;（4）Redis会创建一个副本进程（fork）进行数据持久化，持久化过程中，对redis本身的数据操作影响较小。&lt;/p&gt;
&lt;h2 id=&quot;RDB持久化方式的缺点&quot;&gt;&lt;a href=&quot;#RDB持久化方式的缺点&quot; class=&quot;headerlink&quot; title=&quot;RDB持久化方式的缺点&quot;&gt;&lt;/a&gt;RDB持久化方式的缺点&lt;/h2&gt;&lt;p&gt;（1）两次持久化操作的间隔时间内，Redis发生故障，那么将丢失这个时间内的所有数据。–重点&lt;br&gt;（2）当两次持久化操作间隔时间较长，Redis内可能产生大量新的数据，生成数据快照文件时，可能导致Redis数据服务暂停数秒。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.8 + MariaDB 10.0 with Galera Cluster+Keepalived高可用解决方案</title>
    <link href="http://www.forwardlee.com/2018/05/24/CentOS-6-8-MariaDB-10-0-with-Galera-Cluster-Keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.forwardlee.com/2018/05/24/CentOS-6-8-MariaDB-10-0-with-Galera-Cluster-Keepalived高可用解决方案/</id>
    <published>2018-05-24T11:40:46.000Z</published>
    <updated>2018-05-25T15:03:40.090Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="环境准备">环境准备</span></h1><p>使用三台最小化安装的CentOS 6.8 x86_64新环境。</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>节点名称</th>
<th>节点IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>donor</td>
<td>db1</td>
<td>192.168.1.150</td>
</tr>
<tr>
<td>node1</td>
<td>db2</td>
<td>192.168.1.151</td>
</tr>
<tr>
<td>node2</td>
<td>db3</td>
<td>192.168.1.152</td>
</tr>
</tbody>
</table>
<h1><span id="step-1-设置mariadb的yum安装源">Step 1- 设置MariaDB的yum安装源</span></h1><p>创建/etc/yum.repos.d/mariadb.repo</p>
<p>CentOS 6 – 64bit系统mariadb.repo内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.0/centos6-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<p>For CentOS 6 – 32bit系统mariadb.repo内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.0/centos6-x86</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="step-2-设置selinux状态">Step 2 – 设置SELinux状态</span></h1><p>在开始安装之前，先把三台机器的SELinux状态设置为permissive，临时设置如下，重启失效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setenforce 0</span><br></pre></td></tr></table></figure>
<p>永久设置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced. default</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=permissive</span><br><span class="line"># SELINUXTYPE= can take one of these two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h1><span id="step-3-安装-mariadb-galera-cluster-100">Step 3 – 安装 MariaDB Galera Cluster 10.0</span></h1><p>使用yum安装MariaDB Galera Cluster，需要先安装socat工具包，用来确保yum可以找到安装源。<br>CentOS 6用以下方式安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/s/socat-1.7.2.3-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>CentOS 7用以下方式安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install socat</span><br></pre></td></tr></table></figure>
<p>开始安装数据库集群环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install MariaDB-Galera-server MariaDB-client rsync galera</span><br></pre></td></tr></table></figure>
<h1><span id="step-4-mariadb安全性设置">Step 4:  MariaDB安全性设置</span></h1><p>MariaDB是Mysql的一个分支，所以使用Mysql的命令启动数据库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>
<p>执行以下脚本，并按提示进行相应操作，提升数据库安全。设置root初始密码为。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>我把root用户密码设置为root。</p>
<h1><span id="step-5-创建mariadb-galera-cluster集群数据通信用户">Step 5 – 创建MariaDB Galera Cluster集群数据通信用户</span></h1><p>创建一个集群节点之间进行数据状态快照转移（State Transfer Snapshot – SST）所使用的用户账号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; DELETE FROM mysql.user WHERE user=&apos;&apos;;</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;dbpass&apos;;</span><br><span class="line">mysql&gt; GRANT USAGE ON *.* to galera@&apos;%&apos; IDENTIFIED BY &apos;galera&apos;;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES on *.* to galera@&apos;%&apos;;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure>
<p>在开发或测试环境中，使用%表示任意主机，也就是说允许root用户和<br>galera用户可以从任意主机登访问数据库。出于安全考虑，你可以把%替换成你所允许的主机名称或者主机IP地址。</p>
<h1><span id="step-6-mariadb-galera-cluster-集群配置">Step 6 – MariaDB Galera Cluster 集群配置</span></h1><p>停止Mysql服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure>
<p>先创建Donor节点的配置信息。<br>Donor节点只用来同步数据，不能有外部链接操作Donor节点数据，保证Donor节点的健康状态，维护正常的集群运行状态。其他节点只需要修改wsrep_node_address=’192.168.1.150’和wsrep_node_name=’db1’两个配置即可，其他配置相同。</p>
<p>向/etc/my.cnf.d/server.cnf文件中添加以下配置信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &gt;&gt; /etc/my.cnf.d/servebinlog_format=ROW</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=innodb</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">innodb_locks_unsafe_for_binlog=1</span><br><span class="line">query_cache_size=0</span><br><span class="line">query_cache_type=0</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">innodb_log_file_size=100M</span><br><span class="line">innodb_file_per_table</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=&quot;gcomm://192.168.1.150,192.168.1.151,192.168.1.152&quot;</span><br><span class="line">wsrep_cluster_name=&apos;galera_cluster&apos;</span><br><span class="line">wsrep_node_address=&apos;192.168.1.150&apos;</span><br><span class="line">wsrep_node_name=&apos;db1&apos;</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line">wsrep_sst_auth=sst_user:dbpass</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>wsrep_cluster_address配置省略了默认端口4567。</p>
<p>其他两个节点所需要修改的配置：</p>
<p>node1节点 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsrep_node_address=&apos;192.168.1.151&apos;</span><br><span class="line">wsrep_node_name=&apos;db2&apos;</span><br></pre></td></tr></table></figure>
<p>node2节点 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsrep_node_address=&apos;192.168.1.152&apos;</span><br><span class="line">wsrep_node_name=&apos;db3&apos;</span><br></pre></td></tr></table></figure>
<h1><span id="step-7-初始化donor节点">Step 7– 初始化Donor节点</span></h1><p>Donor节点是整个集群的优先初始化节点，只有Donor节点先启动，其他子节点才能正常加入到集群当中。启动Donor节点，需要配置‐‐wsrep-new-cluster参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql start --wsrep-new-cluster</span><br></pre></td></tr></table></figure>
<p>运行以下命令，查看集群的运行状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -e&quot;show status like &apos;wsrep%&apos;&quot;</span><br></pre></td></tr></table></figure>
<p>输出以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------+-----------------------------------------------+</span><br><span class="line">| Variable_name                | Value                                         |</span><br><span class="line">+------------------------------+-----------------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid       | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564          |</span><br><span class="line">| wsrep_protocol_version       | 8                                             |</span><br><span class="line">| wsrep_last_committed         | 2                                             |</span><br><span class="line">| wsrep_replicated             | 0                                             |</span><br><span class="line">| wsrep_replicated_bytes       | 0                                             |</span><br><span class="line">| wsrep_repl_keys              | 0                                             |</span><br><span class="line">| wsrep_repl_keys_bytes        | 0                                             |</span><br><span class="line">| wsrep_repl_data_bytes        | 0                                             |</span><br><span class="line">| wsrep_repl_other_bytes       | 0                                             |</span><br><span class="line">| wsrep_received               | 10                                            |</span><br><span class="line">| wsrep_received_bytes         | 2304                                          |</span><br><span class="line">| wsrep_local_commits          | 0                                             |</span><br><span class="line">| wsrep_local_cert_failures    | 0                                             |</span><br><span class="line">| wsrep_local_replays          | 0                                             |</span><br><span class="line">| wsrep_local_send_queue       | 0                                             |</span><br><span class="line">| wsrep_local_send_queue_max   | 1                                             |</span><br><span class="line">| wsrep_local_send_queue_min   | 0                                             |</span><br><span class="line">| wsrep_local_send_queue_avg   | 0.000000                                      |</span><br><span class="line">| wsrep_local_recv_queue       | 0                                             |</span><br><span class="line">| wsrep_local_recv_queue_max   | 2                                             |</span><br><span class="line">| wsrep_local_recv_queue_min   | 0                                             |</span><br><span class="line">| wsrep_local_recv_queue_avg   | 0.100000                                      |</span><br><span class="line">| wsrep_local_cached_downto    | 1                                             |</span><br><span class="line">| wsrep_flow_control_paused_ns | 0                                             |</span><br><span class="line">| wsrep_flow_control_paused    | 0.000000                                      |</span><br><span class="line">| wsrep_flow_control_sent      | 0                                             |</span><br><span class="line">| wsrep_flow_control_recv      | 0                                             |</span><br><span class="line">| wsrep_cert_deps_distance     | 1.000000                                      |</span><br><span class="line">| wsrep_apply_oooe             | 0.000000                                      |</span><br><span class="line">| wsrep_apply_oool             | 0.000000                                      |</span><br><span class="line">| wsrep_apply_window           | 1.000000                                      |</span><br><span class="line">| wsrep_commit_oooe            | 0.000000                                      |</span><br><span class="line">| wsrep_commit_oool            | 0.000000                                      |</span><br><span class="line">| wsrep_commit_window          | 1.000000                                      |</span><br><span class="line">| wsrep_local_state            | 4                                             |</span><br><span class="line">| wsrep_local_state_comment    | Synced                                        |</span><br><span class="line">| wsrep_cert_index_size        | 1                                             |</span><br><span class="line">| wsrep_causal_reads           | 0                                             |</span><br><span class="line">| wsrep_cert_interval          | 0.000000                                      |</span><br><span class="line">| wsrep_incoming_addresses     | 192.168.1.150:3306                            |</span><br><span class="line">| wsrep_desync_count           | 0                                             |</span><br><span class="line">| wsrep_evs_delayed            |                                               |</span><br><span class="line">| wsrep_evs_evict_list         |                                               |</span><br><span class="line">| wsrep_evs_repl_latency       | 4.67e-06/9.14775e-06/1.1497e-05/2.63955e-06/4 |</span><br><span class="line">| wsrep_evs_state              | OPERATIONAL                                   |</span><br><span class="line">| wsrep_gcomm_uuid             | 559ef6a3-5f45-11e8-92a5-52514b1a7147          |</span><br><span class="line">| wsrep_cluster_conf_id        | 7                                             |</span><br><span class="line">| wsrep_cluster_size           | 1                                             |</span><br><span class="line">| wsrep_cluster_state_uuid     | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564          |</span><br><span class="line">| wsrep_cluster_status         | Primary                                       |</span><br><span class="line">| wsrep_connected              | ON                                            |</span><br><span class="line">| wsrep_local_bf_aborts        | 0                                             |</span><br><span class="line">| wsrep_local_index            | 0                                             |</span><br><span class="line">| wsrep_provider_name          | Galera                                        |</span><br><span class="line">| wsrep_provider_vendor        | Codership Oy &lt;info@codership.com&gt;             |</span><br><span class="line">| wsrep_provider_version       | 25.3.23(r3789)                                |</span><br><span class="line">| wsrep_ready                  | ON                                            |</span><br><span class="line">| wsrep_thread_count           | 2                                             |</span><br><span class="line">+------------------------------+-----------------------------------------------+</span><br><span class="line">58 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>重点查看这些信息是否正确：<br>wsrep_cluster_size 当前集群中节点个数<br>wsrep_local_state_comment 集群数据同步状态<br>wsrep_incoming_addresses 数据提供方节点地址和端口<br>wsrep_ready ON集群状态正常<br>wsrep_connected ON集群连接状态正常</p>
<h1><span id="step-8-动态添加集群节点">Step 8– 动态添加集群节点</span></h1><p>按照Step6的操作，配置node1和node2两个节点的配置文件，用以下命令启动集群子节点。注意与Donor节点的启动方式不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>
<p>检查node1和node2两个节点的状态，是否正常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;&quot;</span><br></pre></td></tr></table></figure>
<p>node1和node2两个子节点启动后，状态查询结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------+----------------------------------------------------------+</span><br><span class="line">| Variable_name                | Value                                                    |</span><br><span class="line">+------------------------------+----------------------------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid       | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564                     |</span><br><span class="line">| wsrep_protocol_version       | 8                                                        |</span><br><span class="line">| wsrep_last_committed         | 2                                                        |</span><br><span class="line">| wsrep_replicated             | 0                                                        |</span><br><span class="line">| wsrep_replicated_bytes       | 0                                                        |</span><br><span class="line">| wsrep_repl_keys              | 0                                                        |</span><br><span class="line">| wsrep_repl_keys_bytes        | 0                                                        |</span><br><span class="line">| wsrep_repl_data_bytes        | 0                                                        |</span><br><span class="line">| wsrep_repl_other_bytes       | 0                                                        |</span><br><span class="line">| wsrep_received               | 3                                                        |</span><br><span class="line">| wsrep_received_bytes         | 476                                                      |</span><br><span class="line">| wsrep_local_commits          | 0                                                        |</span><br><span class="line">| wsrep_local_cert_failures    | 0                                                        |</span><br><span class="line">| wsrep_local_replays          | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue       | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue_max   | 1                                                        |</span><br><span class="line">| wsrep_local_send_queue_min   | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue_avg   | 0.000000                                                 |</span><br><span class="line">| wsrep_local_recv_queue       | 0                                                        |</span><br><span class="line">| wsrep_local_recv_queue_max   | 1                                                        |</span><br><span class="line">| wsrep_local_recv_queue_min   | 0                                                        |</span><br><span class="line">| wsrep_local_recv_queue_avg   | 0.000000                                                 |</span><br><span class="line">| wsrep_local_cached_downto    | 18446744073709551615                                     |</span><br><span class="line">| wsrep_flow_control_paused_ns | 0                                                        |</span><br><span class="line">| wsrep_flow_control_paused    | 0.000000                                                 |</span><br><span class="line">| wsrep_flow_control_sent      | 0                                                        |</span><br><span class="line">| wsrep_flow_control_recv      | 0                                                        |</span><br><span class="line">| wsrep_cert_deps_distance     | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_oooe             | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_oool             | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_window           | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_oooe            | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_oool            | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_window          | 0.000000                                                 |</span><br><span class="line">| wsrep_local_state            | 4                                                        |</span><br><span class="line">| wsrep_local_state_comment    | Synced                                                   |</span><br><span class="line">| wsrep_cert_index_size        | 0                                                        |</span><br><span class="line">| wsrep_causal_reads           | 0                                                        |</span><br><span class="line">| wsrep_cert_interval          | 0.000000                                                 |</span><br><span class="line">| wsrep_incoming_addresses     | 192.168.1.151:3306,192.168.1.152:3306,192.168.1.150:3306 |</span><br><span class="line">| wsrep_desync_count           | 0                                                        |</span><br><span class="line">| wsrep_evs_delayed            |                                                          |</span><br><span class="line">| wsrep_evs_evict_list         |                                                          |</span><br><span class="line">| wsrep_evs_repl_latency       | 0.00115351/0.00145445/0.0018473/0.000297523/4            |</span><br><span class="line">| wsrep_evs_state              | OPERATIONAL                                              |</span><br><span class="line">| wsrep_gcomm_uuid             | 273a3916-5f4f-11e8-88db-8ab9682bb4ca                     |</span><br><span class="line">| wsrep_cluster_conf_id        | 9                                                        |</span><br><span class="line">| wsrep_cluster_size           | 3                                                        |</span><br><span class="line">| wsrep_cluster_state_uuid     | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564                     |</span><br><span class="line">| wsrep_cluster_status         | Primary                                                  |</span><br><span class="line">| wsrep_connected              | ON                                                       |</span><br><span class="line">| wsrep_local_bf_aborts        | 0                                                        |</span><br><span class="line">| wsrep_local_index            | 0                                                        |</span><br><span class="line">| wsrep_provider_name          | Galera                                                   |</span><br><span class="line">| wsrep_provider_vendor        | Codership Oy &lt;info@codership.com&gt;                        |</span><br><span class="line">| wsrep_provider_version       | 25.3.23(r3789)                                           |</span><br><span class="line">| wsrep_ready                  | ON                                                       |</span><br><span class="line">| wsrep_thread_count           | 2                                                        |</span><br><span class="line">+------------------------------+----------------------------------------------------------+</span><br><span class="line">58 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1><span id="step-9-验证数据同步复制">Step 9 – 验证数据同步复制</span></h1><p>模拟场景1：集群中三个节点全部正常启动。<br>在node1和node2两个节点分别创建库和表，查看donor节点是否正常的同步更新数据。</p>
<p>模拟场景2：node1和node2中的一个节点宕机。<br>在没有宕机的节点（除donor节点）中进行数据CUD操作，先查看donor节点是否正常的同步更新数据，如果正常，则重新启动宕机节点，启动成功后，查看该节点能否正常的把不一致的数据同步过来。</p>
<p><strong>PS:Galera在加入数据不一致的节点时，外部不能访问该节点，直到数据同步后才能访问该节点。</strong></p>
<h1><span id="keepalived实现mariadb集群的高可用配">Keepalived实现MariaDB集群的高可用配</span></h1><p>请参考这篇文章<a href="http://www.forwardlee.com/2018/05/23/Keepalived-HA-LVS-Galera-Cluster%E7%8E%AF%E5%A2%83/">《Keepalived HA +LVS+ Galera Cluster环境》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;使用三台最小化安装的CentOS 6.8 x86_64新环境。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;节点名称&lt;/th&gt;
&lt;th&gt;节点IP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;donor&lt;/td&gt;
&lt;td&gt;db1&lt;/td&gt;
&lt;td&gt;192.168.1.150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node1&lt;/td&gt;
&lt;td&gt;db2&lt;/td&gt;
&lt;td&gt;192.168.1.151&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node2&lt;/td&gt;
&lt;td&gt;db3&lt;/td&gt;
&lt;td&gt;192.168.1.152&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Step-1-设置MariaDB的yum安装源&quot;&gt;&lt;a href=&quot;#Step-1-设置MariaDB的yum安装源&quot; class=&quot;headerlink&quot; title=&quot;Step 1- 设置MariaDB的yum安装源&quot;&gt;&lt;/a&gt;Step 1- 设置MariaDB的yum安装源&lt;/h1&gt;&lt;p&gt;创建/etc/yum.repos.d/mariadb.repo&lt;/p&gt;
&lt;p&gt;CentOS 6 – 64bit系统mariadb.repo内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mariadb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl = http://yum.mariadb.org/10.0/centos6-amd64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For CentOS 6 – 32bit系统mariadb.repo内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mariadb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl = http://yum.mariadb.org/10.0/centos6-x86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MariaDB" scheme="http://www.forwardlee.com/tags/MariaDB/"/>
    
      <category term="Keepalived" scheme="http://www.forwardlee.com/tags/Keepalived/"/>
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="CentOS" scheme="http://www.forwardlee.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Galera Cluster 3 + Mysql wresp 5.6安装配置</title>
    <link href="http://www.forwardlee.com/2018/05/24/Galera-Cluster-3-Mysql-wresp-5-6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.forwardlee.com/2018/05/24/Galera-Cluster-3-Mysql-wresp-5-6安装配置/</id>
    <published>2018-05-24T05:02:55.000Z</published>
    <updated>2018-05-25T13:10:11.936Z</updated>
    
    <content type="html"><![CDATA[<p>安装yum-builddep工具<br>yum install yum-utils –enablerepo=extras</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装yum-builddep工具&lt;br&gt;yum install yum-utils –enablerepo=extras&lt;/p&gt;

    
    </summary>
    
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Keepalived HA +LVS+ Galera Cluster环境</title>
    <link href="http://www.forwardlee.com/2018/05/23/Keepalived-HA-LVS-Galera-Cluster%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.forwardlee.com/2018/05/23/Keepalived-HA-LVS-Galera-Cluster环境/</id>
    <published>2018-05-23T08:14:48.000Z</published>
    <updated>2018-05-25T13:10:56.111Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Galera Cluster实现Mysql集群</a>，再配合Keepalived的VRRP和LVS实现Mysql集群的高可用和负载均衡。</p>
<p>开发环境CentOS 6.8 + Mysql Galera 5.5 + Keepalived 1.4.4</p>
<p>1.安装Keepalived</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install kernel-devel</span><br><span class="line"></span><br><span class="line">yum -y install ipvsadm</span><br></pre></td></tr></table></figure>
<p>命令号执行ipvsadm是否安装成功，如果可以执行，则说明已经安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.keepalived.org/software/keepalived-1.4.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zvxf keepalived-1.4.4.tar.gz</span><br></pre></td></tr></table></figure>
<p>找到Linux的内核源码路径，不同版本的操作系统版本号不同。<br> /usr/src/kernels/2.6.32-696.30.1.el6.x86_64/</p>
<p> 安装到/usr/local/keepalived目录，安装LVS功能需要指定内容源码路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived --with-kernel-dir=/usr/src/kernels/2.6.32-696.30.1.el6.x86_64</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Keepalived configuration</span><br><span class="line">------------------------</span><br><span class="line">Keepalived version       : 1.4.4</span><br><span class="line">Compiler                 : gcc</span><br><span class="line">Preprocessor flags       : -I/usr/src/kernels/2.6.32-696.30.1.el6.x86_64/include</span><br><span class="line">Compiler flags           : -Wall -Wunused -Wstrict-prototypes -Wextra -g -O2 -D_GNU_SOURCE -fPIE</span><br><span class="line">Linker flags             :  -pie</span><br><span class="line">Extra Lib                :  -lcrypto  -lssl </span><br><span class="line">Use IPVS Framework       : Yes</span><br><span class="line">IPVS use libnl           : No</span><br><span class="line">IPVS syncd attributes    : No</span><br><span class="line">IPVS 64 bit stats        : No</span><br><span class="line">fwmark socket support    : Yes</span><br><span class="line">Use VRRP Framework       : Yes</span><br><span class="line">Use VRRP VMAC            : Yes</span><br><span class="line">Use VRRP authentication  : Yes</span><br><span class="line">With ip rules/routes     : Yes</span><br><span class="line">SNMP vrrp support        : No</span><br><span class="line">SNMP checker support     : No</span><br><span class="line">SNMP RFCv2 support       : No</span><br><span class="line">SNMP RFCv3 support       : No</span><br><span class="line">DBUS support             : No</span><br><span class="line">SHA1 support             : No</span><br><span class="line">Use Debug flags          : No</span><br><span class="line">smtp-alert debugging     : No</span><br><span class="line">Use Json output          : No</span><br><span class="line">Stacktrace support       : No</span><br><span class="line">Memory alloc check       : No</span><br><span class="line">libnl version            : None</span><br><span class="line">Use IPv4 devconf         : No</span><br><span class="line">Use libiptc              : No</span><br><span class="line">Use libipset             : No</span><br><span class="line">init type                : upstart</span><br><span class="line">Build genhash            : Yes</span><br><span class="line">Build documentation      : No</span><br><span class="line"></span><br><span class="line">*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</span><br></pre></td></tr></table></figure>
<p>编译安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure>
<p>拷贝keepalived配置文件到/etc/keepalived/keepalived.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/keepalived</span><br><span class="line">cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class="line"></span><br><span class="line">cd /usr/local/keepalived/sbin/</span><br><span class="line">./keepalived</span><br></pre></td></tr></table></figure>
<p>查看keepalived运行日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/messages</span><br></pre></td></tr></table></figure>
<p>停止keepalived</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill keepalived</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">## 重点配置router_id LVS_150</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">#     admin@example.com</span><br><span class="line">   &#125;</span><br><span class="line"> #  notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">  # smtp_server 192.168.200.1</span><br><span class="line">   #smtp_connect_timeout 30</span><br><span class="line">   #router_id LVS_DEVEL</span><br><span class="line">   #vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   #vrrp_garp_interval 0</span><br><span class="line">   #vrrp_gna_interval 0</span><br><span class="line">   router_id LVS_150</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##重点配置 虚拟路由节点virtual_router_id 51，主从配置：state MASTER/SLAVE，虚拟ip可以多个用多行表示：virtual_ipaddress</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.16</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##重点配置lb_algo wrr ，lb_kind DR，路由协议protocol TCP，真实IP和端口号real_server 192.168.1.150 3306，connect_port 3306</span><br><span class="line">virtual_server 192.168.200.16 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo wrr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.1.150 3306 &#123;</span><br><span class="line">        weight 5</span><br><span class="line">	TCP_CHECK &#123;</span><br><span class="line">		connect_timeout 10</span><br><span class="line">		nb_get_retry 3</span><br><span class="line">		delay_before_retry 3</span><br><span class="line">		connect_port 3306</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	real_server 192.168.1.152 3306 &#123;</span><br><span class="line">        weight 5</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 启动keepalived</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./keepalived</span><br></pre></td></tr></table></figure>
<p>在虚拟IP对应的其他节点，按照上述同样的操作安装keepalived，环境准备完成后，可以通过虚拟IP访问mysql数据库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 192.168.200.16 -ugalera -pgalera</span><br></pre></td></tr></table></figure>
<p>后续问题：在Mysql Galera Cluster单点故障的恢复和重启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/&quot;&gt;Galera Clust
    
    </summary>
    
    
      <category term="Keepalived" scheme="http://www.forwardlee.com/tags/Keepalived/"/>
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.8+MySQL 5.5 with Galera Cluster环境搭建</title>
    <link href="http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster环境搭建/</id>
    <published>2018-05-22T16:13:16.000Z</published>
    <updated>2018-05-25T13:11:43.862Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">##先安装依赖库</span><br><span class="line">yum install libaio gcc gcc-c++ boost-devel scons check-devel openssl-devel</span><br><span class="line">ln -sf /usr/lib64/libssl.so.10 /usr/lib64/libssl.so.6</span><br><span class="line">ln -sf /usr/lib64/libcrypto.so.10 /usr/lib64/libcrypto.so.6</span><br><span class="line">##下载MySQL with wsrep源码包，目前最新版本是5.5.34-25.9</span><br><span class="line">wget https://launchpad.net/codership-mysql/5.5/5.5.34-25.9/+download/mysql-5.5.34_wsrep_25.9-linux-x86_64.tar.gz</span><br><span class="line">tar zxvf mysql-5.5*</span><br><span class="line">mv mysql-5.5.34_wsrep_25.9-linux-x86_64 /usr/local/mysql</span><br><span class="line">cd /usr/local/mysql/</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line">chown -R mysql:mysql .</span><br><span class="line">./scripts/mysql_install_db --no-defaults --datadir=/opt/mysqldb/ --user=mysql</span><br><span class="line">chown -R root .</span><br><span class="line">chown -R mysql /opt/mysqldb/</span><br><span class="line">echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line">[root@localhost mysql]# vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>[mysqld]<br>datadir=/opt/mysqldb<br>socket = /tmp/mysql.sock<br>user=mysql</p>
<p>symbolic-links=0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">##启动Mysql</span><br><span class="line">mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line">##安装Xtrabackup</span><br><span class="line">yum install perl-DBD-MySQL perl-Time-HiRes nc</span><br><span class="line"></span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/XtraBackup-2.1.9/RPM/rhel6/x86_64/percona-xtrabackup-2.1.9-744.rhel6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh percona-xtrabackup-2.1.9-744.rhel6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">##安装Galera复制插件</span><br><span class="line">wget https://launchpad.net/galera/3.x/25.3.5/+download/galera-25.3.5-src.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf galera-25.3.5-src.tar.gz</span><br><span class="line"></span><br><span class="line">cd galera-25.3.5-src</span><br><span class="line"></span><br><span class="line">scons</span><br><span class="line"></span><br><span class="line">cp garb/garbd /usr/local/mysql/bin/</span><br><span class="line"></span><br><span class="line">cp libgalera_smm.so /usr/local/mysql/lib/plugin/</span><br></pre></td></tr></table></figure>
<p>mysql初始化配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/lib/mysql</span><br><span class="line">mkdir -p /etc/mysql/conf.d/</span><br><span class="line">chown mysql:mysql /var/lib/mysql</span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br><span class="line">##创建用于同步的帐号，注意替换掉示例值。</span><br><span class="line">mysql  -e &quot;SET wsrep_on=OFF; GRANT ALL ON *.* TO &apos;galera&apos;@&apos;%&apos; IDENTIFIED BY &apos;galera&apos;&quot;;</span><br><span class="line">##我使用的mysql版本再执行上述授权语句后，%代表任意主机，却不包含localhost，所以要给防伪localhost单独授权。</span><br><span class="line">mysql  -e &quot;SET wsrep_on=OFF; GRANT ALL ON *.* TO &apos;galera&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;galera&apos;&quot;;</span><br><span class="line">##修改root帐号密码，注意替换掉示例值。</span><br><span class="line">mysql -e &quot;SET wsrep_on=OFF;GRANT ALL PRIVILEGES ON * . * TO &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ; &quot;</span><br><span class="line"></span><br><span class="line">##查看授权</span><br><span class="line">mysql -uroot -proot;</span><br><span class="line">show grants for galera@&quot;%&quot;;</span><br><span class="line">show grants for galera@&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">##关闭MySQL</span><br><span class="line">pkill mysql</span><br></pre></td></tr></table></figure>
<p>Galera集群配置</p>
<p>修改my.cnf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>my.cnf配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/opt/mysqldb</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">######galera conf start########</span><br><span class="line">server-id=101</span><br><span class="line">wsrep_node_name = mysql1</span><br><span class="line">wsrep_provider = /usr/local/mysql/lib/plugin/libgalera_smm.so</span><br><span class="line">wsrep_sst_method = rsync</span><br><span class="line">#使用sst的用户和密码，这里如果开启，需要在mysql上创建该用户，并授予其足够的权限</span><br><span class="line">wsrep_sst_auth=galera:galera</span><br><span class="line"># 配置集群的所有节点</span><br><span class="line">wsrep_cluster_address=gcomm://192.168.1.150:4567,192.168.1.151:4567</span><br><span class="line"># 配置自己的ip:port，每个配置各不相同</span><br><span class="line">wsrep_node_address=192.168.1.150:4567</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">innodb_locks_unsafe_for_binlog=1</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">binlog_format=ROW</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line">log-slave-updates=1</span><br><span class="line"></span><br><span class="line">#[mysqld_safe]</span><br><span class="line">#log-error=/var/lib/mysql/mysqld.log</span><br><span class="line">#pid-file=/var/lib/mysql/mysqld.pid</span><br></pre></td></tr></table></figure>
<p>节点mysql1启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>
<p>检查启动的端口，应该有3306和4567两个端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp |grep 4567</span><br><span class="line">netstat -tunlp |grep 3306</span><br></pre></td></tr></table></figure>
<p>在集群中添加新的节点，并执行启动脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure>
<p>PS：复制虚拟机，设置新IP</p>
<p>在新的虚拟机中修改ifconfig-eth0，设置IP为192.168.1.151，去掉UUID、MAC两个参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>
<p>重建路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure>
<p>重启虚拟机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutown -r now</span><br></pre></td></tr></table></figure>
<p>测试网络</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.150</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
    
    </summary>
    
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="CentOS" scheme="http://www.forwardlee.com/tags/CentOS/"/>
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker Galera Cluster环境快速搭建</title>
    <link href="http://www.forwardlee.com/2018/05/22/Docker-Galera-Cluster%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.forwardlee.com/2018/05/22/Docker-Galera-Cluster环境快速搭建/</id>
    <published>2018-05-22T03:12:14.000Z</published>
    <updated>2018-05-25T13:09:51.602Z</updated>
    
    <content type="html"><![CDATA[<p>使用Docker快速创建MariaDB（与MySql同源） Galera集群环境</p>
<p>Docker开发环境：MacOS High Sieera 10.13.2 (17C88)<br>MariaDB Galera Cluster容器环境：CentOS 7.3 + MariaDB 10.1.23</p>
<p>1.执行Docker拉取镜像</p>
<p><code>docker pull mjstealey/mariadb-galera:10.1</code></p>
<p>2.下载测试脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mjstealey/mariadb-galera.git</span><br><span class="line"></span><br><span class="line">cd mariadb-galera/</span><br></pre></td></tr></table></figure>
<p>下载好的代码中包括创建docker容器的脚本和测试脚本。</p>
<p>3.创建集群节点并执行测试语句</p>
<p><code>./three-node-test.sh</code></p>
<p>命令执行过程中会创建三个节点，并且执行测试sql查看集群节点数据同步是否正确。测试通过后，可以使用后续命令分别操作三个节点的数据库。</p>
<p>4.查看已经运行的节点进程</p>
<p><code>docker container ls</code></p>
<p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED              STATUS              PORTS                                                                                                NAMES</span><br><span class="line">0a06b6789c1c        mjstealey/mariadb-galera:10.1   &quot;/docker-entrypoint.…&quot;   58 seconds ago       Up 59 seconds       0.0.0.0:32791-&gt;3306/tcp, 0.0.0.0:32790-&gt;4444/tcp, 0.0.0.0:32789-&gt;4567/tcp, 0.0.0.0:32788-&gt;4568/tcp   galera-node-3</span><br><span class="line">c4e5eb6d2ba1        mjstealey/mariadb-galera:10.1   &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:32787-&gt;3306/tcp, 0.0.0.0:32786-&gt;4444/tcp, 0.0.0.0:32785-&gt;4567/tcp, 0.0.0.0:32784-&gt;4568/tcp   galera-node-2</span><br><span class="line">bf53b99d540c        mjstealey/mariadb-galera:10.1   &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:32783-&gt;3306/tcp, 0.0.0.0:32782-&gt;4444/tcp, 0.0.0.0:32781-&gt;4567/tcp, 0.0.0.0:32780-&gt;4568/tcp   galera-node-1</span><br></pre></td></tr></table></figure>
<p>5.单独进入节点操作数据库<br><code>docker exec -it bf53b99d540c mysql -uroot -ptemppassword</code></p>
<p>MariaDB数据库的root用户密码是Docker在创建容器的时候配置的，可以从Dockerfile中找到配置，直接从镜像中拉取的容器镜像，是已经配置好的。如果本地执行Docker容器创建，那么可以修改Dockerfile中的相关配置。</p>
<p>命令中bf53b99d540c是指容器进程的CONTAINER ID的值。</p>
<p>参数解释<br>-i 可交互<br>-t 分配终端</p>
<p>命令执行完会进入MariaDB的命令行交互窗口。</p>
<p>6.在任一一个节点操作数据库，数据都会在其他节点同步（接近同步）更新。<br>==Galera规则要求创建的表必须要有主键，没有主键也要指定自增列。==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user</span><br><span class="line">(</span><br><span class="line">	pkid int auto_increment primary key,</span><br><span class="line">	username varchar(255) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Docker快速创建MariaDB（与MySql同源） Galera集群环境&lt;/p&gt;
&lt;p&gt;Docker开发环境：MacOS High Sieera 10.13.2 (17C88)&lt;br&gt;MariaDB Galera Cluster容器环境：CentOS 7.3 + M
    
    </summary>
    
    
      <category term="MariaDB" scheme="http://www.forwardlee.com/tags/MariaDB/"/>
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="Docker" scheme="http://www.forwardlee.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>MySql分区操作（三）</title>
    <link href="http://www.forwardlee.com/2018/05/17/MySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2018/05/17/MySql分区操作（三）/</id>
    <published>2018-05-17T02:51:51.000Z</published>
    <updated>2018-05-25T13:05:33.344Z</updated>
    
    <content type="html"><![CDATA[<p><strong>子分区操作</strong><br>常用RANGE和HASH复合分区实现子分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myblog.tbl_users_2 (</span><br><span class="line">  `pkid` INT NOT NULL ,</span><br><span class="line">  `username` VARCHAR(255) NOT NULL,</span><br><span class="line">  `password` VARCHAR(255) NOT NULL,</span><br><span class="line">  `email` VARCHAR(255) NULL,</span><br><span class="line">  `sex` CHAR(1) NULL,</span><br><span class="line">  `create_time` DATE NULL)</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8 </span><br><span class="line">PARTITION BY RANGE(YEAR(create_time))</span><br><span class="line">SUBPARTITION BY HASH(TO_DAYS(create_time))</span><br><span class="line">SUBPARTITIONS 2</span><br><span class="line">(</span><br><span class="line">PARTITION p0 VALUES LESS THAN (2010),</span><br><span class="line">PARTITION p1 VALUES LESS THAN (2017),</span><br><span class="line">PARTITION p2 VALUES LESS THAN (MAXVALUE)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TBL_USERS_2 VALUES (1,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2009-08-08&apos;);</span><br><span class="line">INSERT INTO TBL_USERS_2 VALUES (2,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2016-08-07&apos;);</span><br><span class="line">INSERT INTO TBL_USERS_2 VALUES (3,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2018-08-08&apos;);</span><br></pre></td></tr></table></figure>
<p><strong>查看产生的分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PARTITIONS SELECT *                    FROM tbl_users_2 \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tbl_users_2</span><br><span class="line">   partitions: p0_p0sp0,p0_p0sp1,p1_p1sp0,p1_p1sp1,p2_p2sp0,p2_p2sp1</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>
<p><strong>查看其中一条数据所在分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PARTITIONS SELECT *                    FROM tbl_users_2 where create_time = &apos;2017-08-07&apos;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tbl_users_2</span><br><span class="line">   partitions: p2_p2sp1</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br></pre></td></tr></table></figure>
<p><strong>分区字段特殊性</strong></p>
<p>按字段分区的字段不能为NULL，所以在建表时需要指定分区字段为NOT NULL。</p>
<p><strong>分区管理</strong></p>
<p>删除分区和分区上的数据 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user drop partiton p0;</span><br></pre></td></tr></table></figure>
<p>增加分区<br>对于RANGE分区，只能添加比已经存在的分区范围更大的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user add partition ( partition p0 values less than (100));</span><br></pre></td></tr></table></figure></p>
<p>对于LIST分区，只能添加不存在与分区列表中的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user add partition ( partition p0 values in (100,101,102));</span><br></pre></td></tr></table></figure>
<p>也就是说，100，101，102不在已定义的LIST分区内。</p>
<p><strong>不丢失数据修改分区</strong><br> 如果原来的分区是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user(</span><br><span class="line"> pkid int not null,</span><br><span class="line"> name varchar(255)</span><br><span class="line"> )</span><br><span class="line"> partition by range(pkid) partitions 3(</span><br><span class="line"> partition p0 values less than(100),</span><br><span class="line"> partition p1 values less than(200),</span><br><span class="line"> partition p2 values  less than(300)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>==修改(拆分)分区：==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user reorganize partition p0 into</span><br><span class="line"> ( partition s0 values less than(50),</span><br><span class="line"> partition s1 values less than(100)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>相当于原来的分区是这样创建的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user(</span><br><span class="line"> pkid int not null,</span><br><span class="line"> name varchar(255)</span><br><span class="line"> )</span><br><span class="line"> partition by range(pkid) partitions 4(</span><br><span class="line"> partition s0 values less than(50),</span><br><span class="line"> partition s1 values less than(100),</span><br><span class="line"> partition p1 values less than(200),</span><br><span class="line"> partition p2 values  less than(300)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>LIST分区修改（拆分）同理。<br>==修改(合并)分区：==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user reorganize partition s0,s1 into</span><br><span class="line"> ( partition p0 values less than(100)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>删除分区，不删除数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user remove partitioning</span><br></pre></td></tr></table></figure>
<p><strong>HASH和KEY分区管理</strong></p>
<p>在没有数据的时候进行修改分区操作是可以的，如果在数据存在后再减少和增加分区，数据分布就不均匀了。</p>
<p>减少n个分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user coalesce partition 2;</span><br></pre></td></tr></table></figure>
<p>增加n个分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user add partition 2;</span><br></pre></td></tr></table></figure>
<p><strong>其他分区管理语句</strong></p>
<p>重建分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user rebuild partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>优化分区(包括分析、检查、修补分区）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user optimize partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>分析分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user analyze partiton p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>检查分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user check partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>修补分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user repair partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p><strong>其他细节</strong></p>
<p><em>分区数最大不超过1024个，实际应用中分区数不超过150个；<br>如果有唯一索引或者主键，分区列必须包含所有的唯一索引或者主键；<br>不支持外键；<br>不支持全区索引；<br>常用日期进行分区；<br>临时表不能被分区；<br>单条数据查询分区管理意义不大，除非指定数据所在分区；<br>计算分区成本，因为每次插入数据都会进行分区计算，分区函数不能过于复杂；<br>分区字段不能为NULL；</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;子分区操作&lt;/strong&gt;&lt;br&gt;常用RANGE和HASH复合分区实现子分区&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySql分区操作（二）</title>
    <link href="http://www.forwardlee.com/2018/05/17/MySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2018/05/17/MySql分区操作（二）/</id>
    <published>2018-05-17T02:07:57.000Z</published>
    <updated>2018-05-25T13:05:21.643Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【转自】<a href="https://blog.csdn.net/tjcyjd/article/details/11194489" target="_blank" rel="noopener">https://blog.csdn.net/tjcyjd/article/details/11194489</a></strong><br><strong>HASH分区和线性LINEAR HASH分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `myblog`.`tbl_user_friends_linear_hash` (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` INT NOT NULL,</span><br><span class="line">  `friend_id` INT NOT NULL,</span><br><span class="line">  `create_time` DATETIME NOT NULL,</span><br><span class="line">  PRIMARY KEY (`pkid`))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8</span><br><span class="line">COMMENT = &apos;用户好友&apos; PARTITION BY LINEAR HASH(pkid) PARTITIONS 3 ;</span><br></pre></td></tr></table></figure>
<p>MySQL还支持线性哈希功能，它与常规哈希的区别在于，线性哈希功能使用的一个线性的2的幂（powers-of-two）运算法则，而常规 哈希使用的是求哈希函数值的模数。</p>
<p>线性哈希分区和常规哈希分区在语法上的唯一区别在于，在“PARTITION BY” 子句中添加“LINEAR”关键字，如下面所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">    id INT NOT NULL,</span><br><span class="line">    fname VARCHAR(30),</span><br><span class="line">    lname VARCHAR(30),</span><br><span class="line">    hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;,</span><br><span class="line">    separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;,</span><br><span class="line">    job_code INT,</span><br><span class="line">    store_id INT</span><br><span class="line">)</span><br><span class="line">PARTITION BY LINEAR HASH(YEAR(hired))</span><br><span class="line">PARTITIONS 4；</span><br></pre></td></tr></table></figure>
<p>假设一个表达式expr, 当使用线性哈希功能时，记录将要保存到的分区是num 个分区中的分区N，其中N是根据下面的算法得到： </p>
<ol>
<li><p>找到下一个大于num.的、2的幂，我们把这个值称为V ，它可以通过下面的公式得到： </p>
</li>
<li><p>V = POWER(2, CEILING(LOG(2, num)))<br>（例如，假定num是13。那么LOG(2,13)就是3.7004397181411。 CEILING(3.7004397181411)就是4，则V = POWER(2,4), 即等于16）。 </p>
</li>
<li><p>设置 N = F(column_list) &amp; (V - 1). </p>
</li>
<li><p>当 N &gt;= num: </p>
</li>
</ol>
<p>·         设置 V = CEIL(V / 2) </p>
<p>·         设置 N = N &amp; (V - 1) </p>
<p>例如，假设表t1，使用线性哈希分区且有4个分区，是通过下面的语句创建的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATE)</span><br><span class="line">    PARTITION BY LINEAR HASH( YEAR(col3) )</span><br><span class="line">    PARTITIONS 6;</span><br></pre></td></tr></table></figure>
<p>现在假设要插入两行记录到表t1中，其中一条记录col3列值为’2003-04-14’，另一条记录col3列值为’1998-10-19’。第一条记录将要保存到的分区确定如下：</p>
<p>V = POWER(2, CEILING(LOG(2,7))) = 8<br>N = YEAR(‘2003-04-14’) &amp; (8 - 1)<br>   = 2003 &amp; 7<br>   = 3</p>
<p>(3 &gt;= 6 为假（FALSE）: 记录将被保存到#3号分区中)<br>第二条记录将要保存到的分区序号计算如下： </p>
<p>V = 8<br>N = YEAR(‘1998-10-19’) &amp; (8-1)<br>  = 1998 &amp; 7<br>  = 6</p>
<p>(6 &gt;= 4 为真（TRUE）: 还需要附加的步骤)</p>
<p>N = 6 &amp; CEILING(5 / 2)<br>  = 6 &amp; 3<br>  = 2</p>
<p>(2 &gt;= 4 为假（FALSE）: 记录将被保存到#2分区中)<br>按照线性哈希分区的优点在于增加、删除、合并和拆分分区将变得更加快捷，有利于处理含有极其大量（1000吉）数据的表。它的缺点在于，与使用常规HASH分区得到的数据分布相比，各个分区间数据的分布不大可能均衡。</p>
<p><strong>KEY分区和LINEAR KEY分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `myblog`.`tbl_user_friends_linear_key` (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` INT NOT NULL,</span><br><span class="line">  `friend_id` INT NOT NULL,</span><br><span class="line">  `create_time` DATETIME NOT NULL,</span><br><span class="line">  primary key(pkid))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8</span><br><span class="line">COMMENT = &apos;用户好友&apos; PARTITION BY LINEAR KEY(pkid) PARTITIONS 3 ;</span><br></pre></td></tr></table></figure>
<p>按照KEY进行分区类似于按照HASH分区，除了HASH分区使用的用户定义的表达式，而KEY分区的 哈希函数是由MySQL 服务器提供。MySQL 簇（Cluster）使用函数MD5()来实现KEY分区；对于使用其他存储引擎的表，服务器使用其自己内部的 哈希函数，这些函数是基于与PASSWORD()一样的运算法则。 </p>
<p>“CREATE TABLE … PARTITION BY KEY”的语法规则类似于创建一个通过HASH分区的表的规则。它们唯一的区别在于使用的关键字是KEY而不是HASH，并且KEY分区只采用一个或多个列名的一个列表。 </p>
<p>通过线性KEY分割一个表也是可能的。下面是一个简单的例子： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tk (</span><br><span class="line">    col1 INT NOT NULL,</span><br><span class="line">    col2 CHAR(5),</span><br><span class="line">    col3 DATE</span><br><span class="line">) </span><br><span class="line">PARTITION BY LINEAR KEY (col1)</span><br><span class="line">PARTITIONS 3;</span><br></pre></td></tr></table></figure>
<p>在KEY分区中使用关键字LINEAR和在HASH分区中使用具有同样的作用，分区的编号是通过2的幂（powers-of-two）算法得到，而不是通过模数算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【转自】&lt;a href=&quot;https://blog.csdn.net/tjcyjd/article/details/11194489&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/tjcyjd/a
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
