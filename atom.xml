<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不忘初心</title>
  <subtitle>李奉华的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.forwardlee.com/"/>
  <updated>2018-05-29T07:17:34.012Z</updated>
  <id>http://www.forwardlee.com/</id>
  
  <author>
    <name>ForwardLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis主从复制原理</title>
    <link href="http://www.forwardlee.com/2018/05/29/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://www.forwardlee.com/2018/05/29/Redis主从复制原理/</id>
    <published>2018-05-29T06:37:15.000Z</published>
    <updated>2018-05-29T07:17:34.012Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="主从复制原理">主从复制原理</span></h1><p> <img src="/2018/05/29/Redis主从复制原理/Redis主从复制原理.jpg" alt="Redis主从复制原理"><br> PS:新的slave节点连接master同步复制数据，是一个完整的数据同步过程，叫做full resynchronization操作。</p>
<h1><span id="断点续传">断点续传</span></h1><p> Redis在主从数据同步过程中，master会在内存中创建backlog日志，把同步的数据位置标识offset记录在backlog中，master和slave都会记录masterid和offset，如果slave在同步数据过程中断开了与master之间的连接，等到再次连接时，slave会从上次记录的offset开始同步数据，而不是全部重新同步。</p>
<h1><span id="无磁盘操作设置">无磁盘操作设置</span></h1><p>Redis在默认配置下进行主从同步复制数据，只在内存中就能完成操作，不需要数据在磁盘落地。master在内存中拷贝一份完整的数据快照，通过slave socket发送给slave，slave在内存中加载数据。<br>当然Redis也支持数据在磁盘落地的方式进行主从复制。需要修改以下配置：</p>
<pre><code># 无磁盘操作 根据英语语境肯定回答要使用无磁盘操作，就配置为no；如果使用磁盘操作，就配置为yes。
repl-diskless-sync no 
# 延迟多少秒后开始数据同步，目的是等待更多的slave节点连接上master一起同步数据。如果master已经完成完整数据快照的拷贝，那么新的slave节点就无法再连接master，直到这次同步完成为止。
repl-diskless-sync-delay 5

</code></pre><h1><span id="过期key数据同步">过期key数据同步</span></h1><p>master中的key在一定时间有效后会做过期处理，对于这样的过期key，master会向slave发送一条del操作指令，在slave节点删除过期key的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;span id=&quot;主从复制原理&quot;&gt;主从复制原理&lt;/span&gt;&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/2018/05/29/Redis主从复制原理/Redis主从复制原理.jpg&quot; alt=&quot;Redis主从复制原理&quot;&gt;&lt;br&gt; PS:新的slave节点连接master同步
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据灾备和恢复过程中踩到的雷</title>
    <link href="http://www.forwardlee.com/2018/05/28/Redis%E6%95%B0%E6%8D%AE%E7%81%BE%E5%A4%87%E5%92%8C%E6%81%A2%E5%A4%8D%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E5%88%B0%E7%9A%84%E9%9B%B7/"/>
    <id>http://www.forwardlee.com/2018/05/28/Redis数据灾备和恢复过程中踩到的雷/</id>
    <published>2018-05-28T08:35:45.000Z</published>
    <updated>2018-05-28T10:32:03.574Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="生产环境配置策略">生产环境配置策略</span></h1><p>RDB 生成快照的频率策略要在每分钟生成一次，但是有多少key发生变化可根据自身业务量配置。<br>save 60 1000</p>
<p>AOF 在生产环境一定要打开，与RDB同时运行，fsync策略为everysec。</p>
<h1><span id="生产环境备份策略">生产环境备份策略</span></h1><p>RDB主要做冷备，用craontab执行定时脚本，做数据备份。<br>备份数据保留48小时，脚本清理48小时以前的数据。<br>每天备份当日的数据，每天的数据保存一个月。<br>把所有数据再备份到远程云服务器上。</p>
<p>每小时备份脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cur_date=`date +%Y%m%d%H`</span><br><span class="line">rm -rf /var/redis/6379/bak/hour/$cur_date</span><br><span class="line">cp /var/redis/6379/dump.rdb /var/redis/6379/bak/hour/$cur_date</span><br><span class="line"></span><br><span class="line">pre_date=`date -d -48hour +%Y%m%d%H`</span><br><span class="line">rm -rf /var/redis/6379/bak/hour/$pre_date</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>每天备份</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cur_date=`date +%Y%m%d`</span><br><span class="line">rm -rf /var/redis/6379/bak/hour/$cur_date</span><br><span class="line">cp /var/redis/6379/dump.rdb /var/redis/6379/bak/dayli/$cur_date</span><br><span class="line"></span><br><span class="line">pre_date=`date -d -1month +%Y%m%d`</span><br><span class="line">rm -rf /var/redis/6379/bak/dayli/$pre_date</span><br></pre></td></tr></table></figure>
<p>创建定时脚本crontab -e</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 dayli]# crontab -e</span><br><span class="line">0 * * * * sh /usr/local/redis/redis_rdb_data_bak_hour.sh</span><br><span class="line">0 0 * * * sh /usr/local/redis/redis_rdb_data_bak_dayli.sh</span><br></pre></td></tr></table></figure>
<h1><span id="踩过雷后的数据恢复流程">踩过雷后的数据恢复流程</span></h1><p><strong>NO.1雷：</strong>我们理解的redis优先使用aof文件恢复数据，如果aof文件没有数据，应该从rdb恢复数据。【错】</p>
<p><strong>原因：</strong>在redis配置文件中appendonly为yes，把备份数据拷贝到redis数据目录下，启动redis服务，并没有加载备份数据，而是优先加载了aof空数据，恢复失败。</p>
<p><strong>NO.2雷：</strong>既然优先使用aof恢复数据，那么我们把aof文件删除掉，再启动redis服务，恢复rdb数据。【错】</p>
<p><strong>原因：</strong>即使删除了aof文件，redis在启动时也会优先检查是否存在aof文件，如果没有则创建一个空的aof文件并加载空数据。恢复失败。</p>
<p><strong>NO.3雷：</strong>把redis配置的appendonly设置为no，再恢复rdb数据，启动redis加载rdb数据后，再停掉redis，修改配置appendonly为yes，再启动redis，恢复数据。【错】</p>
<p><strong>原因：</strong>配置appendonly为no，那么redis的appendonly.aof文件将失效，其中的数据也将不是正确的数据，恢复rdb数据后，再把appendonly修改为yes，此时再重启redis服务，redis将加载appendonly.aof的错误数据。恢复失败。</p>
<h2><span id="正确的数据恢复流程">正确的数据恢复流程</span></h2><p>停止redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli SHUDOWN</span><br></pre></td></tr></table></figure>
<p>修改redis配置vi /etc/redis/6379.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">appendonly no</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>删除aof文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/redis/6379/appendonly.aof</span><br></pre></td></tr></table></figure>
<p>拷贝最新一个小时的数据到redis目录下命名为dump.rdb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /var/redis/6379/bak/2019052600 /var/redis/6379/dump.rdb</span><br></pre></td></tr></table></figure>
<p>启动redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">./redis_6379 start</span><br></pre></td></tr></table></figure>
<p><strong>热配置redis的appendonly为yes，这是最重要的一步。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@eshop-cache01 src]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; config get appendonly</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;no&quot;</span><br><span class="line">127.0.0.1:6379&gt; config set appendonly yes</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>停止redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli SHUDOWN</span><br></pre></td></tr></table></figure>
<p>修改redis配置vi /etc/redis/6379.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">appendonly yes</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>启动redis服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">./redis_6379 start</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产环境配置策略&quot;&gt;&lt;a href=&quot;#生产环境配置策略&quot; class=&quot;headerlink&quot; title=&quot;生产环境配置策略&quot;&gt;&lt;/a&gt;生产环境配置策略&lt;/h1&gt;&lt;p&gt;RDB 生成快照的频率策略要在每分钟生成一次，但是有多少key发生变化可根据自身业务量配置。&lt;br&gt;save 60 1000&lt;/p&gt;
&lt;p&gt;AOF 在生产环境一定要打开，与RDB同时运行，fsync策略为everysec。&lt;/p&gt;
&lt;h1 id=&quot;生产环境备份策略&quot;&gt;&lt;a href=&quot;#生产环境备份策略&quot; class=&quot;headerlink&quot; title=&quot;生产环境备份策略&quot;&gt;&lt;/a&gt;生产环境备份策略&lt;/h1&gt;&lt;p&gt;RDB主要做冷备，用craontab执行定时脚本，做数据备份。&lt;br&gt;备份数据保留48小时，脚本清理48小时以前的数据。&lt;br&gt;每天备份当日的数据，每天的数据保存一个月。&lt;br&gt;把所有数据再备份到远程云服务器上。&lt;/p&gt;
&lt;p&gt;每小时备份脚本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur_date=`date +%Y%m%d%H`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/redis/6379/bak/hour/$cur_date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /var/redis/6379/dump.rdb /var/redis/6379/bak/hour/$cur_date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pre_date=`date -d -48hour +%Y%m%d%H`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/redis/6379/bak/hour/$pre_date&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
      <category term="缓存" scheme="http://www.forwardlee.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化方式RDB和AOF比较应用</title>
    <link href="http://www.forwardlee.com/2018/05/25/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8FRDB%E5%92%8CAOF%E6%AF%94%E8%BE%83%E5%BA%94%E7%94%A8/"/>
    <id>http://www.forwardlee.com/2018/05/25/Redis持久化方式RDB和AOF比较应用/</id>
    <published>2018-05-25T10:00:11.000Z</published>
    <updated>2018-05-25T14:57:51.805Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/05/25/Redis持久化方式RDB和AOF比较应用/RDB和AOF的介绍.png" alt="RDB和AOF工作原理"></p>
<h1><span id="rdb持久化方式的工作原理">RDB持久化方式的工作原理</span></h1><p>设定时间间隔t内有n次key的操作检查，就进行持久化。例如save 60 1000，每个60秒有1000个key发生变化，则进行持久化。<br>RDB在做持久化时，保存完整的一份数据快照，旧的快照文件被覆盖。</p>
<h2><span id="rdb持久化方案的优点">RDB持久化方案的优点</span></h2><p>（1）持久化的时间间隔可以由redis控制，所以可以按照一定的时间间隔把数据快照文件拷贝出来，更好的支撑数据冷备份。<br>（2）RDB持久化文件是Redis数据文件，在做redis故障恢复时，数据加载效率更高。<br>（3）Redis数据操作都在内存中进行，效率高。<br>（4）Redis会创建一个副本进程（fork）进行数据持久化，持久化过程中，对redis本身的数据操作影响较小。</p>
<h2><span id="rdb持久化方式的缺点">RDB持久化方式的缺点</span></h2><p>（1）两次持久化操作的间隔时间内，Redis发生故障，那么将丢失这个时间内的所有数据。–重点<br>（2）当两次持久化操作间隔时间较长，Redis内可能产生大量新的数据，生成数据快照文件时，可能导致Redis数据服务暂停数秒。</p>
<a id="more"></a>
<h1><span id="aof持久化方式的工作原理">AOF持久化方式的工作原理</span></h1><p>设定一个AOF持久化文件大小，Redis每隔1秒进行一次append only的完整数据指令日志的写文件持久化操作，当AOF文件大小达到指定大小后，Redis会使用LRU算法淘汰无效数据，缩小数据大小，重新创建一个AOF文件，旧的AOF文件就会删除。<br>AOF在做持久化时，保存的是完整数据的写指令日志数据。</p>
<p>PS:现代操作系统的写文件操作过程是，先将文件数据写入到系统os cache缓存层，当os cache内的数据达到一定量后，再写入磁盘。</p>
<h2><span id="aof持久化方式的优点">AOF持久化方式的优点</span></h2><p>（1）数据持久化每秒钟进行一次，即使Redis发生故障，丢失的数据只是1秒钟的数据。–重点<br>（2）数据持久化时，数据从os cache中写入磁盘时，文件不易破损，即使破损，redis有可用的工具进行修复。</p>
<h2><span id="aof持久化方式的缺点">AOF持久化方式的缺点</span></h2><p>（1）Redis数据操作每次都些人os cache中，要比直接写入内存效率有所降低，导致Redis的吞吐量QPS略有下降。<br>（2）AOF文件的rewrite时机不可控，所以不容易实现数据备份。<br>（3）持久化保存的是全量数据的写指令日志，并非Redis数据文件，在Redis启动加载数据时，效率低下。–重点</p>
<h2><span id="rdb和aof持久化方式选择">RDB和AOF持久化方式选择</span></h2><p>两种方式，各有优缺点。RDB效率更高，但是丢失数据量会比较大；AOF的数据要进行写文件操作，效率略低，但是保存的持久化数据更完整。在实际应用中，通常会同时选择两种方案。<br>可用方案：<br>实现Redis主从集群，主节点用AOF，保证数据更好的完整性，即使出现故障，也能从故障中恢复数据，虽然AOF方式的Redis数据QPS会下降，但影响不大；从节点用短时间间隔（秒级）的RDB，从节点对外不提供服务，这样从节点出现故障的几率就会大大降低，RDB方式能够很好的实现数据文件的备份。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/05/25/Redis持久化方式RDB和AOF比较应用/RDB和AOF的介绍.png&quot; alt=&quot;RDB和AOF工作原理&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;RDB持久化方式的工作原理&quot;&gt;&lt;a href=&quot;#RDB持久化方式的工作原理&quot; class=&quot;headerlink&quot; title=&quot;RDB持久化方式的工作原理&quot;&gt;&lt;/a&gt;RDB持久化方式的工作原理&lt;/h1&gt;&lt;p&gt;设定时间间隔t内有n次key的操作检查，就进行持久化。例如save 60 1000，每个60秒有1000个key发生变化，则进行持久化。&lt;br&gt;RDB在做持久化时，保存完整的一份数据快照，旧的快照文件被覆盖。&lt;/p&gt;
&lt;h2 id=&quot;RDB持久化方案的优点&quot;&gt;&lt;a href=&quot;#RDB持久化方案的优点&quot; class=&quot;headerlink&quot; title=&quot;RDB持久化方案的优点&quot;&gt;&lt;/a&gt;RDB持久化方案的优点&lt;/h2&gt;&lt;p&gt;（1）持久化的时间间隔可以由redis控制，所以可以按照一定的时间间隔把数据快照文件拷贝出来，更好的支撑数据冷备份。&lt;br&gt;（2）RDB持久化文件是Redis数据文件，在做redis故障恢复时，数据加载效率更高。&lt;br&gt;（3）Redis数据操作都在内存中进行，效率高。&lt;br&gt;（4）Redis会创建一个副本进程（fork）进行数据持久化，持久化过程中，对redis本身的数据操作影响较小。&lt;/p&gt;
&lt;h2 id=&quot;RDB持久化方式的缺点&quot;&gt;&lt;a href=&quot;#RDB持久化方式的缺点&quot; class=&quot;headerlink&quot; title=&quot;RDB持久化方式的缺点&quot;&gt;&lt;/a&gt;RDB持久化方式的缺点&lt;/h2&gt;&lt;p&gt;（1）两次持久化操作的间隔时间内，Redis发生故障，那么将丢失这个时间内的所有数据。–重点&lt;br&gt;（2）当两次持久化操作间隔时间较长，Redis内可能产生大量新的数据，生成数据快照文件时，可能导致Redis数据服务暂停数秒。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.forwardlee.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.8 + MariaDB 10.0 with Galera Cluster+Keepalived高可用解决方案</title>
    <link href="http://www.forwardlee.com/2018/05/24/CentOS-6-8-MariaDB-10-0-with-Galera-Cluster-Keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.forwardlee.com/2018/05/24/CentOS-6-8-MariaDB-10-0-with-Galera-Cluster-Keepalived高可用解决方案/</id>
    <published>2018-05-24T11:40:46.000Z</published>
    <updated>2018-05-25T15:03:40.090Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="环境准备">环境准备</span></h1><p>使用三台最小化安装的CentOS 6.8 x86_64新环境。</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>节点名称</th>
<th>节点IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>donor</td>
<td>db1</td>
<td>192.168.1.150</td>
</tr>
<tr>
<td>node1</td>
<td>db2</td>
<td>192.168.1.151</td>
</tr>
<tr>
<td>node2</td>
<td>db3</td>
<td>192.168.1.152</td>
</tr>
</tbody>
</table>
<h1><span id="step-1-设置mariadb的yum安装源">Step 1- 设置MariaDB的yum安装源</span></h1><p>创建/etc/yum.repos.d/mariadb.repo</p>
<p>CentOS 6 – 64bit系统mariadb.repo内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.0/centos6-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<p>For CentOS 6 – 32bit系统mariadb.repo内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.0/centos6-x86</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1><span id="step-2-设置selinux状态">Step 2 – 设置SELinux状态</span></h1><p>在开始安装之前，先把三台机器的SELinux状态设置为permissive，临时设置如下，重启失效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setenforce 0</span><br></pre></td></tr></table></figure>
<p>永久设置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced. default</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=permissive</span><br><span class="line"># SELINUXTYPE= can take one of these two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h1><span id="step-3-安装-mariadb-galera-cluster-100">Step 3 – 安装 MariaDB Galera Cluster 10.0</span></h1><p>使用yum安装MariaDB Galera Cluster，需要先安装socat工具包，用来确保yum可以找到安装源。<br>CentOS 6用以下方式安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/s/socat-1.7.2.3-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>CentOS 7用以下方式安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install socat</span><br></pre></td></tr></table></figure>
<p>开始安装数据库集群环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install MariaDB-Galera-server MariaDB-client rsync galera</span><br></pre></td></tr></table></figure>
<h1><span id="step-4-mariadb安全性设置">Step 4:  MariaDB安全性设置</span></h1><p>MariaDB是Mysql的一个分支，所以使用Mysql的命令启动数据库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>
<p>执行以下脚本，并按提示进行相应操作，提升数据库安全。设置root初始密码为。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>我把root用户密码设置为root。</p>
<h1><span id="step-5-创建mariadb-galera-cluster集群数据通信用户">Step 5 – 创建MariaDB Galera Cluster集群数据通信用户</span></h1><p>创建一个集群节点之间进行数据状态快照转移（State Transfer Snapshot – SST）所使用的用户账号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; DELETE FROM mysql.user WHERE user=&apos;&apos;;</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;dbpass&apos;;</span><br><span class="line">mysql&gt; GRANT USAGE ON *.* to galera@&apos;%&apos; IDENTIFIED BY &apos;galera&apos;;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES on *.* to galera@&apos;%&apos;;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure>
<p>在开发或测试环境中，使用%表示任意主机，也就是说允许root用户和<br>galera用户可以从任意主机登访问数据库。出于安全考虑，你可以把%替换成你所允许的主机名称或者主机IP地址。</p>
<h1><span id="step-6-mariadb-galera-cluster-集群配置">Step 6 – MariaDB Galera Cluster 集群配置</span></h1><p>停止Mysql服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure>
<p>先创建Donor节点的配置信息。<br>Donor节点只用来同步数据，不能有外部链接操作Donor节点数据，保证Donor节点的健康状态，维护正常的集群运行状态。其他节点只需要修改wsrep_node_address=’192.168.1.150’和wsrep_node_name=’db1’两个配置即可，其他配置相同。</p>
<p>向/etc/my.cnf.d/server.cnf文件中添加以下配置信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &gt;&gt; /etc/my.cnf.d/servebinlog_format=ROW</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=innodb</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">innodb_locks_unsafe_for_binlog=1</span><br><span class="line">query_cache_size=0</span><br><span class="line">query_cache_type=0</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">innodb_log_file_size=100M</span><br><span class="line">innodb_file_per_table</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=&quot;gcomm://192.168.1.150,192.168.1.151,192.168.1.152&quot;</span><br><span class="line">wsrep_cluster_name=&apos;galera_cluster&apos;</span><br><span class="line">wsrep_node_address=&apos;192.168.1.150&apos;</span><br><span class="line">wsrep_node_name=&apos;db1&apos;</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line">wsrep_sst_auth=sst_user:dbpass</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>wsrep_cluster_address配置省略了默认端口4567。</p>
<p>其他两个节点所需要修改的配置：</p>
<p>node1节点 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsrep_node_address=&apos;192.168.1.151&apos;</span><br><span class="line">wsrep_node_name=&apos;db2&apos;</span><br></pre></td></tr></table></figure>
<p>node2节点 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsrep_node_address=&apos;192.168.1.152&apos;</span><br><span class="line">wsrep_node_name=&apos;db3&apos;</span><br></pre></td></tr></table></figure>
<h1><span id="step-7-初始化donor节点">Step 7– 初始化Donor节点</span></h1><p>Donor节点是整个集群的优先初始化节点，只有Donor节点先启动，其他子节点才能正常加入到集群当中。启动Donor节点，需要配置‐‐wsrep-new-cluster参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql start --wsrep-new-cluster</span><br></pre></td></tr></table></figure>
<p>运行以下命令，查看集群的运行状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -e&quot;show status like &apos;wsrep%&apos;&quot;</span><br></pre></td></tr></table></figure>
<p>输出以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------+-----------------------------------------------+</span><br><span class="line">| Variable_name                | Value                                         |</span><br><span class="line">+------------------------------+-----------------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid       | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564          |</span><br><span class="line">| wsrep_protocol_version       | 8                                             |</span><br><span class="line">| wsrep_last_committed         | 2                                             |</span><br><span class="line">| wsrep_replicated             | 0                                             |</span><br><span class="line">| wsrep_replicated_bytes       | 0                                             |</span><br><span class="line">| wsrep_repl_keys              | 0                                             |</span><br><span class="line">| wsrep_repl_keys_bytes        | 0                                             |</span><br><span class="line">| wsrep_repl_data_bytes        | 0                                             |</span><br><span class="line">| wsrep_repl_other_bytes       | 0                                             |</span><br><span class="line">| wsrep_received               | 10                                            |</span><br><span class="line">| wsrep_received_bytes         | 2304                                          |</span><br><span class="line">| wsrep_local_commits          | 0                                             |</span><br><span class="line">| wsrep_local_cert_failures    | 0                                             |</span><br><span class="line">| wsrep_local_replays          | 0                                             |</span><br><span class="line">| wsrep_local_send_queue       | 0                                             |</span><br><span class="line">| wsrep_local_send_queue_max   | 1                                             |</span><br><span class="line">| wsrep_local_send_queue_min   | 0                                             |</span><br><span class="line">| wsrep_local_send_queue_avg   | 0.000000                                      |</span><br><span class="line">| wsrep_local_recv_queue       | 0                                             |</span><br><span class="line">| wsrep_local_recv_queue_max   | 2                                             |</span><br><span class="line">| wsrep_local_recv_queue_min   | 0                                             |</span><br><span class="line">| wsrep_local_recv_queue_avg   | 0.100000                                      |</span><br><span class="line">| wsrep_local_cached_downto    | 1                                             |</span><br><span class="line">| wsrep_flow_control_paused_ns | 0                                             |</span><br><span class="line">| wsrep_flow_control_paused    | 0.000000                                      |</span><br><span class="line">| wsrep_flow_control_sent      | 0                                             |</span><br><span class="line">| wsrep_flow_control_recv      | 0                                             |</span><br><span class="line">| wsrep_cert_deps_distance     | 1.000000                                      |</span><br><span class="line">| wsrep_apply_oooe             | 0.000000                                      |</span><br><span class="line">| wsrep_apply_oool             | 0.000000                                      |</span><br><span class="line">| wsrep_apply_window           | 1.000000                                      |</span><br><span class="line">| wsrep_commit_oooe            | 0.000000                                      |</span><br><span class="line">| wsrep_commit_oool            | 0.000000                                      |</span><br><span class="line">| wsrep_commit_window          | 1.000000                                      |</span><br><span class="line">| wsrep_local_state            | 4                                             |</span><br><span class="line">| wsrep_local_state_comment    | Synced                                        |</span><br><span class="line">| wsrep_cert_index_size        | 1                                             |</span><br><span class="line">| wsrep_causal_reads           | 0                                             |</span><br><span class="line">| wsrep_cert_interval          | 0.000000                                      |</span><br><span class="line">| wsrep_incoming_addresses     | 192.168.1.150:3306                            |</span><br><span class="line">| wsrep_desync_count           | 0                                             |</span><br><span class="line">| wsrep_evs_delayed            |                                               |</span><br><span class="line">| wsrep_evs_evict_list         |                                               |</span><br><span class="line">| wsrep_evs_repl_latency       | 4.67e-06/9.14775e-06/1.1497e-05/2.63955e-06/4 |</span><br><span class="line">| wsrep_evs_state              | OPERATIONAL                                   |</span><br><span class="line">| wsrep_gcomm_uuid             | 559ef6a3-5f45-11e8-92a5-52514b1a7147          |</span><br><span class="line">| wsrep_cluster_conf_id        | 7                                             |</span><br><span class="line">| wsrep_cluster_size           | 1                                             |</span><br><span class="line">| wsrep_cluster_state_uuid     | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564          |</span><br><span class="line">| wsrep_cluster_status         | Primary                                       |</span><br><span class="line">| wsrep_connected              | ON                                            |</span><br><span class="line">| wsrep_local_bf_aborts        | 0                                             |</span><br><span class="line">| wsrep_local_index            | 0                                             |</span><br><span class="line">| wsrep_provider_name          | Galera                                        |</span><br><span class="line">| wsrep_provider_vendor        | Codership Oy &lt;info@codership.com&gt;             |</span><br><span class="line">| wsrep_provider_version       | 25.3.23(r3789)                                |</span><br><span class="line">| wsrep_ready                  | ON                                            |</span><br><span class="line">| wsrep_thread_count           | 2                                             |</span><br><span class="line">+------------------------------+-----------------------------------------------+</span><br><span class="line">58 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>重点查看这些信息是否正确：<br>wsrep_cluster_size 当前集群中节点个数<br>wsrep_local_state_comment 集群数据同步状态<br>wsrep_incoming_addresses 数据提供方节点地址和端口<br>wsrep_ready ON集群状态正常<br>wsrep_connected ON集群连接状态正常</p>
<h1><span id="step-8-动态添加集群节点">Step 8– 动态添加集群节点</span></h1><p>按照Step6的操作，配置node1和node2两个节点的配置文件，用以下命令启动集群子节点。注意与Donor节点的启动方式不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>
<p>检查node1和node2两个节点的状态，是否正常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;&quot;</span><br></pre></td></tr></table></figure>
<p>node1和node2两个子节点启动后，状态查询结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------+----------------------------------------------------------+</span><br><span class="line">| Variable_name                | Value                                                    |</span><br><span class="line">+------------------------------+----------------------------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid       | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564                     |</span><br><span class="line">| wsrep_protocol_version       | 8                                                        |</span><br><span class="line">| wsrep_last_committed         | 2                                                        |</span><br><span class="line">| wsrep_replicated             | 0                                                        |</span><br><span class="line">| wsrep_replicated_bytes       | 0                                                        |</span><br><span class="line">| wsrep_repl_keys              | 0                                                        |</span><br><span class="line">| wsrep_repl_keys_bytes        | 0                                                        |</span><br><span class="line">| wsrep_repl_data_bytes        | 0                                                        |</span><br><span class="line">| wsrep_repl_other_bytes       | 0                                                        |</span><br><span class="line">| wsrep_received               | 3                                                        |</span><br><span class="line">| wsrep_received_bytes         | 476                                                      |</span><br><span class="line">| wsrep_local_commits          | 0                                                        |</span><br><span class="line">| wsrep_local_cert_failures    | 0                                                        |</span><br><span class="line">| wsrep_local_replays          | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue       | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue_max   | 1                                                        |</span><br><span class="line">| wsrep_local_send_queue_min   | 0                                                        |</span><br><span class="line">| wsrep_local_send_queue_avg   | 0.000000                                                 |</span><br><span class="line">| wsrep_local_recv_queue       | 0                                                        |</span><br><span class="line">| wsrep_local_recv_queue_max   | 1                                                        |</span><br><span class="line">| wsrep_local_recv_queue_min   | 0                                                        |</span><br><span class="line">| wsrep_local_recv_queue_avg   | 0.000000                                                 |</span><br><span class="line">| wsrep_local_cached_downto    | 18446744073709551615                                     |</span><br><span class="line">| wsrep_flow_control_paused_ns | 0                                                        |</span><br><span class="line">| wsrep_flow_control_paused    | 0.000000                                                 |</span><br><span class="line">| wsrep_flow_control_sent      | 0                                                        |</span><br><span class="line">| wsrep_flow_control_recv      | 0                                                        |</span><br><span class="line">| wsrep_cert_deps_distance     | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_oooe             | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_oool             | 0.000000                                                 |</span><br><span class="line">| wsrep_apply_window           | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_oooe            | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_oool            | 0.000000                                                 |</span><br><span class="line">| wsrep_commit_window          | 0.000000                                                 |</span><br><span class="line">| wsrep_local_state            | 4                                                        |</span><br><span class="line">| wsrep_local_state_comment    | Synced                                                   |</span><br><span class="line">| wsrep_cert_index_size        | 0                                                        |</span><br><span class="line">| wsrep_causal_reads           | 0                                                        |</span><br><span class="line">| wsrep_cert_interval          | 0.000000                                                 |</span><br><span class="line">| wsrep_incoming_addresses     | 192.168.1.151:3306,192.168.1.152:3306,192.168.1.150:3306 |</span><br><span class="line">| wsrep_desync_count           | 0                                                        |</span><br><span class="line">| wsrep_evs_delayed            |                                                          |</span><br><span class="line">| wsrep_evs_evict_list         |                                                          |</span><br><span class="line">| wsrep_evs_repl_latency       | 0.00115351/0.00145445/0.0018473/0.000297523/4            |</span><br><span class="line">| wsrep_evs_state              | OPERATIONAL                                              |</span><br><span class="line">| wsrep_gcomm_uuid             | 273a3916-5f4f-11e8-88db-8ab9682bb4ca                     |</span><br><span class="line">| wsrep_cluster_conf_id        | 9                                                        |</span><br><span class="line">| wsrep_cluster_size           | 3                                                        |</span><br><span class="line">| wsrep_cluster_state_uuid     | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564                     |</span><br><span class="line">| wsrep_cluster_status         | Primary                                                  |</span><br><span class="line">| wsrep_connected              | ON                                                       |</span><br><span class="line">| wsrep_local_bf_aborts        | 0                                                        |</span><br><span class="line">| wsrep_local_index            | 0                                                        |</span><br><span class="line">| wsrep_provider_name          | Galera                                                   |</span><br><span class="line">| wsrep_provider_vendor        | Codership Oy &lt;info@codership.com&gt;                        |</span><br><span class="line">| wsrep_provider_version       | 25.3.23(r3789)                                           |</span><br><span class="line">| wsrep_ready                  | ON                                                       |</span><br><span class="line">| wsrep_thread_count           | 2                                                        |</span><br><span class="line">+------------------------------+----------------------------------------------------------+</span><br><span class="line">58 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1><span id="step-9-验证数据同步复制">Step 9 – 验证数据同步复制</span></h1><p>模拟场景1：集群中三个节点全部正常启动。<br>在node1和node2两个节点分别创建库和表，查看donor节点是否正常的同步更新数据。</p>
<p>模拟场景2：node1和node2中的一个节点宕机。<br>在没有宕机的节点（除donor节点）中进行数据CUD操作，先查看donor节点是否正常的同步更新数据，如果正常，则重新启动宕机节点，启动成功后，查看该节点能否正常的把不一致的数据同步过来。</p>
<p><strong>PS:Galera在加入数据不一致的节点时，外部不能访问该节点，直到数据同步后才能访问该节点。</strong></p>
<h1><span id="keepalived实现mariadb集群的高可用配">Keepalived实现MariaDB集群的高可用配</span></h1><p>请参考这篇文章<a href="http://www.forwardlee.com/2018/05/23/Keepalived-HA-LVS-Galera-Cluster%E7%8E%AF%E5%A2%83/">《Keepalived HA +LVS+ Galera Cluster环境》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;使用三台最小化安装的CentOS 6.8 x86_64新环境。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;节点名称&lt;/th&gt;
&lt;th&gt;节点IP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;donor&lt;/td&gt;
&lt;td&gt;db1&lt;/td&gt;
&lt;td&gt;192.168.1.150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node1&lt;/td&gt;
&lt;td&gt;db2&lt;/td&gt;
&lt;td&gt;192.168.1.151&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node2&lt;/td&gt;
&lt;td&gt;db3&lt;/td&gt;
&lt;td&gt;192.168.1.152&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Step-1-设置MariaDB的yum安装源&quot;&gt;&lt;a href=&quot;#Step-1-设置MariaDB的yum安装源&quot; class=&quot;headerlink&quot; title=&quot;Step 1- 设置MariaDB的yum安装源&quot;&gt;&lt;/a&gt;Step 1- 设置MariaDB的yum安装源&lt;/h1&gt;&lt;p&gt;创建/etc/yum.repos.d/mariadb.repo&lt;/p&gt;
&lt;p&gt;CentOS 6 – 64bit系统mariadb.repo内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mariadb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl = http://yum.mariadb.org/10.0/centos6-amd64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For CentOS 6 – 32bit系统mariadb.repo内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mariadb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl = http://yum.mariadb.org/10.0/centos6-x86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MariaDB" scheme="http://www.forwardlee.com/tags/MariaDB/"/>
    
      <category term="Keepalived" scheme="http://www.forwardlee.com/tags/Keepalived/"/>
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="CentOS" scheme="http://www.forwardlee.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Galera Cluster 3 + Mysql wresp 5.6安装配置</title>
    <link href="http://www.forwardlee.com/2018/05/24/Galera-Cluster-3-Mysql-wresp-5-6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.forwardlee.com/2018/05/24/Galera-Cluster-3-Mysql-wresp-5-6安装配置/</id>
    <published>2018-05-24T05:02:55.000Z</published>
    <updated>2018-05-25T13:10:11.936Z</updated>
    
    <content type="html"><![CDATA[<p>安装yum-builddep工具<br>yum install yum-utils –enablerepo=extras</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装yum-builddep工具&lt;br&gt;yum install yum-utils –enablerepo=extras&lt;/p&gt;

    
    </summary>
    
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Keepalived HA +LVS+ Galera Cluster环境</title>
    <link href="http://www.forwardlee.com/2018/05/23/Keepalived-HA-LVS-Galera-Cluster%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.forwardlee.com/2018/05/23/Keepalived-HA-LVS-Galera-Cluster环境/</id>
    <published>2018-05-23T08:14:48.000Z</published>
    <updated>2018-05-25T13:10:56.111Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Galera Cluster实现Mysql集群</a>，再配合Keepalived的VRRP和LVS实现Mysql集群的高可用和负载均衡。</p>
<p>开发环境CentOS 6.8 + Mysql Galera 5.5 + Keepalived 1.4.4</p>
<p>1.安装Keepalived</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install kernel-devel</span><br><span class="line"></span><br><span class="line">yum -y install ipvsadm</span><br></pre></td></tr></table></figure>
<p>命令号执行ipvsadm是否安装成功，如果可以执行，则说明已经安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.keepalived.org/software/keepalived-1.4.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zvxf keepalived-1.4.4.tar.gz</span><br></pre></td></tr></table></figure>
<p>找到Linux的内核源码路径，不同版本的操作系统版本号不同。<br> /usr/src/kernels/2.6.32-696.30.1.el6.x86_64/</p>
<p> 安装到/usr/local/keepalived目录，安装LVS功能需要指定内容源码路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived --with-kernel-dir=/usr/src/kernels/2.6.32-696.30.1.el6.x86_64</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Keepalived configuration</span><br><span class="line">------------------------</span><br><span class="line">Keepalived version       : 1.4.4</span><br><span class="line">Compiler                 : gcc</span><br><span class="line">Preprocessor flags       : -I/usr/src/kernels/2.6.32-696.30.1.el6.x86_64/include</span><br><span class="line">Compiler flags           : -Wall -Wunused -Wstrict-prototypes -Wextra -g -O2 -D_GNU_SOURCE -fPIE</span><br><span class="line">Linker flags             :  -pie</span><br><span class="line">Extra Lib                :  -lcrypto  -lssl </span><br><span class="line">Use IPVS Framework       : Yes</span><br><span class="line">IPVS use libnl           : No</span><br><span class="line">IPVS syncd attributes    : No</span><br><span class="line">IPVS 64 bit stats        : No</span><br><span class="line">fwmark socket support    : Yes</span><br><span class="line">Use VRRP Framework       : Yes</span><br><span class="line">Use VRRP VMAC            : Yes</span><br><span class="line">Use VRRP authentication  : Yes</span><br><span class="line">With ip rules/routes     : Yes</span><br><span class="line">SNMP vrrp support        : No</span><br><span class="line">SNMP checker support     : No</span><br><span class="line">SNMP RFCv2 support       : No</span><br><span class="line">SNMP RFCv3 support       : No</span><br><span class="line">DBUS support             : No</span><br><span class="line">SHA1 support             : No</span><br><span class="line">Use Debug flags          : No</span><br><span class="line">smtp-alert debugging     : No</span><br><span class="line">Use Json output          : No</span><br><span class="line">Stacktrace support       : No</span><br><span class="line">Memory alloc check       : No</span><br><span class="line">libnl version            : None</span><br><span class="line">Use IPv4 devconf         : No</span><br><span class="line">Use libiptc              : No</span><br><span class="line">Use libipset             : No</span><br><span class="line">init type                : upstart</span><br><span class="line">Build genhash            : Yes</span><br><span class="line">Build documentation      : No</span><br><span class="line"></span><br><span class="line">*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</span><br></pre></td></tr></table></figure>
<p>编译安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure>
<p>拷贝keepalived配置文件到/etc/keepalived/keepalived.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/keepalived</span><br><span class="line">cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class="line"></span><br><span class="line">cd /usr/local/keepalived/sbin/</span><br><span class="line">./keepalived</span><br></pre></td></tr></table></figure>
<p>查看keepalived运行日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/messages</span><br></pre></td></tr></table></figure>
<p>停止keepalived</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill keepalived</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">## 重点配置router_id LVS_150</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">#     admin@example.com</span><br><span class="line">   &#125;</span><br><span class="line"> #  notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">  # smtp_server 192.168.200.1</span><br><span class="line">   #smtp_connect_timeout 30</span><br><span class="line">   #router_id LVS_DEVEL</span><br><span class="line">   #vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   #vrrp_garp_interval 0</span><br><span class="line">   #vrrp_gna_interval 0</span><br><span class="line">   router_id LVS_150</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##重点配置 虚拟路由节点virtual_router_id 51，主从配置：state MASTER/SLAVE，虚拟ip可以多个用多行表示：virtual_ipaddress</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.16</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##重点配置lb_algo wrr ，lb_kind DR，路由协议protocol TCP，真实IP和端口号real_server 192.168.1.150 3306，connect_port 3306</span><br><span class="line">virtual_server 192.168.200.16 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo wrr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.1.150 3306 &#123;</span><br><span class="line">        weight 5</span><br><span class="line">	TCP_CHECK &#123;</span><br><span class="line">		connect_timeout 10</span><br><span class="line">		nb_get_retry 3</span><br><span class="line">		delay_before_retry 3</span><br><span class="line">		connect_port 3306</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	real_server 192.168.1.152 3306 &#123;</span><br><span class="line">        weight 5</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 启动keepalived</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./keepalived</span><br></pre></td></tr></table></figure>
<p>在虚拟IP对应的其他节点，按照上述同样的操作安装keepalived，环境准备完成后，可以通过虚拟IP访问mysql数据库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 192.168.200.16 -ugalera -pgalera</span><br></pre></td></tr></table></figure>
<p>后续问题：在Mysql Galera Cluster单点故障的恢复和重启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/&quot;&gt;Galera Clust
    
    </summary>
    
    
      <category term="Keepalived" scheme="http://www.forwardlee.com/tags/Keepalived/"/>
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.8+MySQL 5.5 with Galera Cluster环境搭建</title>
    <link href="http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.forwardlee.com/2018/05/23/CentOS-6-8-MySQL-5-5-with-Galera-Cluster环境搭建/</id>
    <published>2018-05-22T16:13:16.000Z</published>
    <updated>2018-05-25T13:11:43.862Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">##先安装依赖库</span><br><span class="line">yum install libaio gcc gcc-c++ boost-devel scons check-devel openssl-devel</span><br><span class="line">ln -sf /usr/lib64/libssl.so.10 /usr/lib64/libssl.so.6</span><br><span class="line">ln -sf /usr/lib64/libcrypto.so.10 /usr/lib64/libcrypto.so.6</span><br><span class="line">##下载MySQL with wsrep源码包，目前最新版本是5.5.34-25.9</span><br><span class="line">wget https://launchpad.net/codership-mysql/5.5/5.5.34-25.9/+download/mysql-5.5.34_wsrep_25.9-linux-x86_64.tar.gz</span><br><span class="line">tar zxvf mysql-5.5*</span><br><span class="line">mv mysql-5.5.34_wsrep_25.9-linux-x86_64 /usr/local/mysql</span><br><span class="line">cd /usr/local/mysql/</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line">chown -R mysql:mysql .</span><br><span class="line">./scripts/mysql_install_db --no-defaults --datadir=/opt/mysqldb/ --user=mysql</span><br><span class="line">chown -R root .</span><br><span class="line">chown -R mysql /opt/mysqldb/</span><br><span class="line">echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line">[root@localhost mysql]# vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>[mysqld]<br>datadir=/opt/mysqldb<br>socket = /tmp/mysql.sock<br>user=mysql</p>
<p>symbolic-links=0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">##启动Mysql</span><br><span class="line">mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line">##安装Xtrabackup</span><br><span class="line">yum install perl-DBD-MySQL perl-Time-HiRes nc</span><br><span class="line"></span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/XtraBackup-2.1.9/RPM/rhel6/x86_64/percona-xtrabackup-2.1.9-744.rhel6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh percona-xtrabackup-2.1.9-744.rhel6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">##安装Galera复制插件</span><br><span class="line">wget https://launchpad.net/galera/3.x/25.3.5/+download/galera-25.3.5-src.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf galera-25.3.5-src.tar.gz</span><br><span class="line"></span><br><span class="line">cd galera-25.3.5-src</span><br><span class="line"></span><br><span class="line">scons</span><br><span class="line"></span><br><span class="line">cp garb/garbd /usr/local/mysql/bin/</span><br><span class="line"></span><br><span class="line">cp libgalera_smm.so /usr/local/mysql/lib/plugin/</span><br></pre></td></tr></table></figure>
<p>mysql初始化配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/lib/mysql</span><br><span class="line">mkdir -p /etc/mysql/conf.d/</span><br><span class="line">chown mysql:mysql /var/lib/mysql</span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br><span class="line">##创建用于同步的帐号，注意替换掉示例值。</span><br><span class="line">mysql  -e &quot;SET wsrep_on=OFF; GRANT ALL ON *.* TO &apos;galera&apos;@&apos;%&apos; IDENTIFIED BY &apos;galera&apos;&quot;;</span><br><span class="line">##我使用的mysql版本再执行上述授权语句后，%代表任意主机，却不包含localhost，所以要给防伪localhost单独授权。</span><br><span class="line">mysql  -e &quot;SET wsrep_on=OFF; GRANT ALL ON *.* TO &apos;galera&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;galera&apos;&quot;;</span><br><span class="line">##修改root帐号密码，注意替换掉示例值。</span><br><span class="line">mysql -e &quot;SET wsrep_on=OFF;GRANT ALL PRIVILEGES ON * . * TO &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ; &quot;</span><br><span class="line"></span><br><span class="line">##查看授权</span><br><span class="line">mysql -uroot -proot;</span><br><span class="line">show grants for galera@&quot;%&quot;;</span><br><span class="line">show grants for galera@&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">##关闭MySQL</span><br><span class="line">pkill mysql</span><br></pre></td></tr></table></figure>
<p>Galera集群配置</p>
<p>修改my.cnf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>my.cnf配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/opt/mysqldb</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">######galera conf start########</span><br><span class="line">server-id=101</span><br><span class="line">wsrep_node_name = mysql1</span><br><span class="line">wsrep_provider = /usr/local/mysql/lib/plugin/libgalera_smm.so</span><br><span class="line">wsrep_sst_method = rsync</span><br><span class="line">#使用sst的用户和密码，这里如果开启，需要在mysql上创建该用户，并授予其足够的权限</span><br><span class="line">wsrep_sst_auth=galera:galera</span><br><span class="line"># 配置集群的所有节点</span><br><span class="line">wsrep_cluster_address=gcomm://192.168.1.150:4567,192.168.1.151:4567</span><br><span class="line"># 配置自己的ip:port，每个配置各不相同</span><br><span class="line">wsrep_node_address=192.168.1.150:4567</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">innodb_locks_unsafe_for_binlog=1</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">binlog_format=ROW</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line">log-slave-updates=1</span><br><span class="line"></span><br><span class="line">#[mysqld_safe]</span><br><span class="line">#log-error=/var/lib/mysql/mysqld.log</span><br><span class="line">#pid-file=/var/lib/mysql/mysqld.pid</span><br></pre></td></tr></table></figure>
<p>节点mysql1启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;</span><br></pre></td></tr></table></figure>
<p>检查启动的端口，应该有3306和4567两个端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp |grep 4567</span><br><span class="line">netstat -tunlp |grep 3306</span><br></pre></td></tr></table></figure>
<p>在集群中添加新的节点，并执行启动脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure>
<p>PS：复制虚拟机，设置新IP</p>
<p>在新的虚拟机中修改ifconfig-eth0，设置IP为192.168.1.151，去掉UUID、MAC两个参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>
<p>重建路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure>
<p>重启虚拟机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutown -r now</span><br></pre></td></tr></table></figure>
<p>测试网络</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.150</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
    
    </summary>
    
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
      <category term="CentOS" scheme="http://www.forwardlee.com/tags/CentOS/"/>
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker Galera Cluster环境快速搭建</title>
    <link href="http://www.forwardlee.com/2018/05/22/Docker-Galera-Cluster%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.forwardlee.com/2018/05/22/Docker-Galera-Cluster环境快速搭建/</id>
    <published>2018-05-22T03:12:14.000Z</published>
    <updated>2018-05-25T13:09:51.602Z</updated>
    
    <content type="html"><![CDATA[<p>使用Docker快速创建MariaDB（与MySql同源） Galera集群环境</p>
<p>Docker开发环境：MacOS High Sieera 10.13.2 (17C88)<br>MariaDB Galera Cluster容器环境：CentOS 7.3 + MariaDB 10.1.23</p>
<p>1.执行Docker拉取镜像</p>
<p><code>docker pull mjstealey/mariadb-galera:10.1</code></p>
<p>2.下载测试脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mjstealey/mariadb-galera.git</span><br><span class="line"></span><br><span class="line">cd mariadb-galera/</span><br></pre></td></tr></table></figure>
<p>下载好的代码中包括创建docker容器的脚本和测试脚本。</p>
<p>3.创建集群节点并执行测试语句</p>
<p><code>./three-node-test.sh</code></p>
<p>命令执行过程中会创建三个节点，并且执行测试sql查看集群节点数据同步是否正确。测试通过后，可以使用后续命令分别操作三个节点的数据库。</p>
<p>4.查看已经运行的节点进程</p>
<p><code>docker container ls</code></p>
<p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED              STATUS              PORTS                                                                                                NAMES</span><br><span class="line">0a06b6789c1c        mjstealey/mariadb-galera:10.1   &quot;/docker-entrypoint.…&quot;   58 seconds ago       Up 59 seconds       0.0.0.0:32791-&gt;3306/tcp, 0.0.0.0:32790-&gt;4444/tcp, 0.0.0.0:32789-&gt;4567/tcp, 0.0.0.0:32788-&gt;4568/tcp   galera-node-3</span><br><span class="line">c4e5eb6d2ba1        mjstealey/mariadb-galera:10.1   &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:32787-&gt;3306/tcp, 0.0.0.0:32786-&gt;4444/tcp, 0.0.0.0:32785-&gt;4567/tcp, 0.0.0.0:32784-&gt;4568/tcp   galera-node-2</span><br><span class="line">bf53b99d540c        mjstealey/mariadb-galera:10.1   &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:32783-&gt;3306/tcp, 0.0.0.0:32782-&gt;4444/tcp, 0.0.0.0:32781-&gt;4567/tcp, 0.0.0.0:32780-&gt;4568/tcp   galera-node-1</span><br></pre></td></tr></table></figure>
<p>5.单独进入节点操作数据库<br><code>docker exec -it bf53b99d540c mysql -uroot -ptemppassword</code></p>
<p>MariaDB数据库的root用户密码是Docker在创建容器的时候配置的，可以从Dockerfile中找到配置，直接从镜像中拉取的容器镜像，是已经配置好的。如果本地执行Docker容器创建，那么可以修改Dockerfile中的相关配置。</p>
<p>命令中bf53b99d540c是指容器进程的CONTAINER ID的值。</p>
<p>参数解释<br>-i 可交互<br>-t 分配终端</p>
<p>命令执行完会进入MariaDB的命令行交互窗口。</p>
<p>6.在任一一个节点操作数据库，数据都会在其他节点同步（接近同步）更新。<br>==Galera规则要求创建的表必须要有主键，没有主键也要指定自增列。==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user</span><br><span class="line">(</span><br><span class="line">	pkid int auto_increment primary key,</span><br><span class="line">	username varchar(255) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Docker快速创建MariaDB（与MySql同源） Galera集群环境&lt;/p&gt;
&lt;p&gt;Docker开发环境：MacOS High Sieera 10.13.2 (17C88)&lt;br&gt;MariaDB Galera Cluster容器环境：CentOS 7.3 + M
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.forwardlee.com/tags/Docker/"/>
    
      <category term="MariaDB" scheme="http://www.forwardlee.com/tags/MariaDB/"/>
    
      <category term="Galera" scheme="http://www.forwardlee.com/tags/Galera/"/>
    
  </entry>
  
  <entry>
    <title>MySql分区操作（三）</title>
    <link href="http://www.forwardlee.com/2018/05/17/MySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2018/05/17/MySql分区操作（三）/</id>
    <published>2018-05-17T02:51:51.000Z</published>
    <updated>2018-05-25T13:05:33.344Z</updated>
    
    <content type="html"><![CDATA[<p><strong>子分区操作</strong><br>常用RANGE和HASH复合分区实现子分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myblog.tbl_users_2 (</span><br><span class="line">  `pkid` INT NOT NULL ,</span><br><span class="line">  `username` VARCHAR(255) NOT NULL,</span><br><span class="line">  `password` VARCHAR(255) NOT NULL,</span><br><span class="line">  `email` VARCHAR(255) NULL,</span><br><span class="line">  `sex` CHAR(1) NULL,</span><br><span class="line">  `create_time` DATE NULL)</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8 </span><br><span class="line">PARTITION BY RANGE(YEAR(create_time))</span><br><span class="line">SUBPARTITION BY HASH(TO_DAYS(create_time))</span><br><span class="line">SUBPARTITIONS 2</span><br><span class="line">(</span><br><span class="line">PARTITION p0 VALUES LESS THAN (2010),</span><br><span class="line">PARTITION p1 VALUES LESS THAN (2017),</span><br><span class="line">PARTITION p2 VALUES LESS THAN (MAXVALUE)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TBL_USERS_2 VALUES (1,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2009-08-08&apos;);</span><br><span class="line">INSERT INTO TBL_USERS_2 VALUES (2,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2016-08-07&apos;);</span><br><span class="line">INSERT INTO TBL_USERS_2 VALUES (3,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2018-08-08&apos;);</span><br></pre></td></tr></table></figure>
<p><strong>查看产生的分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PARTITIONS SELECT *                    FROM tbl_users_2 \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tbl_users_2</span><br><span class="line">   partitions: p0_p0sp0,p0_p0sp1,p1_p1sp0,p1_p1sp1,p2_p2sp0,p2_p2sp1</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>
<p><strong>查看其中一条数据所在分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PARTITIONS SELECT *                    FROM tbl_users_2 where create_time = &apos;2017-08-07&apos;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: tbl_users_2</span><br><span class="line">   partitions: p2_p2sp1</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br></pre></td></tr></table></figure>
<p><strong>分区字段特殊性</strong></p>
<p>按字段分区的字段不能为NULL，所以在建表时需要指定分区字段为NOT NULL。</p>
<p><strong>分区管理</strong></p>
<p>删除分区和分区上的数据 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user drop partiton p0;</span><br></pre></td></tr></table></figure>
<p>增加分区<br>对于RANGE分区，只能添加比已经存在的分区范围更大的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user add partition ( partition p0 values less than (100));</span><br></pre></td></tr></table></figure></p>
<p>对于LIST分区，只能添加不存在与分区列表中的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user add partition ( partition p0 values in (100,101,102));</span><br></pre></td></tr></table></figure>
<p>也就是说，100，101，102不在已定义的LIST分区内。</p>
<p><strong>不丢失数据修改分区</strong><br> 如果原来的分区是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user(</span><br><span class="line"> pkid int not null,</span><br><span class="line"> name varchar(255)</span><br><span class="line"> )</span><br><span class="line"> partition by range(pkid) partitions 3(</span><br><span class="line"> partition p0 values less than(100),</span><br><span class="line"> partition p1 values less than(200),</span><br><span class="line"> partition p2 values  less than(300)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>==修改(拆分)分区：==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user reorganize partition p0 into</span><br><span class="line"> ( partition s0 values less than(50),</span><br><span class="line"> partition s1 values less than(100)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>相当于原来的分区是这样创建的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user(</span><br><span class="line"> pkid int not null,</span><br><span class="line"> name varchar(255)</span><br><span class="line"> )</span><br><span class="line"> partition by range(pkid) partitions 4(</span><br><span class="line"> partition s0 values less than(50),</span><br><span class="line"> partition s1 values less than(100),</span><br><span class="line"> partition p1 values less than(200),</span><br><span class="line"> partition p2 values  less than(300)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>LIST分区修改（拆分）同理。<br>==修改(合并)分区：==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user reorganize partition s0,s1 into</span><br><span class="line"> ( partition p0 values less than(100)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>删除分区，不删除数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user remove partitioning</span><br></pre></td></tr></table></figure>
<p><strong>HASH和KEY分区管理</strong></p>
<p>在没有数据的时候进行修改分区操作是可以的，如果在数据存在后再减少和增加分区，数据分布就不均匀了。</p>
<p>减少n个分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user coalesce partition 2;</span><br></pre></td></tr></table></figure>
<p>增加n个分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user add partition 2;</span><br></pre></td></tr></table></figure>
<p><strong>其他分区管理语句</strong></p>
<p>重建分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user rebuild partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>优化分区(包括分析、检查、修补分区）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user optimize partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>分析分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user analyze partiton p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>检查分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user check partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p>修补分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbl_user repair partition p0,p1,p2,p3;</span><br></pre></td></tr></table></figure>
<p><strong>其他细节</strong></p>
<p><em>分区数最大不超过1024个，实际应用中分区数不超过150个；<br>如果有唯一索引或者主键，分区列必须包含所有的唯一索引或者主键；<br>不支持外键；<br>不支持全区索引；<br>常用日期进行分区；<br>临时表不能被分区；<br>单条数据查询分区管理意义不大，除非指定数据所在分区；<br>计算分区成本，因为每次插入数据都会进行分区计算，分区函数不能过于复杂；<br>分区字段不能为NULL；</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;子分区操作&lt;/strong&gt;&lt;br&gt;常用RANGE和HASH复合分区实现子分区&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySql分区操作（二）</title>
    <link href="http://www.forwardlee.com/2018/05/17/MySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2018/05/17/MySql分区操作（二）/</id>
    <published>2018-05-17T02:07:57.000Z</published>
    <updated>2018-05-25T13:05:21.643Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【转自】<a href="https://blog.csdn.net/tjcyjd/article/details/11194489" target="_blank" rel="noopener">https://blog.csdn.net/tjcyjd/article/details/11194489</a></strong><br><strong>HASH分区和线性LINEAR HASH分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `myblog`.`tbl_user_friends_linear_hash` (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` INT NOT NULL,</span><br><span class="line">  `friend_id` INT NOT NULL,</span><br><span class="line">  `create_time` DATETIME NOT NULL,</span><br><span class="line">  PRIMARY KEY (`pkid`))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8</span><br><span class="line">COMMENT = &apos;用户好友&apos; PARTITION BY LINEAR HASH(pkid) PARTITIONS 3 ;</span><br></pre></td></tr></table></figure>
<p>MySQL还支持线性哈希功能，它与常规哈希的区别在于，线性哈希功能使用的一个线性的2的幂（powers-of-two）运算法则，而常规 哈希使用的是求哈希函数值的模数。</p>
<p>线性哈希分区和常规哈希分区在语法上的唯一区别在于，在“PARTITION BY” 子句中添加“LINEAR”关键字，如下面所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">    id INT NOT NULL,</span><br><span class="line">    fname VARCHAR(30),</span><br><span class="line">    lname VARCHAR(30),</span><br><span class="line">    hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;,</span><br><span class="line">    separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;,</span><br><span class="line">    job_code INT,</span><br><span class="line">    store_id INT</span><br><span class="line">)</span><br><span class="line">PARTITION BY LINEAR HASH(YEAR(hired))</span><br><span class="line">PARTITIONS 4；</span><br></pre></td></tr></table></figure>
<p>假设一个表达式expr, 当使用线性哈希功能时，记录将要保存到的分区是num 个分区中的分区N，其中N是根据下面的算法得到： </p>
<ol>
<li><p>找到下一个大于num.的、2的幂，我们把这个值称为V ，它可以通过下面的公式得到： </p>
</li>
<li><p>V = POWER(2, CEILING(LOG(2, num)))<br>（例如，假定num是13。那么LOG(2,13)就是3.7004397181411。 CEILING(3.7004397181411)就是4，则V = POWER(2,4), 即等于16）。 </p>
</li>
<li><p>设置 N = F(column_list) &amp; (V - 1). </p>
</li>
<li><p>当 N &gt;= num: </p>
</li>
</ol>
<p>·         设置 V = CEIL(V / 2) </p>
<p>·         设置 N = N &amp; (V - 1) </p>
<p>例如，假设表t1，使用线性哈希分区且有4个分区，是通过下面的语句创建的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATE)</span><br><span class="line">    PARTITION BY LINEAR HASH( YEAR(col3) )</span><br><span class="line">    PARTITIONS 6;</span><br></pre></td></tr></table></figure>
<p>现在假设要插入两行记录到表t1中，其中一条记录col3列值为’2003-04-14’，另一条记录col3列值为’1998-10-19’。第一条记录将要保存到的分区确定如下：</p>
<p>V = POWER(2, CEILING(LOG(2,7))) = 8<br>N = YEAR(‘2003-04-14’) &amp; (8 - 1)<br>   = 2003 &amp; 7<br>   = 3</p>
<p>(3 &gt;= 6 为假（FALSE）: 记录将被保存到#3号分区中)<br>第二条记录将要保存到的分区序号计算如下： </p>
<p>V = 8<br>N = YEAR(‘1998-10-19’) &amp; (8-1)<br>  = 1998 &amp; 7<br>  = 6</p>
<p>(6 &gt;= 4 为真（TRUE）: 还需要附加的步骤)</p>
<p>N = 6 &amp; CEILING(5 / 2)<br>  = 6 &amp; 3<br>  = 2</p>
<p>(2 &gt;= 4 为假（FALSE）: 记录将被保存到#2分区中)<br>按照线性哈希分区的优点在于增加、删除、合并和拆分分区将变得更加快捷，有利于处理含有极其大量（1000吉）数据的表。它的缺点在于，与使用常规HASH分区得到的数据分布相比，各个分区间数据的分布不大可能均衡。</p>
<p><strong>KEY分区和LINEAR KEY分区</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `myblog`.`tbl_user_friends_linear_key` (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` INT NOT NULL,</span><br><span class="line">  `friend_id` INT NOT NULL,</span><br><span class="line">  `create_time` DATETIME NOT NULL,</span><br><span class="line">  primary key(pkid))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8</span><br><span class="line">COMMENT = &apos;用户好友&apos; PARTITION BY LINEAR KEY(pkid) PARTITIONS 3 ;</span><br></pre></td></tr></table></figure>
<p>按照KEY进行分区类似于按照HASH分区，除了HASH分区使用的用户定义的表达式，而KEY分区的 哈希函数是由MySQL 服务器提供。MySQL 簇（Cluster）使用函数MD5()来实现KEY分区；对于使用其他存储引擎的表，服务器使用其自己内部的 哈希函数，这些函数是基于与PASSWORD()一样的运算法则。 </p>
<p>“CREATE TABLE … PARTITION BY KEY”的语法规则类似于创建一个通过HASH分区的表的规则。它们唯一的区别在于使用的关键字是KEY而不是HASH，并且KEY分区只采用一个或多个列名的一个列表。 </p>
<p>通过线性KEY分割一个表也是可能的。下面是一个简单的例子： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tk (</span><br><span class="line">    col1 INT NOT NULL,</span><br><span class="line">    col2 CHAR(5),</span><br><span class="line">    col3 DATE</span><br><span class="line">) </span><br><span class="line">PARTITION BY LINEAR KEY (col1)</span><br><span class="line">PARTITIONS 3;</span><br></pre></td></tr></table></figure>
<p>在KEY分区中使用关键字LINEAR和在HASH分区中使用具有同样的作用，分区的编号是通过2的幂（powers-of-two）算法得到，而不是通过模数算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【转自】&lt;a href=&quot;https://blog.csdn.net/tjcyjd/article/details/11194489&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/tjcyjd/a
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>为未来而学</title>
    <link href="http://www.forwardlee.com/2018/05/16/%E4%B8%BA%E6%9C%AA%E6%9D%A5%E8%80%8C%E5%AD%A6/"/>
    <id>http://www.forwardlee.com/2018/05/16/为未来而学/</id>
    <published>2018-05-16T11:15:00.000Z</published>
    <updated>2018-05-16T11:24:35.333Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果一个人只满足于完成别人所要求的事情，那么，他只能是个奴隶，只有当他超越了这个限度，才会成为一个自由人。</span><br><span class="line"></span><br><span class="line">——哈佛学习格言</span><br></pre></td></tr></table></figure>
<p><strong>有关学习的两个困境</strong></p>
<p><strong>一、学习是一场竞赛，我们凭什么才可以胜出？</strong></p>
<p>大城市里面人们为了能够上一所“好的”小学，要选择购置学区房；</p>
<p>大城市里面为了能够将来上好的中学，还要报各种课外班，什么奥数，英语，绘画，书法，钢琴，足球，篮球······；</p>
<p>大城市里面孩子们每天不是在上学就是在上课外班，家长不是在送孩子去上学的路上就是在送孩子去课外班的路上。</p>
<p>这一切正常吗，我们是选择了随大流还是经过了深思熟虑的思考？这样的学习方式和节奏是最有效的吗？这场学习的竞赛普通的家庭有竞争优势吗？哪些能力在我们未来会让我们更有竞争优势呢？哪些方面的学习对我们一生更加重要呢？</p>
<p>不知道这些问题，朋友们有没有问过自己，有没有过深入的思考，有没有给自己一个答案。</p>
<p>与此相反的是，小城市、农村、郊区的孩子们多数情况是玩玩玩，大好的青春真的就在玩耍中渡过啦，想必长大后会后悔吧。毕竟，人生中有许多事情是需要时间的积累的，而时间是不可以购买的，时间是一去不复返的，错过真的很难弥补上。阅读，就属于这样的事情。</p>
<p>现在，城市与郊区的教育，重点学校与普通学校之间教育的差距越来越大，这种差距一方面体现在对教育的认知上，另一方面体现在优质的教育资源和用钱堆出来的课外兴趣班、优培班。</p>
<p>好在，我们还有一种方法，能够缩小这种无法改变的学习资源和环境差距。是什么样的方法呢？</p>
<p>俗话说，要用正确的方法做正确的事情。这一点最关键。我们要从学习的最根本出发，去探寻学习的本质，去掌握学习的方法，去洞察未来，这就是我们需要做的最正确的事情，它保证我们走在一条正确的道路上。而做这些事情，好的学校和富裕的家庭条件都不是必须的条件，需要的是我们的态度和行动。</p>
<p><strong>二、学习是为了生活，生活是一辈子的事情，我们是否有终身学习的准备？</strong></p>
<p>先不说，终身学习，就是学校里的学习，我们都无法很好地完成。这是为什么呢？</p>
<p>说不爱学习的人，实际是没有发现好的学习方式、引人入胜的学习资源、让人体会到收获和成就感的学习成果。甚至，从更根本上来说，是没有找到或发现学习的意义。</p>
<p>其实，人天生就是学习的好手，不仅具有好奇心，而且也爱学习。</p>
<p>学习中往往会：</p>
<p>因为不知道自己不知道，而没有思考；</p>
<p>因为不知道学习目标是什么，不知道为什么而学，而没有动力；</p>
<p>因为不知道学习方法，而无法采取行动；</p>
<p>因为不知道学习需要经历的过程，而无法坚持。</p>
<p>在这里，你将看清楚“学习”的样子，看清楚“学习的过程”，掌握“学习”的方法，知道并体会到“学习”带来的各种机会和可能性。</p>
<p>从此，你会亲手为自己打开一扇通往未来的希望之门，你会走在通往未来的道路上，而且还站在巨人的肩膀上。慢慢地，你会发现你已经不是原来的你了，你能看的更远，也能看的更加清晰。终身学习也因此成为了你生活中形影不离的朋友！<br><img src="/images/erweima.png" alt="二维码"></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
    
    </summary>
    
    
      <category term="学习力" scheme="http://www.forwardlee.com/tags/%E5%AD%A6%E4%B9%A0%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>MySql分区操作（一）</title>
    <link href="http://www.forwardlee.com/2018/05/16/MySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2018/05/16/MySql分区操作（一）/</id>
    <published>2018-05-16T10:24:35.000Z</published>
    <updated>2018-05-25T13:05:09.030Z</updated>
    
    <content type="html"><![CDATA[<p>##分区类型<br>RANGE 连续的列值区间分区，有主键和唯一键必须使用，如果没有则可以指定任何一列；<br>LIST 类似RANGE分区，区别在于指定一系列的列值作为分区条件；<br>HASH 由函数表达式返回值决定所在分区，函数返回值必须为非负整数；<br>KEY 由mysql提供的HASH函数进行服务，==使用较少==。</p>
<p>##创建表分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tbl_users (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` VARCHAR(255) NOT NULL,</span><br><span class="line">  `password` VARCHAR(255) NOT NULL,</span><br><span class="line">  `email` VARCHAR(255) NULL,</span><br><span class="line">  `sex` CHAR(1) NULL,</span><br><span class="line">  PRIMARY KEY (`pkid`))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8 </span><br><span class="line">PARTITION BY RANGE(pkid) PARTITIONS 3( </span><br><span class="line">PARTITION part0 VALUES LESS THAN (10000),  </span><br><span class="line">PARTITION part1 VALUES LESS THAN (20000),  </span><br><span class="line">PARTITION part2 VALUES LESS THAN (MAXVALUE)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>
<p>##查看分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.partitions where table_schema=&apos;myblog&apos; and table_name=&apos;tbl_users&apos; \G;</span><br></pre></td></tr></table></figure>
<p>得到如下结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">                TABLE_CATALOG: def</span><br><span class="line">                 TABLE_SCHEMA: myblog</span><br><span class="line">                   TABLE_NAME: tbl_users</span><br><span class="line">               PARTITION_NAME: part0</span><br><span class="line">            SUBPARTITION_NAME: NULL</span><br><span class="line">   PARTITION_ORDINAL_POSITION: 1</span><br><span class="line">SUBPARTITION_ORDINAL_POSITION: NULL</span><br><span class="line">             PARTITION_METHOD: RANGE</span><br><span class="line">          SUBPARTITION_METHOD: NULL</span><br><span class="line">         PARTITION_EXPRESSION: pkid</span><br><span class="line">      SUBPARTITION_EXPRESSION: NULL</span><br><span class="line">        PARTITION_DESCRIPTION: 10000</span><br><span class="line">                   TABLE_ROWS: 0</span><br><span class="line">               AVG_ROW_LENGTH: 0</span><br><span class="line">                  DATA_LENGTH: 16384</span><br><span class="line">              MAX_DATA_LENGTH: NULL</span><br><span class="line">                 INDEX_LENGTH: 0</span><br><span class="line">                    DATA_FREE: 0</span><br><span class="line">                  CREATE_TIME: 2018-05-16 18:21:08</span><br><span class="line">                  UPDATE_TIME: NULL</span><br><span class="line">                   CHECK_TIME: NULL</span><br><span class="line">                     CHECKSUM: NULL</span><br><span class="line">            PARTITION_COMMENT: </span><br><span class="line">                    NODEGROUP: default</span><br><span class="line">              TABLESPACE_NAME: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">                TABLE_CATALOG: def</span><br><span class="line">                 TABLE_SCHEMA: myblog</span><br><span class="line">                   TABLE_NAME: tbl_users</span><br><span class="line">               PARTITION_NAME: part1</span><br><span class="line">            SUBPARTITION_NAME: NULL</span><br><span class="line">   PARTITION_ORDINAL_POSITION: 2</span><br><span class="line">SUBPARTITION_ORDINAL_POSITION: NULL</span><br><span class="line">             PARTITION_METHOD: RANGE</span><br><span class="line">          SUBPARTITION_METHOD: NULL</span><br><span class="line">         PARTITION_EXPRESSION: pkid</span><br><span class="line">      SUBPARTITION_EXPRESSION: NULL</span><br><span class="line">        PARTITION_DESCRIPTION: 20000</span><br><span class="line">                   TABLE_ROWS: 0</span><br><span class="line">               AVG_ROW_LENGTH: 0</span><br><span class="line">                  DATA_LENGTH: 16384</span><br><span class="line">              MAX_DATA_LENGTH: NULL</span><br><span class="line">                 INDEX_LENGTH: 0</span><br><span class="line">                    DATA_FREE: 0</span><br><span class="line">                  CREATE_TIME: 2018-05-16 18:21:08</span><br><span class="line">                  UPDATE_TIME: NULL</span><br><span class="line">                   CHECK_TIME: NULL</span><br><span class="line">                     CHECKSUM: NULL</span><br><span class="line">            PARTITION_COMMENT: </span><br><span class="line">                    NODEGROUP: default</span><br><span class="line">              TABLESPACE_NAME: NULL</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">                TABLE_CATALOG: def</span><br><span class="line">                 TABLE_SCHEMA: myblog</span><br><span class="line">                   TABLE_NAME: tbl_users</span><br><span class="line">               PARTITION_NAME: part2</span><br><span class="line">            SUBPARTITION_NAME: NULL</span><br><span class="line">   PARTITION_ORDINAL_POSITION: 3</span><br><span class="line">SUBPARTITION_ORDINAL_POSITION: NULL</span><br><span class="line">             PARTITION_METHOD: RANGE</span><br><span class="line">          SUBPARTITION_METHOD: NULL</span><br><span class="line">         PARTITION_EXPRESSION: pkid</span><br><span class="line">      SUBPARTITION_EXPRESSION: NULL</span><br><span class="line">        PARTITION_DESCRIPTION: MAXVALUE</span><br><span class="line">                   TABLE_ROWS: 0</span><br><span class="line">               AVG_ROW_LENGTH: 0</span><br><span class="line">                  DATA_LENGTH: 16384</span><br><span class="line">              MAX_DATA_LENGTH: NULL</span><br><span class="line">                 INDEX_LENGTH: 0</span><br><span class="line">                    DATA_FREE: 0</span><br><span class="line">                  CREATE_TIME: 2018-05-16 18:21:08</span><br><span class="line">                  UPDATE_TIME: NULL</span><br><span class="line">                   CHECK_TIME: NULL</span><br><span class="line">                     CHECKSUM: NULL</span><br><span class="line">            PARTITION_COMMENT: </span><br><span class="line">                    NODEGROUP: default</span><br><span class="line">              TABLESPACE_NAME: NULL</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>##查看分区上的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tbl_users partition(p0)</span><br></pre></td></tr></table></figure>
<p>##查看分区数据查询性能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain partitions select * from tbl_users where pkid =2;</span><br></pre></td></tr></table></figure>
<p>##其他分区类型<br>LIST类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `myblog`.`tbl_blog` (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `title` VARCHAR(255) NOT NULL,</span><br><span class="line">  `content` VARCHAR(5000) NULL,</span><br><span class="line">  `create_time` DATETIME NULL,</span><br><span class="line">  PRIMARY KEY (`pkid`))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8</span><br><span class="line">COMMENT = &apos;博客文章&apos; PARTITION BY LIST(pkid) PARTITIONS 3(</span><br><span class="line"> PARTITION part0 VALUES IN (1,2,3),  </span><br><span class="line">PARTITION part1 VALUES IN (4,5,6),  </span><br><span class="line">PARTITION part2 VALUES IN (7,8,9)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>
<p>HASH类型<br>利用分区字段除分区数量取余数，就把数据放到第余数个分区上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `myblog`.`tbl_user_friends` (</span><br><span class="line">  `pkid` INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` INT NOT NULL,</span><br><span class="line">  `friend_id` INT NOT NULL,</span><br><span class="line">  `create_time` DATETIME NOT NULL,</span><br><span class="line">  PRIMARY KEY (`pki`))</span><br><span class="line">ENGINE = InnoDB</span><br><span class="line">DEFAULT CHARACTER SET = utf8</span><br><span class="line">COMMENT = &apos;用户好友&apos; PARTITION BY HASH(pkid) PARTITIONS 3 ;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into tbl_user_friends values(1,2,3,NULL);</span><br><span class="line">insert into tbl_user_friends values(5,2,3,NULL);</span><br></pre></td></tr></table></figure>
<p>得到结论</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select * from tbl_user_friends partition(p1);</span><br><span class="line">+------+---------+-----------+-------------+</span><br><span class="line">| pkid | user_id | friend_id | create_time |</span><br><span class="line">+------+---------+-----------+-------------+</span><br><span class="line">|    1 |       2 |         3 | NULL        |</span><br><span class="line">+------+---------+-----------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select * from tbl_user_friends partition(p2);</span><br><span class="line">+------+---------+-----------+-------------+</span><br><span class="line">| pkid | user_id | friend_id | create_time |</span><br><span class="line">+------+---------+-----------+-------------+</span><br><span class="line">|    5 |       2 |         3 | NULL        |</span><br><span class="line">+------+---------+-----------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##分区类型&lt;br&gt;RANGE 连续的列值区间分区，有主键和唯一键必须使用，如果没有则可以指定任何一列；&lt;br&gt;LIST 类似RANGE分区，区别在于指定一系列的列值作为分区条件；&lt;br&gt;HASH 由函数表达式返回值决定所在分区，函数返回值必须为非负整数；&lt;br&gt;KEY 由
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.forwardlee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JDKBlockingQueue使用</title>
    <link href="http://www.forwardlee.com/2018/05/10/JDKBlockingQueue%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.forwardlee.com/2018/05/10/JDKBlockingQueue使用/</id>
    <published>2018-05-10T10:48:35.000Z</published>
    <updated>2018-05-25T13:10:36.987Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">package cn.klxx.multithread;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line">import java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line">import java.util.concurrent.PriorityBlockingQueue;</span><br><span class="line">import java.util.concurrent.SynchronousQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description JDK实现的阻塞和无阻塞队列测试</span><br><span class="line"> * @author ForwardLee</span><br><span class="line"> */</span><br><span class="line">public class JDKBlockingQueueTest &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 有界阻塞队列</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testArrayBlockingQueue() throws Exception &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = new ArrayBlockingQueue&lt;String&gt;(5);</span><br><span class="line">        arrayBlockingQueue.add(&quot;a&quot;);</span><br><span class="line">        arrayBlockingQueue.add(&quot;b&quot;);</span><br><span class="line">        arrayBlockingQueue.add(&quot;c&quot;);</span><br><span class="line">        arrayBlockingQueue.add(&quot;d&quot;);</span><br><span class="line">        arrayBlockingQueue.add(&quot;e&quot;);</span><br><span class="line">        arrayBlockingQueue.add(&quot;f&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @descripiton 可以是有界阻塞队列，也可以是无解阻塞队列，关键看实例化队列对象用的构造方法是否初始化队列大小</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testLinkedBlockingDeque() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        LinkedBlockingDeque&lt;String&gt; linkedBlockingDeque = new LinkedBlockingDeque&lt;String&gt;();//new LinkedBlockingDeque&lt;String&gt;(2)</span><br><span class="line">        linkedBlockingDeque.add(&quot;a&quot;);</span><br><span class="line">        linkedBlockingDeque.offer(&quot;b&quot;);</span><br><span class="line">        linkedBlockingDeque.add(&quot;c&quot; );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @description 同步阻塞队列，主要应用场景在于多线程之间的线程切换，例如线程池的实现。</span><br><span class="line">     * 不能直接往队列中存数据。要往队列中存数据，前提是必须要有一个线程等待取数据</span><br><span class="line">     * Executors.newCachedThreadPool()</span><br><span class="line">     *</span><br><span class="line">     * Creates a thread pool that creates new threads as needed, but</span><br><span class="line">     * will reuse previously constructed threads when they are</span><br><span class="line">     * available, and uses the provided</span><br><span class="line">     * ThreadFactory to create new threads when needed.</span><br><span class="line">     * &#123;@param threadFactory the factory to use when creating new threads</span><br><span class="line">     * @return the newly created thread pool</span><br><span class="line">     * @throws NullPointerException if threadFactory is null&#125;</span><br><span class="line">     *</span><br><span class="line">     * public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) &#123;</span><br><span class="line">     * return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class="line">     *             60L, TimeUnit.SECONDS,</span><br><span class="line">     *               new SynchronousQueue&lt;Runnable&gt;(),</span><br><span class="line">     *               threadFactory);</span><br><span class="line">     * &#125;</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testSynchronousQueue() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        final SynchronousQueue&lt;String&gt; synchronousQueue = new SynchronousQueue&lt;String&gt;();</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String peek = synchronousQueue.take();</span><br><span class="line">                    System.out.println(peek);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(1000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronousQueue.add(&quot;a&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * PriorityBlockingQueue是带优先级的无界阻塞队列，每次出队都返回优先级最高的元素，</span><br><span class="line">     * 是二叉树最小堆的实现，研究过数组方式存放最小堆节点的都知道，直接遍历队列元素是无序的。</span><br><span class="line">     * 队列存储的对象必须实现Comparable接口</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testPriorityBlockingQueue() throws Exception &#123;</span><br><span class="line">        PriorityBlockingQueue&lt;ObjectWithComparable&gt;  priorityBlockingQueue= new PriorityBlockingQueue&lt;ObjectWithComparable&gt;();</span><br><span class="line">        ObjectWithComparable o1 = new ObjectWithComparable();</span><br><span class="line">        o1.setId(3);</span><br><span class="line">        priorityBlockingQueue.add(o1);</span><br><span class="line"></span><br><span class="line">        ObjectWithComparable o2 = new ObjectWithComparable();</span><br><span class="line">        o2.setId(4);</span><br><span class="line">        priorityBlockingQueue.add(o2);</span><br><span class="line"></span><br><span class="line">        ObjectWithComparable o3 = new ObjectWithComparable();</span><br><span class="line">        o3.setId(2);</span><br><span class="line">        priorityBlockingQueue.add(o3);</span><br><span class="line"></span><br><span class="line">        for (ObjectWithComparable objectWithComparable : priorityBlockingQueue) &#123;</span><br><span class="line">            System.out.println(priorityBlockingQueue.take());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class ObjectWithComparable implements Comparable&lt;ObjectWithComparable&gt;&#123;</span><br><span class="line">        private int id;</span><br><span class="line"></span><br><span class="line">        public int getId() &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setId(int id) &#123;</span><br><span class="line">            this.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int compareTo(ObjectWithComparable o) &#123;</span><br><span class="line">            return this.id&gt;o.id? 1:(this.id&lt;o.id? -1:0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;ObjectWithComparable&#123;&quot; +</span><br><span class="line">                    &quot;id=&quot; + id +</span><br><span class="line">                    &apos;&#125;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.forwardlee.com/tags/JAVA/"/>
    
      <category term="MultiThread" scheme="http://www.forwardlee.com/tags/MultiThread/"/>
    
  </entry>
  
  <entry>
    <title>使用wait(),notify()配合synchronized实现自定义阻塞队列MyBlockingQueue</title>
    <link href="http://www.forwardlee.com/2018/05/09/%E4%BD%BF%E7%94%A8wait-notify-%E9%85%8D%E5%90%88synchronized%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97MyBlockingQueue/"/>
    <id>http://www.forwardlee.com/2018/05/09/使用wait-notify-配合synchronized实现自定义阻塞队列MyBlockingQueue/</id>
    <published>2018-05-09T09:04:30.000Z</published>
    <updated>2018-05-09T09:05:22.786Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package cn.klxx.multithread;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author ForwardLee</span><br><span class="line"> * @description 使用synchronized关键字，wait()和notify()方法实现阻塞队列</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class MyBlockingQueue &#123;</span><br><span class="line"></span><br><span class="line">    //队列容器</span><br><span class="line">    private final LinkedList&lt;Object&gt; list = new LinkedList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">    //队列大小,使用AtomicInteger可以保证在多线程获取队列大小时线程安全</span><br><span class="line">    private AtomicInteger count = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    //队列最大长度</span><br><span class="line">    private int maxSize;</span><br><span class="line"></span><br><span class="line">    //队列最小长度</span><br><span class="line">    private int minSize = 0;</span><br><span class="line"></span><br><span class="line">    //实现业务模型的锁</span><br><span class="line">    private Object lock = new Object();</span><br><span class="line"></span><br><span class="line">    public MyBlockingQueue(int length)&#123;</span><br><span class="line">        this.maxSize = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @description 队列存数据</span><br><span class="line">     * @param obj</span><br><span class="line">     */</span><br><span class="line">    public void putObj(Object obj)&#123;</span><br><span class="line">        synchronized (lock)&#123;</span><br><span class="line">            if (count.get()==maxSize) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    lock.wait();//队列长度已经达到最大值，不能再继续存储数据，则线程处于等待状态，直至队列收到有可用位置的通知。</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.push(obj);</span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">            lock.notify();//如果已经有线程等待获取队列数据，此时就通知取数据线程有数据了。</span><br><span class="line">            System.out.println(&quot;存入对象：&quot;+obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @description 获取队列中的数据</span><br><span class="line">     * @return 返回队列的第一个元素</span><br><span class="line">     */</span><br><span class="line">    public Object getObject()&#123;</span><br><span class="line">        Object retVal = null;</span><br><span class="line">        synchronized (lock)&#123;</span><br><span class="line">            if (count.get()==0) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            retVal = list.getFirst();</span><br><span class="line">            count.decrementAndGet();</span><br><span class="line">            lock.notify();//队列长度小于maxSize了，有存储空间了，就通知存储线程可以放入数据了。</span><br><span class="line">            System.out.println(&quot;取出对象：&quot;+retVal);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final MyBlockingQueue myBlockingQuene = new MyBlockingQueue(5);</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Object var1 = myBlockingQuene.getObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;t1&quot;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc1&quot;);</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc2&quot;);</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc3&quot;);</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc4&quot;);</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc5&quot;);</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc6&quot;);</span><br><span class="line">                System.out.println(&quot;此时队列长度L1=&quot;+myBlockingQuene.count.get());</span><br><span class="line">                myBlockingQuene.putObj(&quot;abc7&quot;);//这个对象放不了，线程就处于等待状态了。</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;t2&quot;).start();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(5);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Object var2 = myBlockingQuene.getObject();//t2线程中的abc7对象此时才能放入队列。</span><br><span class="line">                System.out.println(&quot;此时队列长度L2=&quot;+myBlockingQuene.count.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;t3&quot;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.forwardlee.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch多线程性能</title>
    <link href="http://www.forwardlee.com/2018/05/08/java/CountDownLatch%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD/"/>
    <id>http://www.forwardlee.com/2018/05/08/java/CountDownLatch多线程性能/</id>
    <published>2018-05-08T11:26:19.000Z</published>
    <updated>2018-05-25T13:13:34.276Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><figcaption><span>cn.klxx.multithread;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Object方法wait()、notify()两个方法需要配合sychronized关键字使用，</span><br><span class="line"> * wait()方法释放锁，notify()方法占有锁，所以要先调用wait()方法，再调用notify()方法</span><br><span class="line"> */</span><br><span class="line">public class MyCountDownLatch &#123;</span><br><span class="line"></span><br><span class="line">static List list = new ArrayList();</span><br><span class="line"></span><br><span class="line">public void addString(String a)&#123;</span><br><span class="line">    list.add(a);</span><br><span class="line">    System.out.println(&quot;list add string!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getSize()&#123;</span><br><span class="line">    return list.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static final Object lock = new Object();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        final MyCountDownLatch myCountDownLatch = new MyCountDownLatch();</span><br><span class="line"></span><br><span class="line">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    synchronized (lock)&#123;</span><br><span class="line">                        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">                            myCountDownLatch.addString(&quot;abc&quot;);</span><br><span class="line">                            Thread.sleep(500);</span><br><span class="line">                            if(list.size()==5)&#123;</span><br><span class="line">                                lock.notify();</span><br><span class="line">                                System.out.println(&quot;发出通知...&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(&quot;执行完这句话释放锁...&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;t1&quot;) ;</span><br><span class="line"></span><br><span class="line">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    synchronized (lock) &#123;</span><br><span class="line">                        if (list.size()!=5) &#123;</span><br><span class="line">                            lock.wait();//此时t2处于等待中，不再继续往下执行代码，直到收到通知才继续执行</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(&quot;t2 收到停止通知&quot;);</span><br><span class="line">                        throw new RuntimeException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;t2&quot;) ;</span><br><span class="line">        /**</span><br><span class="line">         * t2必须先启动，因为wait方法不会占有锁，不影响t1执行；如果t1先启动会占有锁，而t2则不能使用锁无法执行。</span><br><span class="line">         * 用wait和notify配合关键字sychronized关键字，使用等notify所在的sychronized关键字代码块执行完，</span><br><span class="line">         * wait所在的sychronized代码块才会继续执行，这样的最大问题就是收到通知的时间严重滞后于发送通知的时间。</span><br><span class="line">         * 所以要借助CountDownLatch来解决这个问题，CountDownLatch使用countDown方法发送完通知后也会继续执行，</span><br><span class="line">         * 但是await方法会马上收到通知继续执行代码，避免了收到通知的严重滞后问题。</span><br><span class="line">         */</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(10000);</span><br><span class="line">            list.clear();</span><br><span class="line">            System.out.println(&quot;-----------------------------&quot;);</span><br><span class="line">            System.out.println(&quot;list.size:&quot;+list.size());</span><br><span class="line">            System.out.println(&quot;-----------------------------&quot;);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final CountDownLatch countDownLatch = new CountDownLatch(1);</span><br><span class="line">        Thread t3 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">                        list.add(&quot;abc&quot;);</span><br><span class="line">                        System.out.println(&quot;list add string!&quot;);</span><br><span class="line">                        Thread.sleep(500);</span><br><span class="line">                        if (list.size()==5) &#123;</span><br><span class="line">                            System.out.println(&quot;发送通知&quot;);</span><br><span class="line">                            countDownLatch.countDown();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;t3&quot;);</span><br><span class="line"></span><br><span class="line">        Thread t4 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (list.size()!=5) &#123;</span><br><span class="line">                        System.out.println(&quot;t4 等待...&quot;);</span><br><span class="line">                        countDownLatch.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;list.size:&quot;+list.size()+&quot; ,t4 停止&quot;);</span><br><span class="line">                    throw new RuntimeException();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;t4&quot;);</span><br><span class="line"></span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;cn.klxx.multithread;&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.forwardlee.com/tags/JAVA/"/>
    
      <category term="MultiThread" scheme="http://www.forwardlee.com/tags/MultiThread/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.x进阶笔记（二）</title>
    <link href="http://www.forwardlee.com/2017/08/01/p/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2017/08/01/p/Laravel5.x进阶笔记（二）/</id>
    <published>2017-08-01T07:54:53.000Z</published>
    <updated>2017-08-01T08:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="在浏览器中展示创建的article列表">在浏览器中展示创建的Article列表</span></h2><p>在浏览器中展示创建的Article数据，需要使用Http请求Web服务器，Web服务器接收请求并将Article数据在视图页面中展示，即MVC。完成上述操作，离不开Laravel的路由功能，所谓路由就是请求的控制转发。Laravel把所有的请求地址预先配置在路由列表文件中learnlaravel5/app/Http/routes.php。描述路由的基本格式是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</span><br></pre></td></tr></table></figure>
<p>Route类（\Illuminate\Support\Facades\Route）是Laravel框架提供的路由配置工具类，get标识http请求的Method（get/post/put/patch…），get函数的第一个参数是url格式定义，第二个参数用@分割成两部分，第一部分是Http请求的Controller类，第二部分标识Controller的具体执行方法，具体看HomeController类的内容描述：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use App\Article;</span><br><span class="line">use App\Http\Requests;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class HomeController extends \Illuminate\Routing\Controller</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Create a new controller instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;middleware(&apos;auth&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Show the application dashboard.</span><br><span class="line">     *</span><br><span class="line">     * @return \Illuminate\Http\Response</span><br><span class="line">     */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        return view(&apos;home&apos;)-&gt;withArticles(Article::all());;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>_construct()是默认构造函数，函数体使用middleware(‘auth’)中间件，描述访问这个Controller需要登录验证。index()方法则是在路由中指定的执行方法，返回值是一个视图层对象view，视图的目录位置是模板文件learnlaravel5/resources/views/home.blade.php，view(‘home’)中的home与模板文件的第一个关键字相同，index函数指定了返回的视图文件，并把Article数据通过Eloquent方法取出，使用withArticles方法携带返回到视图页面，此处withArticles标识在页面可以通过articles对象取得所有返回的数据，依次类推如果是withAcls,则在页面上使用acls对象获取返回的数据。home.blade.php示例（php模板语法自行解决）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@extends(&apos;layouts.app&apos;)</span><br><span class="line"></span><br><span class="line">@section(&apos;content&apos;)</span><br><span class="line">    &lt;div id=&quot;title&quot; style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Learn Laravel 5&lt;/h1&gt;</span><br><span class="line">        &lt;div style=&quot;padding: 5px; font-size: 16px;&quot;&gt;Learn Laravel 5&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            @foreach ($articles as $article)</span><br><span class="line">                &lt;li style=&quot;margin: 50px 0;&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                        &lt;a href=&quot;&#123;&#123; url(&apos;article/&apos;.$article-&gt;id) &#125;&#125;&quot;&gt;</span><br><span class="line">                            &lt;h4&gt;&#123;&#123; $article-&gt;title &#125;&#125;&lt;/h4&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;body&quot;&gt;</span><br><span class="line">                        &lt;p&gt;&#123;&#123; $article-&gt;body &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            @endforeach</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>
<p>通过浏览器输入<a href="http://localhost:1024/home，就能看到数据加载到页面。" target="_blank" rel="noopener">http://localhost:1024/home，就能看到数据加载到页面。</a><br><img src="/images/home_articles.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;&lt;span id=&quot;在浏览器中展示创建的article列表&quot;&gt;在浏览器中展示创建的Article列表&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在浏览器中展示创建的Article数据，需要使用Http请求Web服务器，Web服务器接收请求并将Article数据在视图页面中展示，即MVC
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.forwardlee.com/tags/PHP/"/>
    
      <category term="Laravel5" scheme="http://www.forwardlee.com/tags/Laravel5/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.x进阶笔记（一）</title>
    <link href="http://www.forwardlee.com/2017/08/01/p/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2017/08/01/p/Laravel5.x进阶笔记（一）/</id>
    <published>2017-08-01T06:42:53.000Z</published>
    <updated>2017-08-01T08:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="默认条件">默认条件</span></h2><p>MacOS，&gt;=PHP5.4，翻墙环境（默认创建的项目会请求*.google.com）<br>懂得PHP基础知识和MVC的基本架构，开发环境已经安装Laravel所需的命令环境。</p>
<h2><span id="配置composer中国镜像使得本地开发环境下载依赖速度更快">配置composer中国镜像，使得本地开发环境下载依赖速度更快。</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>
<h2><span id="创建laravel项目">创建Laravel项目</span></h2><p>进入项目的工作空间目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace</span><br></pre></td></tr></table></figure>
<p>创建Laravel项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer -vvv create-project laravel/laravel learnlaravel5 5.2.31</span><br></pre></td></tr></table></figure></p>
<p>项目创建完成，进入刚刚创建的项目，并使用PHP内置server服务启动项目，访问页面验证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd learnlaravel5/public</span><br><span class="line">php -S 0.0.0.0:1024</span><br></pre></td></tr></table></figure>
<p>页面效果<br><img src="/images/15011226008351.jpg" alt=""><br>使用1024端口访问的目的是Unix系统的动态端口的开始端口，不需要进行端口配置，就可以启动监听。<br>如果单纯要学习Laravel或者PHP，请不要使用apache或者nginx这样的web服务器启动项目，对学习本身带来影响。</p>
<h2><span id="启用laravel针对php54版本的trait特性实现用户注册登录的功能实现简单的用户权限管理">启用Laravel针对PHP5.4版本的trait特性实现用户注册登录的功能，实现简单的用户权限管理</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd .. ##cd ~/workspace/learnlaravel5</span><br><span class="line">php artisan make:auth</span><br></pre></td></tr></table></figure>
<p>不需要停止php -S即可直接访问localhost:1024/login查看生成登录页面<br><img src="/images/15011235293792.jpg" alt=""></p>
<h2><span id="mysql创建数据库laravel5用户名和密码均为root">Mysql创建数据库laravel5，用户名和密码均为root</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database laravel5</span><br></pre></td></tr></table></figure>
<h2><span id="修改learnlaravel5项目的配置文件">修改learnlaravel5项目的配置文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/workspace/learnlaravel5</span><br><span class="line">open .env ##.env文件不存在，需要拷贝一份.env.example</span><br></pre></td></tr></table></figure>
<p>修改配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=laravel5</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=root</span><br></pre></td></tr></table></figure>
<h2><span id="使用laravel默认的数据库描述文件创建表">使用laravel默认的数据库描述文件创建表</span></h2><p>执行命令创建表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>
<p>migrate命令要执行的php描述文件是learnlaravel5/database/migrations下的文件</p>
<ul>
<li>2014_10_12_000000_create_users_table.php</li>
<li>2014_10_12_100000_create_password_resets_table.php<br>再查看一下laravel5数据库中是否创建了这两个描述文件中的表，如果已经创建，说明命令执行成功，就可以用注册页面注册用户了，赶快试一试。<h2><span id="使用-laravel-的葵花宝典eloquent">使用 Laravel 的“葵花宝典”：Eloquent</span></h2>Eloquent是Laravel定义的Model基类，只要Larave创建Model就会继承Eloquent类，此时创建的Model就具有了十个异常强大的函数，从此想干啥事儿都是一行代码就搞定，创建一个Article的Model体验一下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Article</span><br></pre></td></tr></table></figure>
<p>创建Article对应的数据库描述文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:migration create_article_table</span><br></pre></td></tr></table></figure>
<p>打开刚刚创建的数据库迁移描述文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open learnlaravel5/database/migration/*_create_article_table.php</span><br></pre></td></tr></table></figure>
<p>修改文件的内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Schema\Blueprint;</span><br><span class="line">use Illuminate\Database\Migrations\Migration;</span><br><span class="line"></span><br><span class="line">class CreateArticleTable extends Migration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * 创建文章表</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function up()</span><br><span class="line">    &#123;</span><br><span class="line">        Schema::create(&apos;articles&apos;, function($table)</span><br><span class="line">        &#123;</span><br><span class="line">            $table-&gt;increments(&apos;id&apos;);</span><br><span class="line">            $table-&gt;string(&apos;title&apos;);</span><br><span class="line">            $table-&gt;text(&apos;body&apos;)-&gt;nullable();</span><br><span class="line">            $table-&gt;integer(&apos;user_id&apos;);</span><br><span class="line">            $table-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function down()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次使用数据库迁移命令创建articles表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>
<p>执行完后，在laravel5的数据库中会创建出articles的表结构。<br>使用Seeder往数据库中插入默认数据。首先创建一个Seeder，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:seeder ArticleSeeder</span><br></pre></td></tr></table></figure>
<p>在learnlaravel5/database/seeds/下打开并修改刚刚创建的ArticleSeeder.php文件，默认的run函数体为空，为其添加创建Article的数据脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public function run()</span><br><span class="line">    &#123;</span><br><span class="line">        DB::table(&apos;articles&apos;)-&gt;delete();</span><br><span class="line">        for ($i=0;$i&lt;10;$i++)&#123;</span><br><span class="line">            \App\Article::create([</span><br><span class="line">                &apos;title&apos;=&gt;&apos;Title&apos;.$i,</span><br><span class="line">                &apos;body&apos;=&gt;&apos;Body&apos;.$i,</span><br><span class="line">                &apos;user_id&apos;=&gt;1</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>把ArticleSeeder注册到项目的数据库执行环境中。打开learnlaravel5/database/seeds/DatabaseSeeder.php，并修改run函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function run()</span><br><span class="line">    &#123;</span><br><span class="line">         $this-&gt;call(ArticleSeeder::class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>由于learnlaravel5/database目录不能被composer自动加载，所有需要执行命令让这个目录加载待composer环境，保证代码能找到ArticleSeedr这个类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer dump-autoload</span><br></pre></td></tr></table></figure>
<p>然后再执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan db:seed</span><br></pre></td></tr></table></figure>
<p>执行完，此时在数据库laravel5的article表中会产生10条数据。</p>
<p>下一节再讲解如何展示插入的数据 &gt;&gt;&gt;<a href="http://www.forwardlee.com/2017/08/01/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/">Laravel 5.x进阶笔记（二）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;&lt;span id=&quot;默认条件&quot;&gt;默认条件&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;MacOS，&amp;gt;=PHP5.4，翻墙环境（默认创建的项目会请求*.google.com）&lt;br&gt;懂得PHP基础知识和MVC的基本架构，开发环境已经安装Laravel所需的命令环境。&lt;/p&gt;
&lt;h2&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.forwardlee.com/tags/PHP/"/>
    
      <category term="Laravel5" scheme="http://www.forwardlee.com/tags/Laravel5/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.x进阶笔记（二）</title>
    <link href="http://www.forwardlee.com/2017/08/01/p/Laravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.forwardlee.com/2017/08/01/p/Laravel5.x进阶笔记（三）/</id>
    <published>2017-08-01T06:42:53.000Z</published>
    <updated>2017-08-01T08:21:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.forwardlee.com/tags/PHP/"/>
    
      <category term="Laravel5" scheme="http://www.forwardlee.com/tags/Laravel5/"/>
    
  </entry>
  
  <entry>
    <title>Docker清理命令</title>
    <link href="http://www.forwardlee.com/2017/05/21/Docker%E6%B8%85%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.forwardlee.com/2017/05/21/Docker清理命令/</id>
    <published>2017-05-21T12:41:01.000Z</published>
    <updated>2018-05-21T12:44:33.939Z</updated>
    
    <content type="html"><![CDATA[<p>杀死所有正在运行的容器</p>
<p><code>docker kill $(docker ps -a -q)</code></p>
<p>删除所有已经停止的容器</p>
<p><code>docker rm $(docker ps -a -q)</code></p>
<p>删除所有未打 dangling 标签的镜像</p>
<p><code>docker rmi $(docker images -q -f dangling=true)</code></p>
<p>删除所有镜像</p>
<p><code>docker rmi $(docker images -q)</code></p>
<p>为这些命令创建别名</p>
<p> <code>~/.bash_aliases COMMOND</code></p>
<p>杀死所有正在运行的容器.</p>
<p><code>alias dockerkill=&#39;docker kill $(docker ps -a -q)&#39;</code></p>
<p>删除所有已经停止的容器.</p>
<p><code>alias dockercleanc=&#39;docker rm $(docker ps -a -q)&#39;</code></p>
<p>删除所有未打标签的镜像.</p>
<p><code>alias dockercleani=&#39;docker rmi $(docker images -q -f dangling=true)&#39;</code></p>
<p>删除所有已经停止的容器和未打标签的镜像.</p>
<p><code>alias dockerclean=&#39;dockercleanc || true &amp;&amp; dockercleani&#39;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杀死所有正在运行的容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker kill $(docker ps -a -q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除所有已经停止的容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rm $(docker ps -a -q)&lt;/code&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.forwardlee.com/tags/Docker/"/>
    
  </entry>
  
</feed>
