<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Sentinel（哨兵）实现Redis主从切换的机制原理]]></title>
    <url>%2F2018%2F05%2F31%2F%E4%BD%BF%E7%94%A8Sentinel%EF%BC%88%E5%93%A8%E5%85%B5%EF%BC%89%E5%AE%9E%E7%8E%B0Redis%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E7%9A%84%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[哨兵-Sentinel，用于监控和管理Redis集群的高可用中间件。 哨兵配置和启动创建需要的目录 12mkdir -pv /etc/sentinelmkdir -pv /var/sentinel/5000 哨兵配置,可以配置多份，监控多个redis。 1234567891011121314#哨兵绑定本机IPbind 192.168.1.212 #哨兵服务端口号port 5002#sentinel工作空间dir /var/sentinel/5000/#哨兵监控的master配置信息 master_redis_name master_redis_ip master_redis_port quorumsentinel monitor mymaster 192.168.1.210 6379 2#哨兵给master发送ping指令的超时时间，用来确定master的主观宕机sdownsentinel down-after-milliseconds mymaster 5000 #哨兵执行slave切换成master的失败超时，新的哨兵接替执行sentinel failover-timeout mymaster 60000#slave切换成master后，设置n个slave节点同时连接新master进行数据复制sentinel parallel-syncs mymaster 1 哨兵启动 1234567891011121314151617181920212223242526272829redis-sentinel /etc/sentinel/5000.conf2083:X 27 May 07:29:50.702 * Increased maximum number of open files to 10032 (it was originally set to 1024). _._ _.-``__ &apos;&apos;-._ _.-`` `. `_. &apos;&apos;-._ Redis 3.2.8 (00000000/0) 32 bit .-`` .-```. ```\/ _.,_ &apos;&apos;-._ ( &apos; , .-` | `, ) Running in sentinel mode |`-._`-...-` __...-.``-._|&apos;` _.-&apos;| Port: 5000 | `-._ `._ / _.-&apos; | PID: 2083 `-._ `-._ `-./ _.-&apos; _.-&apos; |`-._`-._ `-.__.-&apos; _.-&apos;_.-&apos;| | `-._`-._ _.-&apos;_.-&apos; | http://redis.io `-._ `-._`-.__.-&apos;_.-&apos; _.-&apos; |`-._`-._ `-.__.-&apos; _.-&apos;_.-&apos;| | `-._`-._ _.-&apos;_.-&apos; | `-._ `-._`-.__.-&apos;_.-&apos; _.-&apos; `-._ `-.__.-&apos; _.-&apos; `-._ _.-&apos; `-.__.-&apos; 2083:X 27 May 07:29:50.703 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.2083:X 27 May 07:29:50.703 # Sentinel ID is 79c3f195844be0b84babec19b2fa8a84cc07190d2083:X 27 May 07:29:50.703 # +monitor master mymaster 192.168.1.210 6379 quorum 22083:X 27 May 07:29:50.704 * +slave slave 192.168.1.211:6379 192.168.1.211 6379 @ mymaster 192.168.1.210 63792083:X 27 May 07:29:50.714 * +slave slave 192.168.1.212:6379 192.168.1.212 6379 @ mymaster 192.168.1.210 63792083:X 27 May 07:30:22.643 * +sentinel sentinel 6e8c9dbc97a385acbbb2cd640e63b0370d1a5c31 192.168.1.211 5000 @ mymaster 192.168.1.210 63792083:X 27 May 07:30:43.491 * +sentinel sentinel b273c5b89b90f01ca5b90bd167a8092dedfae69a 192.168.1.212 5000 @ mymaster 192.168.1.210 63792083:X 27 May 07:30:51.041 * +fix-slave-config slave 192.168.1.211:6379 192.168.1.211 6379 @ mymaster 192.168.1.210 6379 连接并查看哨兵信息 123456789101112131415161718192021222324252627282930313233343536373839404142redis-cli -h 192.168.1.210 -p 5000192.168.1.210:5000&gt; sentinel master mymaster 1) &quot;name&quot; 2) &quot;mymaster&quot; 3) &quot;ip&quot; 4) &quot;192.168.1.210&quot; 5) &quot;port&quot; 6) &quot;6379&quot; 7) &quot;runid&quot; 8) &quot;8e990a05ba6ab1e915870dffc9184b689e960c7d&quot; 9) &quot;flags&quot;10) &quot;master&quot;11) &quot;link-pending-commands&quot;12) &quot;0&quot;13) &quot;link-refcount&quot;14) &quot;1&quot;15) &quot;last-ping-sent&quot;16) &quot;0&quot;17) &quot;last-ok-ping-reply&quot;18) &quot;394&quot;19) &quot;last-ping-reply&quot;20) &quot;394&quot;21) &quot;down-after-milliseconds&quot;22) &quot;5000&quot;23) &quot;info-refresh&quot;24) &quot;159&quot;25) &quot;role-reported&quot;26) &quot;master&quot;27) &quot;role-reported-time&quot;28) &quot;381542&quot;29) &quot;config-epoch&quot;30) &quot;0&quot;31) &quot;num-slaves&quot;32) &quot;2&quot;33) &quot;num-other-sentinels&quot;34) &quot;2&quot;35) &quot;quorum&quot;36) &quot;2&quot;37) &quot;failover-timeout&quot;38) &quot;60000&quot;39) &quot;parallel-syncs&quot;40) &quot;1&quot; 其他命令 12345678#查看master下的slave信息sentinel slaves mymaster#mymaster下所有的哨兵sentinel sentinels mymaster#当前哨兵所指向的master地址和端口sentinel get-master-addr-by-name mymaster 哨兵转换机制n个哨兵分别对Redis的master节点发送ping命令，如果在is-master-down-after-milliseconds指定的连接超时后，哨兵会“主观”认为master节点宕机-主观宕机（subjective down=sdown)。在哨兵机制中配置一个quorum参数m，用来判断m个哨兵都认为master主观宕机sdown，此时master就被哨兵认为是“客观”上宕机了（objective down=odown)，也就完成了哨兵从主观宕机到客观宕机的转换。 多个哨兵节点之间的相互发现机制Redis具有Pub/Sub的发布订阅消息队列的能力，每个哨兵都会往[sentinel:hello]这个channel中发送状态消息，并且其他的哨兵节点都监听这个channel的消息，感知到其他哨兵的存在。每隔2秒钟，每隔哨兵都会往[sentinel:hello]的channel发送自己的host、ip、runid、对master的监控配置信息。 哨兵对Redis的slave节点自动纠正哨兵发现master宕机后，会把slave节点通过选举出新的master提供服务，并且其他slave节点都要连接到新的master上。 Redis的slave被转换为master的选举算法如果一个master被quorum个哨兵认为主观宕机sdown了，master也就是达到了客观宕机odown的条件，而且配置的大多数（majority配置大多数的个数）哨兵同意进行主备切换，那么就通过选举算法，选出一个slave切换成master。（1）与master断开时长过滤，如果一个slave跟master断开连接已经超过了down-after-milliseconds的10倍+master宕机的时长，那么slave就被认为不适合选举为master，这样的slave节点就会被过滤掉。(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state；（2）slave的优先级slave-priority,在redis配置文件中默认是100，越小优先级越高；（3）slave复制数据的offset，offset越大，优先级越高；（每个slave在与master同步后offset自动增加）（4）slave节点run_id越小，优先级越高。（每个redis实例，都会有一个runid） 哨兵接替进行主备切换的机制哨兵进行主备切换时，会从当选master的slave节点获取一个进行切换的版本号configuration epoch信息，如果进行操作主备切换的哨兵，执行切换的等待时间超过了failover-timeout配置，那么就会有新的哨兵接替进行主备切换，此时哨兵要重新获取configuration epoch版本号的值，保证每次主备切换版本号是唯一的。 master配置信息的传播哨兵把当选的slave节点转换成master，并且把新的master配置信息通过[sentinel:hello]这个channel发布出去，订阅这个channel的其他slave节点收到消息后，自动更改配置连接到新的master节点上。]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis主从复制原理]]></title>
    <url>%2F2018%2F05%2F29%2FRedis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[主从复制原理 PS: full resynchronization:新的slave节点连接master同步复制数据，是一个完整的数据同步过程，叫做full resynchronization操作。 backlog：master在进行主从复制时，先在本机内存生成backlog，并且把要每次复制给slave的数据保存到backlog一份，目的是要记录数据同步的位置标识offset，以便于全量复制失败后，能够再次进行断点续传的增量复制。backlog的大小为1M。 master run id：salve用来区分master节点是新数据同步还是已有数据同步，如果slave发现mater的run id发生了变化，那么slava就会进行全量数据复制。在slave执行命令，查看master的run id： 1234567891011121314151617181920127.0.0.1:6379&gt; info server# Serverredis_version:3.2.8redis_git_sha1:00000000redis_git_dirty:0redis_build_id:5da7c5438a3ad5deredis_mode:standaloneos:Linux 2.6.32-431.el6.i686 i686arch_bits:32multiplexing_api:epollgcc_version:4.4.7process_id:2119run_id:5b80bdc81f1624e2ee403c5ccfa0a542e99fbb3etcp_port:6379uptime_in_seconds:62uptime_in_days:0hz:10lru_clock:562478executable:/usr/local/bin/redis-serverconfig_file:/etc/redis/6379.conf 全量复制（1）master执行bgsave命令，在本地生成一份rdb数据快照。（2）master把rdb快照文件发送给slave，发送过程有超时配置。 master节点主从复制的超时设置： 1repl-timeout 60 默认配置，如果主从复制时间超过60s，那么slave就会复制失败，所以根据rdb文件大小、网卡I/O能力、带宽大小调节该参数。例如rdb文件6G，千兆网卡的I/O在每秒中100M，那么就需要传输60s才能复制完毕，因此就可能导致复制失败。 （3）master在拷贝并同步原有rdb数据时，会将新增数据写入内存缓冲区，等到原有数据同步完成后，再从内存缓冲区把新增数据同步给slave。 master节点主从复制的内存缓冲区设置： 123456789101112131415161718192021client-output-buffer-limit slave 256M 64m 60``` 在配置的复制持续事件60s内，master内存缓冲区消耗64M，或者一次性超过256M，那么就会停止复制，复制失败。所以可以根据master节点的硬件条件，优化该配置。内存大的机器，就配置的大一点，内存小的机器就配置的小一点。（4）slave接收rdb数据快照文件后，清空自己的旧数据，然后重新加载rdb到内存中，在数据没有完全加载完之前，slave仍然使用旧数据提供读写服务。（5）如果slave开启了AOF配置，那么就会立即执行BGREWRITEAOF，重新生成AOF文件。# 增量复制（1） 如果全量复制过程中，master和slave断开连接，那么slave重新连接master后，会触发增量复制。（2）master从backlog中可以得到数据已经同步到offset位置，那么直接发送未同步的数据给slave。（3）从节点执行psync命令获取master的runid和全局offset，如果master返回PSYNC_FULLRESYNC，则进行全量复制；如果返回PSYNC_CONTINUE，则进行增量复制。# 断点续传 Redis在主从数据同步过程中，master会在内存中创建backlog日志，把同步的数据位置标识offset记录在backlog中，master和slave都会记录masterid和offset，如果slave在同步数据过程中断开了与master之间的连接，等到再次连接时，slave会从上次记录的offset开始同步数据，而不是全部重新同步。 # 无磁盘操作设置Redis在默认配置下进行主从同步复制数据，只在内存中就能完成操作，不需要数据在磁盘落地。master在内存中拷贝一份完整的数据快照，通过slave socket发送给slave，slave在内存中加载数据。当然Redis也支持数据在磁盘落地的方式进行主从复制。需要修改以下配置： 无磁盘操作 根据英语语境肯定回答要使用无磁盘操作，就配置为no；如果使用磁盘操作，就配置为yes。repl-diskless-sync no 延迟多少秒后开始数据同步，目的是等待更多的slave节点连接上master一起同步数据。如果master已经完成完整数据快照的拷贝，那么新的slave节点就无法再连接master，直到这次同步完成为止。repl-diskless-sync-delay 5 ` 过期key数据同步master中的key在一定时间有效后会做过期处理，对于这样的过期key，master会向slave发送一条del操作指令，在slave节点删除过期key的数据。]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis数据灾备和恢复过程中踩到的雷]]></title>
    <url>%2F2018%2F05%2F28%2FRedis%E6%95%B0%E6%8D%AE%E7%81%BE%E5%A4%87%E5%92%8C%E6%81%A2%E5%A4%8D%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E5%88%B0%E7%9A%84%E9%9B%B7%2F</url>
    <content type="text"><![CDATA[生产环境配置策略RDB 生成快照的频率策略要在每分钟生成一次，但是有多少key发生变化可根据自身业务量配置。save 60 1000 AOF 在生产环境一定要打开，与RDB同时运行，fsync策略为everysec。 生产环境备份策略RDB主要做冷备，用craontab执行定时脚本，做数据备份。备份数据保留48小时，脚本清理48小时以前的数据。每天备份当日的数据，每天的数据保存一个月。把所有数据再备份到远程云服务器上。 每小时备份脚本 12345678#!/bin/bashcur_date=`date +%Y%m%d%H`rm -rf /var/redis/6379/bak/hour/$cur_datecp /var/redis/6379/dump.rdb /var/redis/6379/bak/hour/$cur_datepre_date=`date -d -48hour +%Y%m%d%H`rm -rf /var/redis/6379/bak/hour/$pre_date 每天备份 12345678#!/bin/bashcur_date=`date +%Y%m%d`rm -rf /var/redis/6379/bak/hour/$cur_datecp /var/redis/6379/dump.rdb /var/redis/6379/bak/dayli/$cur_datepre_date=`date -d -1month +%Y%m%d`rm -rf /var/redis/6379/bak/dayli/$pre_date 创建定时脚本crontab -e 123[root@eshop-cache01 dayli]# crontab -e0 * * * * sh /usr/local/redis/redis_rdb_data_bak_hour.sh0 0 * * * sh /usr/local/redis/redis_rdb_data_bak_dayli.sh 踩过雷后的数据恢复流程NO.1雷：我们理解的redis优先使用aof文件恢复数据，如果aof文件没有数据，应该从rdb恢复数据。【错】 原因：在redis配置文件中appendonly为yes，把备份数据拷贝到redis数据目录下，启动redis服务，并没有加载备份数据，而是优先加载了aof空数据，恢复失败。 NO.2雷：既然优先使用aof恢复数据，那么我们把aof文件删除掉，再启动redis服务，恢复rdb数据。【错】 原因：即使删除了aof文件，redis在启动时也会优先检查是否存在aof文件，如果没有则创建一个空的aof文件并加载空数据。恢复失败。 NO.3雷：把redis配置的appendonly设置为no，再恢复rdb数据，启动redis加载rdb数据后，再停掉redis，修改配置appendonly为yes，再启动redis，恢复数据。【错】 原因：配置appendonly为no，那么redis的appendonly.aof文件将失效，其中的数据也将不是正确的数据，恢复rdb数据后，再把appendonly修改为yes，此时再重启redis服务，redis将加载appendonly.aof的错误数据。恢复失败。 正确的数据恢复流程停止redis服务 1redis-cli SHUDOWN 修改redis配置vi /etc/redis/6379.conf 123...appendonly no... 删除aof文件 1rm -rf /var/redis/6379/appendonly.aof 拷贝最新一个小时的数据到redis目录下命名为dump.rdb 1cp /var/redis/6379/bak/2019052600 /var/redis/6379/dump.rdb 启动redis服务 12cd /etc/init.d/./redis_6379 start 热配置redis的appendonly为yes，这是最重要的一步。 123456[root@eshop-cache01 src]# redis-cli 127.0.0.1:6379&gt; config get appendonly1) &quot;appendonly&quot;2) &quot;no&quot;127.0.0.1:6379&gt; config set appendonly yesOK 停止redis服务 1redis-cli SHUDOWN 修改redis配置vi /etc/redis/6379.conf 123...appendonly yes... 启动redis服务 12cd /etc/init.d/./redis_6379 start]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis持久化方式RDB和AOF比较应用]]></title>
    <url>%2F2018%2F05%2F25%2FRedis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8FRDB%E5%92%8CAOF%E6%AF%94%E8%BE%83%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[RDB持久化方式的工作原理设定时间间隔t内有n次key的操作检查，就进行持久化。例如save 60 1000，每个60秒有1000个key发生变化，则进行持久化。RDB在做持久化时，保存完整的一份数据快照，旧的快照文件被覆盖。 RDB持久化方案的优点（1）持久化的时间间隔可以由redis控制，所以可以按照一定的时间间隔把数据快照文件拷贝出来，更好的支撑数据冷备份。（2）RDB持久化文件是Redis数据文件，在做redis故障恢复时，数据加载效率更高。（3）Redis数据操作都在内存中进行，效率高。（4）Redis会创建一个副本进程（fork）进行数据持久化，持久化过程中，对redis本身的数据操作影响较小。 RDB持久化方式的缺点（1）两次持久化操作的间隔时间内，Redis发生故障，那么将丢失这个时间内的所有数据。–重点（2）当两次持久化操作间隔时间较长，Redis内可能产生大量新的数据，生成数据快照文件时，可能导致Redis数据服务暂停数秒。 AOF持久化方式的工作原理设定一个AOF持久化文件大小，Redis每隔1秒进行一次append only的完整数据指令日志的写文件持久化操作，当AOF文件大小达到指定大小后，Redis会使用LRU算法淘汰无效数据，缩小数据大小，重新创建一个AOF文件，旧的AOF文件就会删除。AOF在做持久化时，保存的是完整数据的写指令日志数据。 PS:现代操作系统的写文件操作过程是，先将文件数据写入到系统os cache缓存层，当os cache内的数据达到一定量后，再写入磁盘。 AOF持久化方式的优点（1）数据持久化每秒钟进行一次，即使Redis发生故障，丢失的数据只是1秒钟的数据。–重点（2）数据持久化时，数据从os cache中写入磁盘时，文件不易破损，即使破损，redis有可用的工具进行修复。 AOF持久化方式的缺点（1）Redis数据操作每次都些人os cache中，要比直接写入内存效率有所降低，导致Redis的吞吐量QPS略有下降。（2）AOF文件的rewrite时机不可控，所以不容易实现数据备份。（3）持久化保存的是全量数据的写指令日志，并非Redis数据文件，在Redis启动加载数据时，效率低下。–重点 RDB和AOF持久化方式选择两种方式，各有优缺点。RDB效率更高，但是丢失数据量会比较大；AOF的数据要进行写文件操作，效率略低，但是保存的持久化数据更完整。在实际应用中，通常会同时选择两种方案。可用方案：实现Redis主从集群，主节点用AOF，保证数据更好的完整性，即使出现故障，也能从故障中恢复数据，虽然AOF方式的Redis数据QPS会下降，但影响不大；从节点用短时间间隔（秒级）的RDB，从节点对外不提供服务，这样从节点出现故障的几率就会大大降低，RDB方式能够很好的实现数据文件的备份。]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 6.8 + MariaDB 10.0 with Galera Cluster+Keepalived高可用解决方案]]></title>
    <url>%2F2018%2F05%2F24%2FCentOS-6-8-MariaDB-10-0-with-Galera-Cluster-Keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[环境准备使用三台最小化安装的CentOS 6.8 x86_64新环境。 节点 节点名称 节点IP donor db1 192.168.1.150 node1 db2 192.168.1.151 node2 db3 192.168.1.152 Step 1- 设置MariaDB的yum安装源创建/etc/yum.repos.d/mariadb.repo CentOS 6 – 64bit系统mariadb.repo内容如下: 12345[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.0/centos6-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 For CentOS 6 – 32bit系统mariadb.repo内容如下: 12345[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.0/centos6-x86gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 Step 2 – 设置SELinux状态在开始安装之前，先把三台机器的SELinux状态设置为permissive，临时设置如下，重启失效。 1sudo setenforce 0 永久设置: 1vi /etc/selinux/config 12345678910# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:# enforcing - SELinux security policy is enforced. default# permissive - SELinux prints warnings instead of enforcing.# disabled - No SELinux policy is loaded.SELINUX=permissive# SELINUXTYPE= can take one of these two values:# targeted - Targeted processes are protected,# mls - Multi Level Security protection.SELINUXTYPE=targeted Step 3 – 安装 MariaDB Galera Cluster 10.0使用yum安装MariaDB Galera Cluster，需要先安装socat工具包，用来确保yum可以找到安装源。CentOS 6用以下方式安装： 1sudo yum install -y http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/s/socat-1.7.2.3-1.el6.x86_64.rpm CentOS 7用以下方式安装： 1sudo yum install socat 开始安装数据库集群环境 1sudo yum install MariaDB-Galera-server MariaDB-client rsync galera Step 4: MariaDB安全性设置MariaDB是Mysql的一个分支，所以使用Mysql的命令启动数据库。 1sudo service mysql start 执行以下脚本，并按提示进行相应操作，提升数据库安全。设置root初始密码为。 1sudo /usr/bin/mysql_secure_installation 我把root用户密码设置为root。 Step 5 – 创建MariaDB Galera Cluster集群数据通信用户创建一个集群节点之间进行数据状态快照转移（State Transfer Snapshot – SST）所使用的用户账号。 1234567mysql -u root -pmysql&gt; DELETE FROM mysql.user WHERE user=&apos;&apos;;mysql&gt; GRANT ALL ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;dbpass&apos;;mysql&gt; GRANT USAGE ON *.* to galera@&apos;%&apos; IDENTIFIED BY &apos;galera&apos;;mysql&gt; GRANT ALL PRIVILEGES on *.* to galera@&apos;%&apos;;mysql&gt; FLUSH PRIVILEGES;mysql&gt; quit 在开发或测试环境中，使用%表示任意主机，也就是说允许root用户和galera用户可以从任意主机登访问数据库。出于安全考虑，你可以把%替换成你所允许的主机名称或者主机IP地址。 Step 6 – MariaDB Galera Cluster 集群配置停止Mysql服务 1sudo service mysql stop 先创建Donor节点的配置信息。Donor节点只用来同步数据，不能有外部链接操作Donor节点数据，保证Donor节点的健康状态，维护正常的集群运行状态。其他节点只需要修改wsrep_node_address=’192.168.1.150’和wsrep_node_name=’db1’两个配置即可，其他配置相同。 向/etc/my.cnf.d/server.cnf文件中添加以下配置信息: 1sudo cat &gt;&gt; /etc/my.cnf.d/servebinlog_format=ROW 123456789101112131415161718default-storage-engine=innodbinnodb_autoinc_lock_mode=2innodb_locks_unsafe_for_binlog=1query_cache_size=0query_cache_type=0bind-address=0.0.0.0datadir=/var/lib/mysqlinnodb_log_file_size=100Minnodb_file_per_tableinnodb_flush_log_at_trx_commit=2wsrep_provider=/usr/lib64/galera/libgalera_smm.sowsrep_cluster_address=&quot;gcomm://192.168.1.150,192.168.1.151,192.168.1.152&quot;wsrep_cluster_name=&apos;galera_cluster&apos;wsrep_node_address=&apos;192.168.1.150&apos;wsrep_node_name=&apos;db1&apos;wsrep_sst_method=rsyncwsrep_sst_auth=sst_user:dbpassEOF wsrep_cluster_address配置省略了默认端口4567。 其他两个节点所需要修改的配置： node1节点 : 12wsrep_node_address=&apos;192.168.1.151&apos;wsrep_node_name=&apos;db2&apos; node2节点 : 12wsrep_node_address=&apos;192.168.1.152&apos;wsrep_node_name=&apos;db3&apos; Step 7– 初始化Donor节点Donor节点是整个集群的优先初始化节点，只有Donor节点先启动，其他子节点才能正常加入到集群当中。启动Donor节点，需要配置‐‐wsrep-new-cluster参数。 1sudo /etc/init.d/mysql start --wsrep-new-cluster 运行以下命令，查看集群的运行状态。 1mysql -uroot -p -e&quot;show status like &apos;wsrep%&apos;&quot; 输出以下信息： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263+------------------------------+-----------------------------------------------+| Variable_name | Value |+------------------------------+-----------------------------------------------+| wsrep_local_state_uuid | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564 || wsrep_protocol_version | 8 || wsrep_last_committed | 2 || wsrep_replicated | 0 || wsrep_replicated_bytes | 0 || wsrep_repl_keys | 0 || wsrep_repl_keys_bytes | 0 || wsrep_repl_data_bytes | 0 || wsrep_repl_other_bytes | 0 || wsrep_received | 10 || wsrep_received_bytes | 2304 || wsrep_local_commits | 0 || wsrep_local_cert_failures | 0 || wsrep_local_replays | 0 || wsrep_local_send_queue | 0 || wsrep_local_send_queue_max | 1 || wsrep_local_send_queue_min | 0 || wsrep_local_send_queue_avg | 0.000000 || wsrep_local_recv_queue | 0 || wsrep_local_recv_queue_max | 2 || wsrep_local_recv_queue_min | 0 || wsrep_local_recv_queue_avg | 0.100000 || wsrep_local_cached_downto | 1 || wsrep_flow_control_paused_ns | 0 || wsrep_flow_control_paused | 0.000000 || wsrep_flow_control_sent | 0 || wsrep_flow_control_recv | 0 || wsrep_cert_deps_distance | 1.000000 || wsrep_apply_oooe | 0.000000 || wsrep_apply_oool | 0.000000 || wsrep_apply_window | 1.000000 || wsrep_commit_oooe | 0.000000 || wsrep_commit_oool | 0.000000 || wsrep_commit_window | 1.000000 || wsrep_local_state | 4 || wsrep_local_state_comment | Synced || wsrep_cert_index_size | 1 || wsrep_causal_reads | 0 || wsrep_cert_interval | 0.000000 || wsrep_incoming_addresses | 192.168.1.150:3306 || wsrep_desync_count | 0 || wsrep_evs_delayed | || wsrep_evs_evict_list | || wsrep_evs_repl_latency | 4.67e-06/9.14775e-06/1.1497e-05/2.63955e-06/4 || wsrep_evs_state | OPERATIONAL || wsrep_gcomm_uuid | 559ef6a3-5f45-11e8-92a5-52514b1a7147 || wsrep_cluster_conf_id | 7 || wsrep_cluster_size | 1 || wsrep_cluster_state_uuid | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564 || wsrep_cluster_status | Primary || wsrep_connected | ON || wsrep_local_bf_aborts | 0 || wsrep_local_index | 0 || wsrep_provider_name | Galera || wsrep_provider_vendor | Codership Oy &lt;info@codership.com&gt; || wsrep_provider_version | 25.3.23(r3789) || wsrep_ready | ON || wsrep_thread_count | 2 |+------------------------------+-----------------------------------------------+58 rows in set (0.00 sec) 重点查看这些信息是否正确：wsrep_cluster_size 当前集群中节点个数wsrep_local_state_comment 集群数据同步状态wsrep_incoming_addresses 数据提供方节点地址和端口wsrep_ready ON集群状态正常wsrep_connected ON集群连接状态正常 Step 8– 动态添加集群节点按照Step6的操作，配置node1和node2两个节点的配置文件，用以下命令启动集群子节点。注意与Donor节点的启动方式不同。 1sudo service mysql start 检查node1和node2两个节点的状态，是否正常。 1mysql -u root -p -e &quot;show status like &apos;wsrep%&apos;&quot; node1和node2两个子节点启动后，状态查询结果如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263+------------------------------+----------------------------------------------------------+| Variable_name | Value |+------------------------------+----------------------------------------------------------+| wsrep_local_state_uuid | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564 || wsrep_protocol_version | 8 || wsrep_last_committed | 2 || wsrep_replicated | 0 || wsrep_replicated_bytes | 0 || wsrep_repl_keys | 0 || wsrep_repl_keys_bytes | 0 || wsrep_repl_data_bytes | 0 || wsrep_repl_other_bytes | 0 || wsrep_received | 3 || wsrep_received_bytes | 476 || wsrep_local_commits | 0 || wsrep_local_cert_failures | 0 || wsrep_local_replays | 0 || wsrep_local_send_queue | 0 || wsrep_local_send_queue_max | 1 || wsrep_local_send_queue_min | 0 || wsrep_local_send_queue_avg | 0.000000 || wsrep_local_recv_queue | 0 || wsrep_local_recv_queue_max | 1 || wsrep_local_recv_queue_min | 0 || wsrep_local_recv_queue_avg | 0.000000 || wsrep_local_cached_downto | 18446744073709551615 || wsrep_flow_control_paused_ns | 0 || wsrep_flow_control_paused | 0.000000 || wsrep_flow_control_sent | 0 || wsrep_flow_control_recv | 0 || wsrep_cert_deps_distance | 0.000000 || wsrep_apply_oooe | 0.000000 || wsrep_apply_oool | 0.000000 || wsrep_apply_window | 0.000000 || wsrep_commit_oooe | 0.000000 || wsrep_commit_oool | 0.000000 || wsrep_commit_window | 0.000000 || wsrep_local_state | 4 || wsrep_local_state_comment | Synced || wsrep_cert_index_size | 0 || wsrep_causal_reads | 0 || wsrep_cert_interval | 0.000000 || wsrep_incoming_addresses | 192.168.1.151:3306,192.168.1.152:3306,192.168.1.150:3306 || wsrep_desync_count | 0 || wsrep_evs_delayed | || wsrep_evs_evict_list | || wsrep_evs_repl_latency | 0.00115351/0.00145445/0.0018473/0.000297523/4 || wsrep_evs_state | OPERATIONAL || wsrep_gcomm_uuid | 273a3916-5f4f-11e8-88db-8ab9682bb4ca || wsrep_cluster_conf_id | 9 || wsrep_cluster_size | 3 || wsrep_cluster_state_uuid | 47b3fdaa-5f43-11e8-8cbd-62ce6e10f564 || wsrep_cluster_status | Primary || wsrep_connected | ON || wsrep_local_bf_aborts | 0 || wsrep_local_index | 0 || wsrep_provider_name | Galera || wsrep_provider_vendor | Codership Oy &lt;info@codership.com&gt; || wsrep_provider_version | 25.3.23(r3789) || wsrep_ready | ON || wsrep_thread_count | 2 |+------------------------------+----------------------------------------------------------+58 rows in set (0.00 sec) Step 9 – 验证数据同步复制模拟场景1：集群中三个节点全部正常启动。在node1和node2两个节点分别创建库和表，查看donor节点是否正常的同步更新数据。 模拟场景2：node1和node2中的一个节点宕机。在没有宕机的节点（除donor节点）中进行数据CUD操作，先查看donor节点是否正常的同步更新数据，如果正常，则重新启动宕机节点，启动成功后，查看该节点能否正常的把不一致的数据同步过来。 PS:Galera在加入数据不一致的节点时，外部不能访问该节点，直到数据同步后才能访问该节点。 Keepalived实现MariaDB集群的高可用配请参考这篇文章《Keepalived HA +LVS+ Galera Cluster环境》]]></content>
      <tags>
        <tag>MariaDB</tag>
        <tag>Keepalived</tag>
        <tag>Galera</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Galera Cluster 3 + Mysql wresp 5.6安装配置]]></title>
    <url>%2F2018%2F05%2F24%2FGalera-Cluster-3-Mysql-wresp-5-6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[安装yum-builddep工具yum install yum-utils –enablerepo=extras]]></content>
      <tags>
        <tag>Galera</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Keepalived HA +LVS+ Galera Cluster环境]]></title>
    <url>%2F2018%2F05%2F23%2FKeepalived-HA-LVS-Galera-Cluster%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Galera Cluster实现Mysql集群，再配合Keepalived的VRRP和LVS实现Mysql集群的高可用和负载均衡。 开发环境CentOS 6.8 + Mysql Galera 5.5 + Keepalived 1.4.4 1.安装Keepalived 123yum -y install kernel-develyum -y install ipvsadm 命令号执行ipvsadm是否安装成功，如果可以执行，则说明已经安装。 123wget http://www.keepalived.org/software/keepalived-1.4.4.tar.gztar -zvxf keepalived-1.4.4.tar.gz 找到Linux的内核源码路径，不同版本的操作系统版本号不同。 /usr/src/kernels/2.6.32-696.30.1.el6.x86_64/ 安装到/usr/local/keepalived目录，安装LVS功能需要指定内容源码路径。 1./configure --prefix=/usr/local/keepalived --with-kernel-dir=/usr/src/kernels/2.6.32-696.30.1.el6.x86_64 执行结果 12345678910111213141516171819202122232425262728293031323334353637Keepalived configuration------------------------Keepalived version : 1.4.4Compiler : gccPreprocessor flags : -I/usr/src/kernels/2.6.32-696.30.1.el6.x86_64/includeCompiler flags : -Wall -Wunused -Wstrict-prototypes -Wextra -g -O2 -D_GNU_SOURCE -fPIELinker flags : -pieExtra Lib : -lcrypto -lssl Use IPVS Framework : YesIPVS use libnl : NoIPVS syncd attributes : NoIPVS 64 bit stats : Nofwmark socket support : YesUse VRRP Framework : YesUse VRRP VMAC : YesUse VRRP authentication : YesWith ip rules/routes : YesSNMP vrrp support : NoSNMP checker support : NoSNMP RFCv2 support : NoSNMP RFCv3 support : NoDBUS support : NoSHA1 support : NoUse Debug flags : Nosmtp-alert debugging : NoUse Json output : NoStacktrace support : NoMemory alloc check : Nolibnl version : NoneUse IPv4 devconf : NoUse libiptc : NoUse libipset : Noinit type : upstartBuild genhash : YesBuild documentation : No*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS. 编译安装 1make &amp; make install 拷贝keepalived配置文件到/etc/keepalived/keepalived.conf 12345mkdir /etc/keepalivedcp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/cd /usr/local/keepalived/sbin/./keepalived 查看keepalived运行日志 1tail -f /var/log/messages 停止keepalived 1pkill keepalived 修改配置文件 1vi /etc/keepalived/keepalived.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859! Configuration File for keepalived## 重点配置router_id LVS_150global_defs &#123; notification_email &#123;# admin@example.com &#125; # notification_email_from Alexandre.Cassen@firewall.loc # smtp_server 192.168.200.1 #smtp_connect_timeout 30 #router_id LVS_DEVEL #vrrp_skip_check_adv_addr #vrrp_strict #vrrp_garp_interval 0 #vrrp_gna_interval 0 router_id LVS_150&#125;##重点配置 虚拟路由节点virtual_router_id 51，主从配置：state MASTER/SLAVE，虚拟ip可以多个用多行表示：virtual_ipaddressvrrp_instance VI_1 &#123; state MASTER interface eth0 virtual_router_id 51 priority 100 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.200.16 &#125;&#125;##重点配置lb_algo wrr ，lb_kind DR，路由协议protocol TCP，真实IP和端口号real_server 192.168.1.150 3306，connect_port 3306virtual_server 192.168.200.16 3306 &#123; delay_loop 6 lb_algo wrr lb_kind DR persistence_timeout 50 protocol TCP real_server 192.168.1.150 3306 &#123; weight 5 TCP_CHECK &#123; connect_timeout 10 nb_get_retry 3 delay_before_retry 3 connect_port 3306 &#125; &#125; real_server 192.168.1.152 3306 &#123; weight 5 TCP_CHECK &#123; connect_timeout 10 nb_get_retry 3 delay_before_retry 3 connect_port 3306 &#125; &#125;&#125; 启动keepalived 1./keepalived 在虚拟IP对应的其他节点，按照上述同样的操作安装keepalived，环境准备完成后，可以通过虚拟IP访问mysql数据库。 1mysql -h 192.168.200.16 -ugalera -pgalera 后续问题：在Mysql Galera Cluster单点故障的恢复和重启。]]></content>
      <tags>
        <tag>Keepalived</tag>
        <tag>Galera</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 6.8+MySQL 5.5 with Galera Cluster环境搭建]]></title>
    <url>%2F2018%2F05%2F23%2FCentOS-6-8-MySQL-5-5-with-Galera-Cluster%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718##先安装依赖库yum install libaio gcc gcc-c++ boost-devel scons check-devel openssl-develln -sf /usr/lib64/libssl.so.10 /usr/lib64/libssl.so.6ln -sf /usr/lib64/libcrypto.so.10 /usr/lib64/libcrypto.so.6##下载MySQL with wsrep源码包，目前最新版本是5.5.34-25.9wget https://launchpad.net/codership-mysql/5.5/5.5.34-25.9/+download/mysql-5.5.34_wsrep_25.9-linux-x86_64.tar.gztar zxvf mysql-5.5*mv mysql-5.5.34_wsrep_25.9-linux-x86_64 /usr/local/mysqlcd /usr/local/mysql/groupadd mysqluseradd -r -g mysql mysqlchown -R mysql:mysql ../scripts/mysql_install_db --no-defaults --datadir=/opt/mysqldb/ --user=mysqlchown -R root .chown -R mysql /opt/mysqldb/echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt;&gt; /etc/profilesource /etc/profile[root@localhost mysql]# vi /etc/my.cnf [mysqld]datadir=/opt/mysqldbsocket = /tmp/mysql.sockuser=mysql symbolic-links=0 12345678910111213141516171819202122##启动Mysqlmysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;##安装Xtrabackupyum install perl-DBD-MySQL perl-Time-HiRes ncwget https://www.percona.com/downloads/XtraBackup/XtraBackup-2.1.9/RPM/rhel6/x86_64/percona-xtrabackup-2.1.9-744.rhel6.x86_64.rpmrpm -ivh percona-xtrabackup-2.1.9-744.rhel6.x86_64.rpm##安装Galera复制插件wget https://launchpad.net/galera/3.x/25.3.5/+download/galera-25.3.5-src.tar.gztar zxvf galera-25.3.5-src.tar.gzcd galera-25.3.5-srcsconscp garb/garbd /usr/local/mysql/bin/cp libgalera_smm.so /usr/local/mysql/lib/plugin/ mysql初始化配置 12345678910111213141516171819mkdir -p /var/lib/mysqlmkdir -p /etc/mysql/conf.d/chown mysql:mysql /var/lib/mysqlcp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp;##创建用于同步的帐号，注意替换掉示例值。mysql -e &quot;SET wsrep_on=OFF; GRANT ALL ON *.* TO &apos;galera&apos;@&apos;%&apos; IDENTIFIED BY &apos;galera&apos;&quot;;##我使用的mysql版本再执行上述授权语句后，%代表任意主机，却不包含localhost，所以要给防伪localhost单独授权。mysql -e &quot;SET wsrep_on=OFF; GRANT ALL ON *.* TO &apos;galera&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;galera&apos;&quot;;##修改root帐号密码，注意替换掉示例值。mysql -e &quot;SET wsrep_on=OFF;GRANT ALL PRIVILEGES ON * . * TO &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ; &quot;##查看授权mysql -uroot -proot;show grants for galera@&quot;%&quot;;show grants for galera@&quot;localhost&quot;;##关闭MySQLpkill mysql Galera集群配置 修改my.cnf 1vi /etc/my.cnf my.cnf配置： 12345678910111213141516171819202122232425262728293031[mysqld]datadir=/opt/mysqldbsocket = /tmp/mysql.sockuser=mysqlsymbolic-links=0######galera conf start########server-id=101wsrep_node_name = mysql1wsrep_provider = /usr/local/mysql/lib/plugin/libgalera_smm.sowsrep_sst_method = rsync#使用sst的用户和密码，这里如果开启，需要在mysql上创建该用户，并授予其足够的权限wsrep_sst_auth=galera:galera# 配置集群的所有节点wsrep_cluster_address=gcomm://192.168.1.150:4567,192.168.1.151:4567# 配置自己的ip:port，每个配置各不相同wsrep_node_address=192.168.1.150:4567default_storage_engine=InnoDBinnodb_autoinc_lock_mode=2innodb_locks_unsafe_for_binlog=1innodb_flush_log_at_trx_commit=1innodb_file_per_table=1binlog_format=ROWlog-bin=mysql-binrelay-log=mysql-relay-binlog-slave-updates=1#[mysqld_safe]#log-error=/var/lib/mysql/mysqld.log#pid-file=/var/lib/mysql/mysqld.pid 节点mysql1启动 1/usr/local/mysql/bin/mysqld_safe --wsrep_cluster_address=gcomm:// &gt;/dev/null &amp; 检查启动的端口，应该有3306和4567两个端口 12netstat -tunlp |grep 4567netstat -tunlp |grep 3306 在集群中添加新的节点，并执行启动脚本。 1/etc/init.d/mysql start PS：复制虚拟机，设置新IP 在新的虚拟机中修改ifconfig-eth0，设置IP为192.168.1.151，去掉UUID、MAC两个参数。 1vi /etc/sysconfig/network-scripts/ifcfg-eth0 重建路由 1rm -rf /etc/udev/rules.d/70-persistent-net.rules 重启虚拟机 1shutown -r now 测试网络 1ping 192.168.1.150]]></content>
      <tags>
        <tag>Galera</tag>
        <tag>CentOS</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Galera Cluster环境快速搭建]]></title>
    <url>%2F2018%2F05%2F22%2FDocker-Galera-Cluster%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[使用Docker快速创建MariaDB（与MySql同源） Galera集群环境 Docker开发环境：MacOS High Sieera 10.13.2 (17C88)MariaDB Galera Cluster容器环境：CentOS 7.3 + MariaDB 10.1.23 1.执行Docker拉取镜像 docker pull mjstealey/mariadb-galera:10.1 2.下载测试脚本 123git clone https://github.com/mjstealey/mariadb-galera.gitcd mariadb-galera/ 下载好的代码中包括创建docker容器的脚本和测试脚本。 3.创建集群节点并执行测试语句 ./three-node-test.sh 命令执行过程中会创建三个节点，并且执行测试sql查看集群节点数据同步是否正确。测试通过后，可以使用后续命令分别操作三个节点的数据库。 4.查看已经运行的节点进程 docker container ls 输出结果 1234CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES0a06b6789c1c mjstealey/mariadb-galera:10.1 &quot;/docker-entrypoint.…&quot; 58 seconds ago Up 59 seconds 0.0.0.0:32791-&gt;3306/tcp, 0.0.0.0:32790-&gt;4444/tcp, 0.0.0.0:32789-&gt;4567/tcp, 0.0.0.0:32788-&gt;4568/tcp galera-node-3c4e5eb6d2ba1 mjstealey/mariadb-galera:10.1 &quot;/docker-entrypoint.…&quot; About a minute ago Up About a minute 0.0.0.0:32787-&gt;3306/tcp, 0.0.0.0:32786-&gt;4444/tcp, 0.0.0.0:32785-&gt;4567/tcp, 0.0.0.0:32784-&gt;4568/tcp galera-node-2bf53b99d540c mjstealey/mariadb-galera:10.1 &quot;/docker-entrypoint.…&quot; About a minute ago Up About a minute 0.0.0.0:32783-&gt;3306/tcp, 0.0.0.0:32782-&gt;4444/tcp, 0.0.0.0:32781-&gt;4567/tcp, 0.0.0.0:32780-&gt;4568/tcp galera-node-1 5.单独进入节点操作数据库docker exec -it bf53b99d540c mysql -uroot -ptemppassword MariaDB数据库的root用户密码是Docker在创建容器的时候配置的，可以从Dockerfile中找到配置，直接从镜像中拉取的容器镜像，是已经配置好的。如果本地执行Docker容器创建，那么可以修改Dockerfile中的相关配置。 命令中bf53b99d540c是指容器进程的CONTAINER ID的值。 参数解释-i 可交互-t 分配终端 命令执行完会进入MariaDB的命令行交互窗口。 6.在任一一个节点操作数据库，数据都会在其他节点同步（接近同步）更新。==Galera规则要求创建的表必须要有主键，没有主键也要指定自增列。== 12345create table tbl_user( pkid int auto_increment primary key, username varchar(255) not null);]]></content>
      <tags>
        <tag>MariaDB</tag>
        <tag>Galera</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql分区操作（三）]]></title>
    <url>%2F2018%2F05%2F17%2FMySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[子分区操作常用RANGE和HASH复合分区实现子分区 1234567891011121314151617CREATE TABLE myblog.tbl_users_2 ( `pkid` INT NOT NULL , `username` VARCHAR(255) NOT NULL, `password` VARCHAR(255) NOT NULL, `email` VARCHAR(255) NULL, `sex` CHAR(1) NULL, `create_time` DATE NULL)ENGINE = InnoDBDEFAULT CHARACTER SET = utf8 PARTITION BY RANGE(YEAR(create_time))SUBPARTITION BY HASH(TO_DAYS(create_time))SUBPARTITIONS 2(PARTITION p0 VALUES LESS THAN (2010),PARTITION p1 VALUES LESS THAN (2017),PARTITION p2 VALUES LESS THAN (MAXVALUE)); 123INSERT INTO TBL_USERS_2 VALUES (1,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2009-08-08&apos;);INSERT INTO TBL_USERS_2 VALUES (2,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2016-08-07&apos;);INSERT INTO TBL_USERS_2 VALUES (3,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,1,&apos;2018-08-08&apos;); 查看产生的分区 123456789101112131415161718EXPLAIN PARTITIONS SELECT * FROM tbl_users_2 \G;*************************** 1. row *************************** id: 1 select_type: SIMPLE table: tbl_users_2 partitions: p0_p0sp0,p0_p0sp1,p1_p1sp0,p1_p1sp1,p2_p2sp0,p2_p2sp1 type: ALLpossible_keys: NULL key: NULL key_len: NULL ref: NULL rows: 3 filtered: 100.00 Extra: NULL1 row in set, 2 warnings (0.00 sec)ERROR: No query specified 查看其中一条数据所在分区 123456789101112131415EXPLAIN PARTITIONS SELECT * FROM tbl_users_2 where create_time = &apos;2017-08-07&apos;\G;*************************** 1. row *************************** id: 1 select_type: SIMPLE table: tbl_users_2 partitions: p2_p2sp1 type: ALLpossible_keys: NULL key: NULL key_len: NULL ref: NULL rows: 1 filtered: 100.00 Extra: Using where1 row in set, 2 warnings (0.00 sec) 分区字段特殊性 按字段分区的字段不能为NULL，所以在建表时需要指定分区字段为NOT NULL。 分区管理 删除分区和分区上的数据 1alter table tbl_user drop partiton p0; 增加分区对于RANGE分区，只能添加比已经存在的分区范围更大的值。1alter table tbl_user add partition ( partition p0 values less than (100)); 对于LIST分区，只能添加不存在与分区列表中的值。 1alter table tbl_user add partition ( partition p0 values in (100,101,102)); 也就是说，100，101，102不在已定义的LIST分区内。 不丢失数据修改分区 如果原来的分区是这样的： 123456789create table tbl_user( pkid int not null, name varchar(255) ) partition by range(pkid) partitions 3( partition p0 values less than(100), partition p1 values less than(200), partition p2 values less than(300) ); ==修改(拆分)分区：== 1234alter table tbl_user reorganize partition p0 into ( partition s0 values less than(50), partition s1 values less than(100) ); 相当于原来的分区是这样创建的： 12345678910create table tbl_user( pkid int not null, name varchar(255) ) partition by range(pkid) partitions 4( partition s0 values less than(50), partition s1 values less than(100), partition p1 values less than(200), partition p2 values less than(300) ); LIST分区修改（拆分）同理。==修改(合并)分区：== 123alter table tbl_user reorganize partition s0,s1 into ( partition p0 values less than(100) ); 删除分区，不删除数据 1alter table tbl_user remove partitioning HASH和KEY分区管理 在没有数据的时候进行修改分区操作是可以的，如果在数据存在后再减少和增加分区，数据分布就不均匀了。 减少n个分区 1alter table tbl_user coalesce partition 2; 增加n个分区 1alter table tbl_user add partition 2; 其他分区管理语句 重建分区 1alter table tbl_user rebuild partition p0,p1,p2,p3; 优化分区(包括分析、检查、修补分区） 1alter table tbl_user optimize partition p0,p1,p2,p3; 分析分区 1alter table tbl_user analyze partiton p0,p1,p2,p3; 检查分区 1alter table tbl_user check partition p0,p1,p2,p3; 修补分区 1alter table tbl_user repair partition p0,p1,p2,p3; 其他细节 分区数最大不超过1024个，实际应用中分区数不超过150个；如果有唯一索引或者主键，分区列必须包含所有的唯一索引或者主键；不支持外键；不支持全区索引；常用日期进行分区；临时表不能被分区；单条数据查询分区管理意义不大，除非指定数据所在分区；计算分区成本，因为每次插入数据都会进行分区计算，分区函数不能过于复杂；分区字段不能为NULL；]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql分区操作（二）]]></title>
    <url>%2F2018%2F05%2F17%2FMySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[【转自】https://blog.csdn.net/tjcyjd/article/details/11194489HASH分区和线性LINEAR HASH分区 123456789CREATE TABLE `myblog`.`tbl_user_friends_linear_hash` ( `pkid` INT NOT NULL AUTO_INCREMENT, `user_id` INT NOT NULL, `friend_id` INT NOT NULL, `create_time` DATETIME NOT NULL, PRIMARY KEY (`pkid`))ENGINE = InnoDBDEFAULT CHARACTER SET = utf8COMMENT = &apos;用户好友&apos; PARTITION BY LINEAR HASH(pkid) PARTITIONS 3 ; MySQL还支持线性哈希功能，它与常规哈希的区别在于，线性哈希功能使用的一个线性的2的幂（powers-of-two）运算法则，而常规 哈希使用的是求哈希函数值的模数。 线性哈希分区和常规哈希分区在语法上的唯一区别在于，在“PARTITION BY” 子句中添加“LINEAR”关键字，如下面所示： 1234567891011CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;, separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;, job_code INT, store_id INT)PARTITION BY LINEAR HASH(YEAR(hired))PARTITIONS 4； 假设一个表达式expr, 当使用线性哈希功能时，记录将要保存到的分区是num 个分区中的分区N，其中N是根据下面的算法得到： 找到下一个大于num.的、2的幂，我们把这个值称为V ，它可以通过下面的公式得到： V = POWER(2, CEILING(LOG(2, num)))（例如，假定num是13。那么LOG(2,13)就是3.7004397181411。 CEILING(3.7004397181411)就是4，则V = POWER(2,4), 即等于16）。 设置 N = F(column_list) &amp; (V - 1). 当 N &gt;= num: · 设置 V = CEIL(V / 2) · 设置 N = N &amp; (V - 1) 例如，假设表t1，使用线性哈希分区且有4个分区，是通过下面的语句创建的： 123CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY LINEAR HASH( YEAR(col3) ) PARTITIONS 6; 现在假设要插入两行记录到表t1中，其中一条记录col3列值为’2003-04-14’，另一条记录col3列值为’1998-10-19’。第一条记录将要保存到的分区确定如下： V = POWER(2, CEILING(LOG(2,7))) = 8N = YEAR(‘2003-04-14’) &amp; (8 - 1) = 2003 &amp; 7 = 3 (3 &gt;= 6 为假（FALSE）: 记录将被保存到#3号分区中)第二条记录将要保存到的分区序号计算如下： V = 8N = YEAR(‘1998-10-19’) &amp; (8-1) = 1998 &amp; 7 = 6 (6 &gt;= 4 为真（TRUE）: 还需要附加的步骤) N = 6 &amp; CEILING(5 / 2) = 6 &amp; 3 = 2 (2 &gt;= 4 为假（FALSE）: 记录将被保存到#2分区中)按照线性哈希分区的优点在于增加、删除、合并和拆分分区将变得更加快捷，有利于处理含有极其大量（1000吉）数据的表。它的缺点在于，与使用常规HASH分区得到的数据分布相比，各个分区间数据的分布不大可能均衡。 KEY分区和LINEAR KEY分区 123456789CREATE TABLE `myblog`.`tbl_user_friends_linear_key` ( `pkid` INT NOT NULL AUTO_INCREMENT, `user_id` INT NOT NULL, `friend_id` INT NOT NULL, `create_time` DATETIME NOT NULL, primary key(pkid))ENGINE = InnoDBDEFAULT CHARACTER SET = utf8COMMENT = &apos;用户好友&apos; PARTITION BY LINEAR KEY(pkid) PARTITIONS 3 ; 按照KEY进行分区类似于按照HASH分区，除了HASH分区使用的用户定义的表达式，而KEY分区的 哈希函数是由MySQL 服务器提供。MySQL 簇（Cluster）使用函数MD5()来实现KEY分区；对于使用其他存储引擎的表，服务器使用其自己内部的 哈希函数，这些函数是基于与PASSWORD()一样的运算法则。 “CREATE TABLE … PARTITION BY KEY”的语法规则类似于创建一个通过HASH分区的表的规则。它们唯一的区别在于使用的关键字是KEY而不是HASH，并且KEY分区只采用一个或多个列名的一个列表。 通过线性KEY分割一个表也是可能的。下面是一个简单的例子： 1234567CREATE TABLE tk ( col1 INT NOT NULL, col2 CHAR(5), col3 DATE) PARTITION BY LINEAR KEY (col1)PARTITIONS 3; 在KEY分区中使用关键字LINEAR和在HASH分区中使用具有同样的作用，分区的编号是通过2的幂（powers-of-two）算法得到，而不是通过模数算法。]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为未来而学]]></title>
    <url>%2F2018%2F05%2F16%2F%E4%B8%BA%E6%9C%AA%E6%9D%A5%E8%80%8C%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[123如果一个人只满足于完成别人所要求的事情，那么，他只能是个奴隶，只有当他超越了这个限度，才会成为一个自由人。——哈佛学习格言 有关学习的两个困境 一、学习是一场竞赛，我们凭什么才可以胜出？ 大城市里面人们为了能够上一所“好的”小学，要选择购置学区房； 大城市里面为了能够将来上好的中学，还要报各种课外班，什么奥数，英语，绘画，书法，钢琴，足球，篮球······； 大城市里面孩子们每天不是在上学就是在上课外班，家长不是在送孩子去上学的路上就是在送孩子去课外班的路上。 这一切正常吗，我们是选择了随大流还是经过了深思熟虑的思考？这样的学习方式和节奏是最有效的吗？这场学习的竞赛普通的家庭有竞争优势吗？哪些能力在我们未来会让我们更有竞争优势呢？哪些方面的学习对我们一生更加重要呢？ 不知道这些问题，朋友们有没有问过自己，有没有过深入的思考，有没有给自己一个答案。 与此相反的是，小城市、农村、郊区的孩子们多数情况是玩玩玩，大好的青春真的就在玩耍中渡过啦，想必长大后会后悔吧。毕竟，人生中有许多事情是需要时间的积累的，而时间是不可以购买的，时间是一去不复返的，错过真的很难弥补上。阅读，就属于这样的事情。 现在，城市与郊区的教育，重点学校与普通学校之间教育的差距越来越大，这种差距一方面体现在对教育的认知上，另一方面体现在优质的教育资源和用钱堆出来的课外兴趣班、优培班。 好在，我们还有一种方法，能够缩小这种无法改变的学习资源和环境差距。是什么样的方法呢？ 俗话说，要用正确的方法做正确的事情。这一点最关键。我们要从学习的最根本出发，去探寻学习的本质，去掌握学习的方法，去洞察未来，这就是我们需要做的最正确的事情，它保证我们走在一条正确的道路上。而做这些事情，好的学校和富裕的家庭条件都不是必须的条件，需要的是我们的态度和行动。 二、学习是为了生活，生活是一辈子的事情，我们是否有终身学习的准备？ 先不说，终身学习，就是学校里的学习，我们都无法很好地完成。这是为什么呢？ 说不爱学习的人，实际是没有发现好的学习方式、引人入胜的学习资源、让人体会到收获和成就感的学习成果。甚至，从更根本上来说，是没有找到或发现学习的意义。 其实，人天生就是学习的好手，不仅具有好奇心，而且也爱学习。 学习中往往会： 因为不知道自己不知道，而没有思考； 因为不知道学习目标是什么，不知道为什么而学，而没有动力； 因为不知道学习方法，而无法采取行动； 因为不知道学习需要经历的过程，而无法坚持。 在这里，你将看清楚“学习”的样子，看清楚“学习的过程”，掌握“学习”的方法，知道并体会到“学习”带来的各种机会和可能性。 从此，你会亲手为自己打开一扇通往未来的希望之门，你会走在通往未来的道路上，而且还站在巨人的肩膀上。慢慢地，你会发现你已经不是原来的你了，你能看的更远，也能看的更加清晰。终身学习也因此成为了你生活中形影不离的朋友！]]></content>
      <tags>
        <tag>学习力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql分区操作（一）]]></title>
    <url>%2F2018%2F05%2F16%2FMySql%E5%88%86%E5%8C%BA%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[##分区类型RANGE 连续的列值区间分区，有主键和唯一键必须使用，如果没有则可以指定任何一列；LIST 类似RANGE分区，区别在于指定一系列的列值作为分区条件；HASH 由函数表达式返回值决定所在分区，函数返回值必须为非负整数；KEY 由mysql提供的HASH函数进行服务，==使用较少==。 ##创建表分区 1234567891011121314CREATE TABLE tbl_users ( `pkid` INT NOT NULL AUTO_INCREMENT, `username` VARCHAR(255) NOT NULL, `password` VARCHAR(255) NOT NULL, `email` VARCHAR(255) NULL, `sex` CHAR(1) NULL, PRIMARY KEY (`pkid`))ENGINE = InnoDBDEFAULT CHARACTER SET = utf8 PARTITION BY RANGE(pkid) PARTITIONS 3( PARTITION part0 VALUES LESS THAN (10000), PARTITION part1 VALUES LESS THAN (20000), PARTITION part2 VALUES LESS THAN (MAXVALUE)) ; ##查看分区 1select * from information_schema.partitions where table_schema=&apos;myblog&apos; and table_name=&apos;tbl_users&apos; \G; 得到如下结果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879*************************** 1. row *************************** TABLE_CATALOG: def TABLE_SCHEMA: myblog TABLE_NAME: tbl_users PARTITION_NAME: part0 SUBPARTITION_NAME: NULL PARTITION_ORDINAL_POSITION: 1SUBPARTITION_ORDINAL_POSITION: NULL PARTITION_METHOD: RANGE SUBPARTITION_METHOD: NULL PARTITION_EXPRESSION: pkid SUBPARTITION_EXPRESSION: NULL PARTITION_DESCRIPTION: 10000 TABLE_ROWS: 0 AVG_ROW_LENGTH: 0 DATA_LENGTH: 16384 MAX_DATA_LENGTH: NULL INDEX_LENGTH: 0 DATA_FREE: 0 CREATE_TIME: 2018-05-16 18:21:08 UPDATE_TIME: NULL CHECK_TIME: NULL CHECKSUM: NULL PARTITION_COMMENT: NODEGROUP: default TABLESPACE_NAME: NULL*************************** 2. row *************************** TABLE_CATALOG: def TABLE_SCHEMA: myblog TABLE_NAME: tbl_users PARTITION_NAME: part1 SUBPARTITION_NAME: NULL PARTITION_ORDINAL_POSITION: 2SUBPARTITION_ORDINAL_POSITION: NULL PARTITION_METHOD: RANGE SUBPARTITION_METHOD: NULL PARTITION_EXPRESSION: pkid SUBPARTITION_EXPRESSION: NULL PARTITION_DESCRIPTION: 20000 TABLE_ROWS: 0 AVG_ROW_LENGTH: 0 DATA_LENGTH: 16384 MAX_DATA_LENGTH: NULL INDEX_LENGTH: 0 DATA_FREE: 0 CREATE_TIME: 2018-05-16 18:21:08 UPDATE_TIME: NULL CHECK_TIME: NULL CHECKSUM: NULL PARTITION_COMMENT: NODEGROUP: default TABLESPACE_NAME: NULL*************************** 3. row *************************** TABLE_CATALOG: def TABLE_SCHEMA: myblog TABLE_NAME: tbl_users PARTITION_NAME: part2 SUBPARTITION_NAME: NULL PARTITION_ORDINAL_POSITION: 3SUBPARTITION_ORDINAL_POSITION: NULL PARTITION_METHOD: RANGE SUBPARTITION_METHOD: NULL PARTITION_EXPRESSION: pkid SUBPARTITION_EXPRESSION: NULL PARTITION_DESCRIPTION: MAXVALUE TABLE_ROWS: 0 AVG_ROW_LENGTH: 0 DATA_LENGTH: 16384 MAX_DATA_LENGTH: NULL INDEX_LENGTH: 0 DATA_FREE: 0 CREATE_TIME: 2018-05-16 18:21:08 UPDATE_TIME: NULL CHECK_TIME: NULL CHECKSUM: NULL PARTITION_COMMENT: NODEGROUP: default TABLESPACE_NAME: NULL3 rows in set (0.01 sec) ##查看分区上的数据 1select * from tbl_users partition(p0) ##查看分区数据查询性能 1explain partitions select * from tbl_users where pkid =2; ##其他分区类型LIST类型 12345678910111213CREATE TABLE `myblog`.`tbl_blog` ( `pkid` INT NOT NULL AUTO_INCREMENT, `title` VARCHAR(255) NOT NULL, `content` VARCHAR(5000) NULL, `create_time` DATETIME NULL, PRIMARY KEY (`pkid`))ENGINE = InnoDBDEFAULT CHARACTER SET = utf8COMMENT = &apos;博客文章&apos; PARTITION BY LIST(pkid) PARTITIONS 3( PARTITION part0 VALUES IN (1,2,3), PARTITION part1 VALUES IN (4,5,6), PARTITION part2 VALUES IN (7,8,9)) ; HASH类型利用分区字段除分区数量取余数，就把数据放到第余数个分区上。 123456789CREATE TABLE `myblog`.`tbl_user_friends` ( `pkid` INT NOT NULL AUTO_INCREMENT, `user_id` INT NOT NULL, `friend_id` INT NOT NULL, `create_time` DATETIME NOT NULL, PRIMARY KEY (`pki`))ENGINE = InnoDBDEFAULT CHARACTER SET = utf8COMMENT = &apos;用户好友&apos; PARTITION BY HASH(pkid) PARTITIONS 3 ; 插入数据 12insert into tbl_user_friends values(1,2,3,NULL);insert into tbl_user_friends values(5,2,3,NULL); 得到结论 1234567891011121314select * from tbl_user_friends partition(p1);+------+---------+-----------+-------------+| pkid | user_id | friend_id | create_time |+------+---------+-----------+-------------+| 1 | 2 | 3 | NULL |+------+---------+-----------+-------------+1 row in set (0.00 sec)mysql&gt; select * from tbl_user_friends partition(p2);+------+---------+-----------+-------------+| pkid | user_id | friend_id | create_time |+------+---------+-----------+-------------+| 5 | 2 | 3 | NULL |+------+---------+-----------+-------------+1 row in set (0.00 sec)]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 5.x进阶笔记（二）]]></title>
    <url>%2F2017%2F08%2F01%2Fp%2FLaravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在浏览器中展示创建的Article列表在浏览器中展示创建的Article数据，需要使用Http请求Web服务器，Web服务器接收请求并将Article数据在视图页面中展示，即MVC。完成上述操作，离不开Laravel的路由功能，所谓路由就是请求的控制转发。Laravel把所有的请求地址预先配置在路由列表文件中learnlaravel5/app/Http/routes.php。描述路由的基本格式是： 1Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;); Route类（\Illuminate\Support\Facades\Route）是Laravel框架提供的路由配置工具类，get标识http请求的Method（get/post/put/patch…），get函数的第一个参数是url格式定义，第二个参数用@分割成两部分，第一部分是Http请求的Controller类，第二部分标识Controller的具体执行方法，具体看HomeController类的内容描述： 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\Http\Controllers;use App\Article;use App\Http\Requests;use Illuminate\Http\Request;class HomeController extends \Illuminate\Routing\Controller&#123; /** * Create a new controller instance. * * @return void */ public function __construct() &#123; $this-&gt;middleware(&apos;auth&apos;); &#125; /** * Show the application dashboard. * * @return \Illuminate\Http\Response */ public function index() &#123; return view(&apos;home&apos;)-&gt;withArticles(Article::all());; &#125;&#125; _construct()是默认构造函数，函数体使用middleware(‘auth’)中间件，描述访问这个Controller需要登录验证。index()方法则是在路由中指定的执行方法，返回值是一个视图层对象view，视图的目录位置是模板文件learnlaravel5/resources/views/home.blade.php，view(‘home’)中的home与模板文件的第一个关键字相同，index函数指定了返回的视图文件，并把Article数据通过Eloquent方法取出，使用withArticles方法携带返回到视图页面，此处withArticles标识在页面可以通过articles对象取得所有返回的数据，依次类推如果是withAcls,则在页面上使用acls对象获取返回的数据。home.blade.php示例（php模板语法自行解决）： 12345678910111213141516171819202122232425@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;div id=&quot;title&quot; style=&quot;text-align: center;&quot;&gt; &lt;h1&gt;Learn Laravel 5&lt;/h1&gt; &lt;div style=&quot;padding: 5px; font-size: 16px;&quot;&gt;Learn Laravel 5&lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;div id=&quot;content&quot;&gt; &lt;ul&gt; @foreach ($articles as $article) &lt;li style=&quot;margin: 50px 0;&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;a href=&quot;&#123;&#123; url(&apos;article/&apos;.$article-&gt;id) &#125;&#125;&quot;&gt; &lt;h4&gt;&#123;&#123; $article-&gt;title &#125;&#125;&lt;/h4&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;body&quot;&gt; &lt;p&gt;&#123;&#123; $article-&gt;body &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; @endforeach &lt;/ul&gt; &lt;/div&gt;@endsection 通过浏览器输入http://localhost:1024/home，就能看到数据加载到页面。]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 5.x进阶笔记（一）]]></title>
    <url>%2F2017%2F08%2F01%2Fp%2FLaravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[默认条件MacOS，&gt;=PHP5.4，翻墙环境（默认创建的项目会请求*.google.com）懂得PHP基础知识和MVC的基本架构，开发环境已经安装Laravel所需的命令环境。 配置composer中国镜像，使得本地开发环境下载依赖速度更快。1composer config -g repo.packagist composer https://packagist.phpcomposer.com 创建Laravel项目进入项目的工作空间目录 1cd ~/workspace 创建Laravel项目1composer -vvv create-project laravel/laravel learnlaravel5 5.2.31 项目创建完成，进入刚刚创建的项目，并使用PHP内置server服务启动项目，访问页面验证。 12cd learnlaravel5/publicphp -S 0.0.0.0:1024 页面效果使用1024端口访问的目的是Unix系统的动态端口的开始端口，不需要进行端口配置，就可以启动监听。如果单纯要学习Laravel或者PHP，请不要使用apache或者nginx这样的web服务器启动项目，对学习本身带来影响。 启用Laravel针对PHP5.4版本的trait特性实现用户注册登录的功能，实现简单的用户权限管理12cd .. ##cd ~/workspace/learnlaravel5php artisan make:auth 不需要停止php -S即可直接访问localhost:1024/login查看生成登录页面 Mysql创建数据库laravel5，用户名和密码均为root1create database laravel5 修改learnlaravel5项目的配置文件12cd ~/workspace/learnlaravel5open .env ##.env文件不存在，需要拷贝一份.env.example 修改配置项 123456DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=laravel5DB_USERNAME=rootDB_PASSWORD=root 使用laravel默认的数据库描述文件创建表执行命令创建表 1php artisan migrate migrate命令要执行的php描述文件是learnlaravel5/database/migrations下的文件 2014_10_12_000000_create_users_table.php 2014_10_12_100000_create_password_resets_table.php再查看一下laravel5数据库中是否创建了这两个描述文件中的表，如果已经创建，说明命令执行成功，就可以用注册页面注册用户了，赶快试一试。使用 Laravel 的“葵花宝典”：EloquentEloquent是Laravel定义的Model基类，只要Larave创建Model就会继承Eloquent类，此时创建的Model就具有了十个异常强大的函数，从此想干啥事儿都是一行代码就搞定，创建一个Article的Model体验一下： 1php artisan make:model Article 创建Article对应的数据库描述文件 1php artisan make:migration create_article_table 打开刚刚创建的数据库迁移描述文件 1open learnlaravel5/database/migration/*_create_article_table.php 修改文件的内容为： 123456789101112131415161718192021222324252627282930313233343536&lt;?phpuse Illuminate\Database\Schema\Blueprint;use Illuminate\Database\Migrations\Migration;class CreateArticleTable extends Migration&#123; /** * Run the migrations. * * 创建文章表 * * @return void */ public function up() &#123; Schema::create(&apos;articles&apos;, function($table) &#123; $table-&gt;increments(&apos;id&apos;); $table-&gt;string(&apos;title&apos;); $table-&gt;text(&apos;body&apos;)-&gt;nullable(); $table-&gt;integer(&apos;user_id&apos;); $table-&gt;timestamps(); &#125;); &#125; /** * Reverse the migrations. * * @return void */ public function down() &#123; // &#125;&#125; 再次使用数据库迁移命令创建articles表 1php artisan migrate 执行完后，在laravel5的数据库中会创建出articles的表结构。使用Seeder往数据库中插入默认数据。首先创建一个Seeder，例如： 1php artisan make:seeder ArticleSeeder 在learnlaravel5/database/seeds/下打开并修改刚刚创建的ArticleSeeder.php文件，默认的run函数体为空，为其添加创建Article的数据脚本。 1234567891011public function run() &#123; DB::table(&apos;articles&apos;)-&gt;delete(); for ($i=0;$i&lt;10;$i++)&#123; \App\Article::create([ &apos;title&apos;=&gt;&apos;Title&apos;.$i, &apos;body&apos;=&gt;&apos;Body&apos;.$i, &apos;user_id&apos;=&gt;1 ]); &#125; &#125; 把ArticleSeeder注册到项目的数据库执行环境中。打开learnlaravel5/database/seeds/DatabaseSeeder.php，并修改run函数。 1234public function run() &#123; $this-&gt;call(ArticleSeeder::class); &#125; 由于learnlaravel5/database目录不能被composer自动加载，所有需要执行命令让这个目录加载待composer环境，保证代码能找到ArticleSeedr这个类。 1composer dump-autoload 然后再执行 1php artisan db:seed 执行完，此时在数据库laravel5的article表中会产生10条数据。 下一节再讲解如何展示插入的数据 &gt;&gt;&gt;Laravel 5.x进阶笔记（二）]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 5.x进阶笔记（二）]]></title>
    <url>%2F2017%2F08%2F01%2Fp%2FLaravel5.x%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"></content>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker清理命令]]></title>
    <url>%2F2017%2F05%2F21%2FDocker%E6%B8%85%E7%90%86%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[杀死所有正在运行的容器 docker kill $(docker ps -a -q) 删除所有已经停止的容器 docker rm $(docker ps -a -q) 删除所有未打 dangling 标签的镜像 docker rmi $(docker images -q -f dangling=true) 删除所有镜像 docker rmi $(docker images -q) 为这些命令创建别名 ~/.bash_aliases COMMOND 杀死所有正在运行的容器. alias dockerkill=&#39;docker kill $(docker ps -a -q)&#39; 删除所有已经停止的容器. alias dockercleanc=&#39;docker rm $(docker ps -a -q)&#39; 删除所有未打标签的镜像. alias dockercleani=&#39;docker rmi $(docker images -q -f dangling=true)&#39; 删除所有已经停止的容器和未打标签的镜像. alias dockerclean=&#39;dockercleanc || true &amp;&amp; dockercleani&#39;]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用wait(),notify()配合synchronized实现自定义阻塞队列MyBlockingQueue]]></title>
    <url>%2F2016%2F04%2F21%2F%E4%BD%BF%E7%94%A8wait-notify-%E9%85%8D%E5%90%88synchronized%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97MyBlockingQueue%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118package cn.klxx.multithread;import java.util.LinkedList;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicInteger;/** * @author ForwardLee * @description 使用synchronized关键字，wait()和notify()方法实现阻塞队列 */public class MyBlockingQueue &#123; //队列容器 private final LinkedList&lt;Object&gt; list = new LinkedList&lt;Object&gt;(); //队列大小,使用AtomicInteger可以保证在多线程获取队列大小时线程安全 private AtomicInteger count = new AtomicInteger(0); //队列最大长度 private int maxSize; //队列最小长度 private int minSize = 0; //实现业务模型的锁 private Object lock = new Object(); public MyBlockingQueue(int length)&#123; this.maxSize = length; &#125; /** * @description 队列存数据 * @param obj */ public void putObj(Object obj)&#123; synchronized (lock)&#123; if (count.get()==maxSize) &#123; try &#123; lock.wait();//队列长度已经达到最大值，不能再继续存储数据，则线程处于等待状态，直至队列收到有可用位置的通知。 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; list.push(obj); count.incrementAndGet(); lock.notify();//如果已经有线程等待获取队列数据，此时就通知取数据线程有数据了。 System.out.println(&quot;存入对象：&quot;+obj); &#125; &#125; /** * @description 获取队列中的数据 * @return 返回队列的第一个元素 */ public Object getObject()&#123; Object retVal = null; synchronized (lock)&#123; if (count.get()==0) &#123; try &#123; lock.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; retVal = list.getFirst(); count.decrementAndGet(); lock.notify();//队列长度小于maxSize了，有存储空间了，就通知存储线程可以放入数据了。 System.out.println(&quot;取出对象：&quot;+retVal); &#125; return retVal; &#125; public static void main(String[] args) &#123; final MyBlockingQueue myBlockingQuene = new MyBlockingQueue(5); new Thread(new Runnable() &#123; @Override public void run() &#123; Object var1 = myBlockingQuene.getObject(); &#125; &#125;,&quot;t1&quot;).start(); new Thread(new Runnable() &#123; @Override public void run() &#123; myBlockingQuene.putObj(&quot;abc1&quot;); myBlockingQuene.putObj(&quot;abc2&quot;); myBlockingQuene.putObj(&quot;abc3&quot;); myBlockingQuene.putObj(&quot;abc4&quot;); myBlockingQuene.putObj(&quot;abc5&quot;); myBlockingQuene.putObj(&quot;abc6&quot;); System.out.println(&quot;此时队列长度L1=&quot;+myBlockingQuene.count.get()); myBlockingQuene.putObj(&quot;abc7&quot;);//这个对象放不了，线程就处于等待状态了。 &#125; &#125;,&quot;t2&quot;).start(); try &#123; TimeUnit.SECONDS.sleep(5); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; new Thread(new Runnable() &#123; @Override public void run() &#123; Object var2 = myBlockingQuene.getObject();//t2线程中的abc7对象此时才能放入队列。 System.out.println(&quot;此时队列长度L2=&quot;+myBlockingQuene.count.get()); &#125; &#125;,&quot;t3&quot;).start(); &#125;&#125;]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CountDownLatch多线程性能]]></title>
    <url>%2F2016%2F04%2F19%2Fjava%2FCountDownLatch%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD%2F</url>
    <content type="text"><![CDATA[cn.klxx.multithread;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129import java.util.ArrayList;import java.util.List;import java.util.concurrent.CountDownLatch;/** * Object方法wait()、notify()两个方法需要配合sychronized关键字使用， * wait()方法释放锁，notify()方法占有锁，所以要先调用wait()方法，再调用notify()方法 */public class MyCountDownLatch &#123;static List list = new ArrayList();public void addString(String a)&#123; list.add(a); System.out.println(&quot;list add string!&quot;);&#125;public int getSize()&#123; return list.size();&#125;static final Object lock = new Object(); public static void main(String[] args) &#123; final MyCountDownLatch myCountDownLatch = new MyCountDownLatch(); Thread t1 = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; synchronized (lock)&#123; for (int i = 0; i &lt; 10; i++) &#123; myCountDownLatch.addString(&quot;abc&quot;); Thread.sleep(500); if(list.size()==5)&#123; lock.notify(); System.out.println(&quot;发出通知...&quot;); &#125; &#125; System.out.println(&quot;执行完这句话释放锁...&quot;); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;,&quot;t1&quot;) ; Thread t2 = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; synchronized (lock) &#123; if (list.size()!=5) &#123; lock.wait();//此时t2处于等待中，不再继续往下执行代码，直到收到通知才继续执行 &#125; System.out.println(&quot;t2 收到停止通知&quot;); throw new RuntimeException(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;,&quot;t2&quot;) ; /** * t2必须先启动，因为wait方法不会占有锁，不影响t1执行；如果t1先启动会占有锁，而t2则不能使用锁无法执行。 * 用wait和notify配合关键字sychronized关键字，使用等notify所在的sychronized关键字代码块执行完， * wait所在的sychronized代码块才会继续执行，这样的最大问题就是收到通知的时间严重滞后于发送通知的时间。 * 所以要借助CountDownLatch来解决这个问题，CountDownLatch使用countDown方法发送完通知后也会继续执行， * 但是await方法会马上收到通知继续执行代码，避免了收到通知的严重滞后问题。 */ t2.start(); t1.start(); try &#123; Thread.sleep(10000); list.clear(); System.out.println(&quot;-----------------------------&quot;); System.out.println(&quot;list.size:&quot;+list.size()); System.out.println(&quot;-----------------------------&quot;); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; final CountDownLatch countDownLatch = new CountDownLatch(1); Thread t3 = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; list.add(&quot;abc&quot;); System.out.println(&quot;list add string!&quot;); Thread.sleep(500); if (list.size()==5) &#123; System.out.println(&quot;发送通知&quot;); countDownLatch.countDown(); &#125; &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;, &quot;t3&quot;); Thread t4 = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; if (list.size()!=5) &#123; System.out.println(&quot;t4 等待...&quot;); countDownLatch.await(); &#125; System.out.println(&quot;list.size:&quot;+list.size()+&quot; ,t4 停止&quot;); throw new RuntimeException(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;, &quot;t4&quot;); t3.start(); t4.start(); &#125;&#125;]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>MultiThread</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDKBlockingQueue使用]]></title>
    <url>%2F2016%2F04%2F10%2FJDKBlockingQueue%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140package cn.klxx.multithread;import org.junit.Test;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.LinkedBlockingDeque;import java.util.concurrent.PriorityBlockingQueue;import java.util.concurrent.SynchronousQueue;/** * @description JDK实现的阻塞和无阻塞队列测试 * @author ForwardLee */public class JDKBlockingQueueTest &#123; /** * 有界阻塞队列 */ @Test public void testArrayBlockingQueue() throws Exception &#123; ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = new ArrayBlockingQueue&lt;String&gt;(5); arrayBlockingQueue.add(&quot;a&quot;); arrayBlockingQueue.add(&quot;b&quot;); arrayBlockingQueue.add(&quot;c&quot;); arrayBlockingQueue.add(&quot;d&quot;); arrayBlockingQueue.add(&quot;e&quot;); arrayBlockingQueue.add(&quot;f&quot;); &#125; /** * @descripiton 可以是有界阻塞队列，也可以是无解阻塞队列，关键看实例化队列对象用的构造方法是否初始化队列大小 */ @Test public void testLinkedBlockingDeque() throws Exception &#123; LinkedBlockingDeque&lt;String&gt; linkedBlockingDeque = new LinkedBlockingDeque&lt;String&gt;();//new LinkedBlockingDeque&lt;String&gt;(2) linkedBlockingDeque.add(&quot;a&quot;); linkedBlockingDeque.offer(&quot;b&quot;); linkedBlockingDeque.add(&quot;c&quot; ); &#125; /** * @description 同步阻塞队列，主要应用场景在于多线程之间的线程切换，例如线程池的实现。 * 不能直接往队列中存数据。要往队列中存数据，前提是必须要有一个线程等待取数据 * Executors.newCachedThreadPool() * * Creates a thread pool that creates new threads as needed, but * will reuse previously constructed threads when they are * available, and uses the provided * ThreadFactory to create new threads when needed. * &#123;@param threadFactory the factory to use when creating new threads * @return the newly created thread pool * @throws NullPointerException if threadFactory is null&#125; * * public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) &#123; * return new ThreadPoolExecutor(0, Integer.MAX_VALUE, * 60L, TimeUnit.SECONDS, * new SynchronousQueue&lt;Runnable&gt;(), * threadFactory); * &#125; */ @Test public void testSynchronousQueue() throws Exception &#123; final SynchronousQueue&lt;String&gt; synchronousQueue = new SynchronousQueue&lt;String&gt;(); new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; String peek = synchronousQueue.take(); System.out.println(peek); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;).start(); new Thread(new Runnable() &#123; public void run() &#123; synchronousQueue.add(&quot;a&quot;); &#125; &#125;).start(); &#125; /** * PriorityBlockingQueue是带优先级的无界阻塞队列，每次出队都返回优先级最高的元素， * 是二叉树最小堆的实现，研究过数组方式存放最小堆节点的都知道，直接遍历队列元素是无序的。 * 队列存储的对象必须实现Comparable接口 * @throws Exception */ @Test public void testPriorityBlockingQueue() throws Exception &#123; PriorityBlockingQueue&lt;ObjectWithComparable&gt; priorityBlockingQueue= new PriorityBlockingQueue&lt;ObjectWithComparable&gt;(); ObjectWithComparable o1 = new ObjectWithComparable(); o1.setId(3); priorityBlockingQueue.add(o1); ObjectWithComparable o2 = new ObjectWithComparable(); o2.setId(4); priorityBlockingQueue.add(o2); ObjectWithComparable o3 = new ObjectWithComparable(); o3.setId(2); priorityBlockingQueue.add(o3); for (ObjectWithComparable objectWithComparable : priorityBlockingQueue) &#123; System.out.println(priorityBlockingQueue.take()); &#125; &#125; private class ObjectWithComparable implements Comparable&lt;ObjectWithComparable&gt;&#123; private int id; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; @Override public int compareTo(ObjectWithComparable o) &#123; return this.id&gt;o.id? 1:(this.id&lt;o.id? -1:0); &#125; @Override public String toString() &#123; return &quot;ObjectWithComparable&#123;&quot; + &quot;id=&quot; + id + &apos;&#125;&apos;; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>MultiThread</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis主从复制丢失数据问题]]></title>
    <url>%2F2015%2F01%2F20%2FRedis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[master重要配置min-slaves-to-write 1min-slaves-max-lag 10 两个配置一起解释，至少有一个slave节点的数据同步延迟不能超过10s，否则master将暂停接收新数据的写入操作。这样能保证在主从复制过程中出现问题，master节点丢失的数据量可控。 场景一：主从异步复制导致的数据丢失场景：master接收到新数据，还没有把新数据异步传输给slave，此时master宕机，那么master在内存中接收到的新数据将会丢失。 场景二：哨兵机制下（Sentinel）集群主从节点发生脑裂场景：master节点与slave节点断开网络连接，但是master的client端依然与master正常通信，此时数据还一直往master节点写入，哨兵（Sentinel）认为master已经挂掉，哨兵会进行主从转换，选举出一个slave节点转换为master节点接收数据，而原来的master在恢复网络连接后会变成slave从新的master中同步数据，那么这就导致原来master在断开与slave的连接后，接收到client端的新数据被丢弃，造成数据丢失。 解决方案依赖以上两个配置，控制数据丢失的数量。如果发生master暂停写入新数据，那么redis的client端可以进行如下操作，保证服务的可用性：（1）client端做降级处理，把数据写入本地磁盘，等master能够写操作时写入master；然后对client对外提供服务的接口做降级处理，减少client接收到的请求数量，降低redis的并发写入量。（2）client端将数据写入异步消息队列，每隔一段时间把数据从消息队列中取出，再写回到master当中。]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis单机QPS压力测试]]></title>
    <url>%2F2015%2F01%2F18%2FRedis%E5%8D%95%E6%9C%BAQPS%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[#使用redis-benchmark命令进行QPS压力测试 12cd /usr/local/common/redis/src./redis-benchmark -h 192.168.1.113 -c 1000 -n 100000 -d 3 &gt;&gt; ~/redis_qps.log redis-benchmark 常用参数-h redis主机ip地址-c 客户端连接数-n request请求数量-d redis进行SET/GET操作的数据大小，单位byte 压力测试结果示例requests completed in 2.17 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.18% &lt;= 4 milliseconds0.92% &lt;= 5 milliseconds2.32% &lt;= 6 milliseconds4.32% &lt;= 7 milliseconds9.11% &lt;= 8 milliseconds16.99% &lt;= 9 milliseconds27.26% &lt;= 10 milliseconds39.69% &lt;= 11 milliseconds53.45% &lt;= 12 milliseconds65.56% &lt;= 13 milliseconds75.19% &lt;= 14 milliseconds82.30% &lt;= 15 milliseconds87.56% &lt;= 16 milliseconds92.08% &lt;= 17 milliseconds94.87% &lt;= 18 milliseconds96.59% &lt;= 19 milliseconds97.49% &lt;= 20 milliseconds98.54% &lt;= 21 milliseconds99.14% &lt;= 22 milliseconds99.62% &lt;= 23 milliseconds99.80% &lt;= 24 milliseconds99.97% &lt;= 25 milliseconds100.00% &lt;= 25 milliseconds46189.38 requests per secondPING_BULK: 0.00PING_BULK: 50348.31PING_BULK: 46936.17PING_BULK: 46209.09PING_BULK: 45281.28PING_BULK: 45749.22PING_BULK: 46259.40PING_BULK: 46627.02PING_BULK: 46880.55====== PING_BULK ====== 100000 requests completed in 2.14 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 2 milliseconds0.01% &lt;= 3 milliseconds0.48% &lt;= 4 milliseconds1.45% &lt;= 5 milliseconds3.42% &lt;= 6 milliseconds6.71% &lt;= 7 milliseconds12.13% &lt;= 8 milliseconds20.67% &lt;= 9 milliseconds29.84% &lt;= 10 milliseconds41.66% &lt;= 11 milliseconds55.40% &lt;= 12 milliseconds68.79% &lt;= 13 milliseconds80.71% &lt;= 14 milliseconds86.64% &lt;= 15 milliseconds90.72% &lt;= 16 milliseconds93.48% &lt;= 17 milliseconds95.29% &lt;= 18 milliseconds97.57% &lt;= 19 milliseconds98.43% &lt;= 20 milliseconds98.96% &lt;= 21 milliseconds99.08% &lt;= 22 milliseconds99.25% &lt;= 23 milliseconds99.47% &lt;= 24 milliseconds99.53% &lt;= 25 milliseconds99.62% &lt;= 26 milliseconds99.65% &lt;= 27 milliseconds99.80% &lt;= 28 milliseconds99.95% &lt;= 29 milliseconds100.00% &lt;= 29 milliseconds46816.48 requests per secondSET: 0.00SET: 42943.82SET: 41888.89SET: 40346.60SET: 38730.81SET: 38268.33SET: 38060.63SET: 38324.93SET: 38287.60SET: 38164.56SET: 38803.06====== SET ====== 100000 requests completed in 2.58 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 4 milliseconds0.13% &lt;= 5 milliseconds0.44% &lt;= 6 milliseconds1.18% &lt;= 7 milliseconds2.08% &lt;= 8 milliseconds3.17% &lt;= 9 milliseconds3.94% &lt;= 10 milliseconds5.60% &lt;= 11 milliseconds8.40% &lt;= 12 milliseconds12.39% &lt;= 13 milliseconds16.85% &lt;= 14 milliseconds21.76% &lt;= 15 milliseconds25.25% &lt;= 16 milliseconds31.24% &lt;= 17 milliseconds38.57% &lt;= 18 milliseconds47.07% &lt;= 19 milliseconds54.54% &lt;= 20 milliseconds60.23% &lt;= 21 milliseconds64.63% &lt;= 22 milliseconds70.25% &lt;= 23 milliseconds73.82% &lt;= 24 milliseconds77.21% &lt;= 25 milliseconds80.82% &lt;= 26 milliseconds84.45% &lt;= 27 milliseconds87.18% &lt;= 28 milliseconds89.37% &lt;= 29 milliseconds91.31% &lt;= 30 milliseconds93.97% &lt;= 31 milliseconds95.67% &lt;= 32 milliseconds97.05% &lt;= 33 milliseconds97.64% &lt;= 34 milliseconds98.13% &lt;= 35 milliseconds98.61% &lt;= 36 milliseconds98.92% &lt;= 37 milliseconds99.21% &lt;= 38 milliseconds99.34% &lt;= 39 milliseconds99.43% &lt;= 40 milliseconds99.57% &lt;= 41 milliseconds99.78% &lt;= 42 milliseconds99.92% &lt;= 43 milliseconds99.95% &lt;= 44 milliseconds99.97% &lt;= 46 milliseconds99.99% &lt;= 47 milliseconds100.00% &lt;= 47 milliseconds38744.67 requests per secondGET: 0.00GET: 44460.38GET: 48447.67GET: 47419.82GET: 46048.04GET: 46374.51GET: 45363.58GET: 44230.17GET: 43709.27GET: 43370.23====== GET ====== 100000 requests completed in 2.31 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.17% &lt;= 4 milliseconds0.43% &lt;= 5 milliseconds1.08% &lt;= 6 milliseconds3.49% &lt;= 7 milliseconds7.04% &lt;= 8 milliseconds11.62% &lt;= 9 milliseconds18.45% &lt;= 10 milliseconds26.59% &lt;= 11 milliseconds37.03% &lt;= 12 milliseconds48.12% &lt;= 13 milliseconds60.62% &lt;= 14 milliseconds71.23% &lt;= 15 milliseconds79.02% &lt;= 16 milliseconds84.98% &lt;= 17 milliseconds88.97% &lt;= 18 milliseconds91.90% &lt;= 19 milliseconds94.02% &lt;= 20 milliseconds95.97% &lt;= 21 milliseconds96.87% &lt;= 22 milliseconds97.78% &lt;= 23 milliseconds98.51% &lt;= 24 milliseconds99.01% &lt;= 25 milliseconds99.26% &lt;= 26 milliseconds99.42% &lt;= 27 milliseconds99.44% &lt;= 28 milliseconds99.52% &lt;= 29 milliseconds99.67% &lt;= 30 milliseconds99.79% &lt;= 31 milliseconds99.86% &lt;= 32 milliseconds99.87% &lt;= 33 milliseconds100.00% &lt;= 33 milliseconds43271.31 requests per secondINCR: 0.00INCR: 43350.55INCR: 37198.91INCR: 36066.42INCR: 35544.85INCR: 37008.44INCR: 37827.19INCR: 38857.61INCR: 39449.47INCR: 40050.60====== INCR ====== 100000 requests completed in 2.53 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.02% &lt;= 4 milliseconds0.14% &lt;= 5 milliseconds0.43% &lt;= 6 milliseconds1.48% &lt;= 7 milliseconds3.04% &lt;= 8 milliseconds4.97% &lt;= 9 milliseconds7.16% &lt;= 10 milliseconds9.89% &lt;= 11 milliseconds13.07% &lt;= 12 milliseconds17.86% &lt;= 13 milliseconds23.34% &lt;= 14 milliseconds28.59% &lt;= 15 milliseconds36.97% &lt;= 16 milliseconds45.31% &lt;= 17 milliseconds53.59% &lt;= 18 milliseconds61.76% &lt;= 19 milliseconds69.99% &lt;= 20 milliseconds75.75% &lt;= 21 milliseconds79.88% &lt;= 22 milliseconds83.41% &lt;= 23 milliseconds85.81% &lt;= 24 milliseconds87.66% &lt;= 25 milliseconds89.64% &lt;= 26 milliseconds91.63% &lt;= 27 milliseconds92.98% &lt;= 28 milliseconds94.47% &lt;= 29 milliseconds95.47% &lt;= 30 milliseconds96.38% &lt;= 31 milliseconds96.75% &lt;= 32 milliseconds97.23% &lt;= 33 milliseconds97.64% &lt;= 34 milliseconds97.87% &lt;= 35 milliseconds97.98% &lt;= 36 milliseconds98.01% &lt;= 37 milliseconds98.11% &lt;= 38 milliseconds98.16% &lt;= 39 milliseconds98.17% &lt;= 40 milliseconds98.23% &lt;= 41 milliseconds98.24% &lt;= 42 milliseconds98.29% &lt;= 43 milliseconds98.39% &lt;= 44 milliseconds98.44% &lt;= 46 milliseconds98.47% &lt;= 47 milliseconds98.52% &lt;= 48 milliseconds98.53% &lt;= 51 milliseconds98.53% &lt;= 52 milliseconds98.57% &lt;= 53 milliseconds98.63% &lt;= 54 milliseconds98.67% &lt;= 55 milliseconds98.75% &lt;= 61 milliseconds98.75% &lt;= 62 milliseconds98.85% &lt;= 63 milliseconds98.86% &lt;= 65 milliseconds98.88% &lt;= 66 milliseconds98.92% &lt;= 67 milliseconds98.93% &lt;= 68 milliseconds98.96% &lt;= 71 milliseconds98.97% &lt;= 72 milliseconds98.98% &lt;= 73 milliseconds98.99% &lt;= 74 milliseconds99.00% &lt;= 77 milliseconds99.04% &lt;= 78 milliseconds99.05% &lt;= 81 milliseconds99.08% &lt;= 82 milliseconds99.09% &lt;= 87 milliseconds99.13% &lt;= 88 milliseconds99.14% &lt;= 89 milliseconds99.19% &lt;= 90 milliseconds99.23% &lt;= 98 milliseconds99.28% &lt;= 101 milliseconds99.29% &lt;= 103 milliseconds99.43% &lt;= 104 milliseconds99.43% &lt;= 105 milliseconds99.47% &lt;= 109 milliseconds99.47% &lt;= 110 milliseconds99.50% &lt;= 111 milliseconds99.50% &lt;= 112 milliseconds99.58% &lt;= 119 milliseconds99.58% &lt;= 126 milliseconds99.61% &lt;= 127 milliseconds99.62% &lt;= 131 milliseconds99.62% &lt;= 132 milliseconds99.69% &lt;= 133 milliseconds99.72% &lt;= 138 milliseconds99.75% &lt;= 139 milliseconds99.78% &lt;= 140 milliseconds99.80% &lt;= 144 milliseconds99.82% &lt;= 145 milliseconds99.85% &lt;= 146 milliseconds99.89% &lt;= 147 milliseconds99.93% &lt;= 148 milliseconds99.94% &lt;= 150 milliseconds99.95% &lt;= 152 milliseconds99.96% &lt;= 153 milliseconds100.00% &lt;= 153 milliseconds39541.32 requests per secondLPUSH: 0.00LPUSH: 36614.23LPUSH: 38839.77LPUSH: 39792.75LPUSH: 41082.19LPUSH: 40486.64LPUSH: 40505.58LPUSH: 40440.00LPUSH: 40923.00LPUSH: 41500.44====== LPUSH ====== 100000 requests completed in 2.43 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.01% &lt;= 4 milliseconds0.02% &lt;= 5 milliseconds0.02% &lt;= 6 milliseconds0.40% &lt;= 7 milliseconds0.89% &lt;= 8 milliseconds1.33% &lt;= 9 milliseconds2.36% &lt;= 10 milliseconds3.60% &lt;= 11 milliseconds4.92% &lt;= 12 milliseconds7.13% &lt;= 13 milliseconds9.98% &lt;= 14 milliseconds12.54% &lt;= 15 milliseconds17.18% &lt;= 16 milliseconds23.76% &lt;= 17 milliseconds33.21% &lt;= 18 milliseconds43.72% &lt;= 19 milliseconds53.84% &lt;= 20 milliseconds62.24% &lt;= 21 milliseconds68.77% &lt;= 22 milliseconds74.40% &lt;= 23 milliseconds78.45% &lt;= 24 milliseconds82.74% &lt;= 25 milliseconds86.25% &lt;= 26 milliseconds89.99% &lt;= 27 milliseconds91.90% &lt;= 28 milliseconds93.56% &lt;= 29 milliseconds95.13% &lt;= 30 milliseconds96.70% &lt;= 31 milliseconds98.21% &lt;= 32 milliseconds98.88% &lt;= 33 milliseconds99.36% &lt;= 34 milliseconds99.52% &lt;= 35 milliseconds99.67% &lt;= 36 milliseconds99.70% &lt;= 38 milliseconds99.73% &lt;= 39 milliseconds99.82% &lt;= 40 milliseconds99.89% &lt;= 41 milliseconds99.93% &lt;= 42 milliseconds100.00% &lt;= 47 milliseconds41084.63 requests per secondRPUSH: 0.00RPUSH: 38049.50RPUSH: 40777.58RPUSH: 42499.38RPUSH: 43915.01RPUSH: 44144.16RPUSH: 44390.20RPUSH: 45003.84RPUSH: 44804.44====== RPUSH ====== 100000 requests completed in 2.23 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 4 milliseconds0.00% &lt;= 5 milliseconds0.28% &lt;= 6 milliseconds1.06% &lt;= 7 milliseconds2.16% &lt;= 8 milliseconds3.68% &lt;= 9 milliseconds5.77% &lt;= 10 milliseconds7.78% &lt;= 11 milliseconds10.56% &lt;= 12 milliseconds14.10% &lt;= 13 milliseconds20.39% &lt;= 14 milliseconds27.68% &lt;= 15 milliseconds37.40% &lt;= 16 milliseconds49.89% &lt;= 17 milliseconds58.89% &lt;= 18 milliseconds64.72% &lt;= 19 milliseconds71.89% &lt;= 20 milliseconds79.99% &lt;= 21 milliseconds85.12% &lt;= 22 milliseconds88.84% &lt;= 23 milliseconds91.48% &lt;= 24 milliseconds93.80% &lt;= 25 milliseconds95.13% &lt;= 26 milliseconds96.33% &lt;= 27 milliseconds97.43% &lt;= 28 milliseconds97.90% &lt;= 29 milliseconds98.64% &lt;= 30 milliseconds98.76% &lt;= 31 milliseconds98.95% &lt;= 32 milliseconds99.24% &lt;= 33 milliseconds99.37% &lt;= 34 milliseconds99.42% &lt;= 35 milliseconds99.44% &lt;= 36 milliseconds99.46% &lt;= 37 milliseconds99.55% &lt;= 38 milliseconds99.61% &lt;= 41 milliseconds99.65% &lt;= 42 milliseconds99.67% &lt;= 43 milliseconds99.73% &lt;= 44 milliseconds99.89% &lt;= 45 milliseconds99.90% &lt;= 46 milliseconds99.90% &lt;= 47 milliseconds99.92% &lt;= 48 milliseconds99.95% &lt;= 49 milliseconds100.00% &lt;= 50 milliseconds100.00% &lt;= 51 milliseconds44883.30 requests per secondLPOP: 0.00LPOP: 41616.54LPOP: 41331.40LPOP: 41964.80LPOP: 42209.23LPOP: 42445.58LPOP: 42723.98LPOP: 42962.69LPOP: 42578.01LPOP: 42283.45====== LPOP ====== 100000 requests completed in 2.38 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 4 milliseconds0.04% &lt;= 5 milliseconds0.26% &lt;= 6 milliseconds1.06% &lt;= 7 milliseconds2.21% &lt;= 8 milliseconds3.59% &lt;= 9 milliseconds5.04% &lt;= 10 milliseconds6.92% &lt;= 11 milliseconds9.99% &lt;= 12 milliseconds13.85% &lt;= 13 milliseconds18.83% &lt;= 14 milliseconds24.43% &lt;= 15 milliseconds30.09% &lt;= 16 milliseconds38.13% &lt;= 17 milliseconds48.56% &lt;= 18 milliseconds58.66% &lt;= 19 milliseconds67.06% &lt;= 20 milliseconds73.94% &lt;= 21 milliseconds80.23% &lt;= 22 milliseconds84.82% &lt;= 23 milliseconds87.86% &lt;= 24 milliseconds90.00% &lt;= 25 milliseconds92.32% &lt;= 26 milliseconds93.93% &lt;= 27 milliseconds95.66% &lt;= 28 milliseconds96.98% &lt;= 29 milliseconds97.64% &lt;= 30 milliseconds98.20% &lt;= 31 milliseconds99.04% &lt;= 32 milliseconds99.46% &lt;= 33 milliseconds99.69% &lt;= 34 milliseconds99.73% &lt;= 35 milliseconds99.75% &lt;= 36 milliseconds99.83% &lt;= 37 milliseconds99.83% &lt;= 39 milliseconds99.90% &lt;= 40 milliseconds99.95% &lt;= 41 milliseconds99.98% &lt;= 45 milliseconds100.00% &lt;= 45 milliseconds42087.54 requests per secondRPOP: 0.00RPOP: 43228.26RPOP: 45958.25RPOP: 46097.81RPOP: 45476.19RPOP: 44500.39RPOP: 43137.75RPOP: 42008.93RPOP: 41954.97RPOP: 41620.23====== RPOP ====== 100000 requests completed in 2.40 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.01% &lt;= 4 milliseconds0.11% &lt;= 5 milliseconds0.46% &lt;= 6 milliseconds1.10% &lt;= 7 milliseconds1.93% &lt;= 8 milliseconds3.23% &lt;= 9 milliseconds4.46% &lt;= 10 milliseconds6.30% &lt;= 11 milliseconds9.22% &lt;= 12 milliseconds13.87% &lt;= 13 milliseconds17.58% &lt;= 14 milliseconds22.66% &lt;= 15 milliseconds28.07% &lt;= 16 milliseconds38.93% &lt;= 17 milliseconds49.37% &lt;= 18 milliseconds56.45% &lt;= 19 milliseconds62.92% &lt;= 20 milliseconds69.25% &lt;= 21 milliseconds74.77% &lt;= 22 milliseconds79.90% &lt;= 23 milliseconds83.63% &lt;= 24 milliseconds86.96% &lt;= 25 milliseconds89.32% &lt;= 26 milliseconds91.51% &lt;= 27 milliseconds93.45% &lt;= 28 milliseconds95.22% &lt;= 29 milliseconds96.43% &lt;= 30 milliseconds97.09% &lt;= 31 milliseconds97.66% &lt;= 32 milliseconds98.19% &lt;= 33 milliseconds98.72% &lt;= 34 milliseconds99.23% &lt;= 35 milliseconds99.37% &lt;= 36 milliseconds99.42% &lt;= 37 milliseconds99.62% &lt;= 38 milliseconds99.88% &lt;= 39 milliseconds99.94% &lt;= 40 milliseconds99.95% &lt;= 41 milliseconds100.00% &lt;= 41 milliseconds41649.31 requests per secondSADD: 0.00SADD: 51855.02SADD: 52179.73SADD: 52210.32SADD: 51780.37SADD: 51128.91SADD: 51004.55SADD: 50487.45====== SADD ====== 100000 requests completed in 2.01 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 2 milliseconds0.02% &lt;= 3 milliseconds0.69% &lt;= 4 milliseconds1.65% &lt;= 5 milliseconds3.53% &lt;= 6 milliseconds7.50% &lt;= 7 milliseconds13.13% &lt;= 8 milliseconds20.58% &lt;= 9 milliseconds29.14% &lt;= 10 milliseconds39.49% &lt;= 11 milliseconds52.15% &lt;= 12 milliseconds63.90% &lt;= 13 milliseconds72.46% &lt;= 14 milliseconds77.78% &lt;= 15 milliseconds83.04% &lt;= 16 milliseconds87.36% &lt;= 17 milliseconds91.32% &lt;= 18 milliseconds94.04% &lt;= 19 milliseconds95.76% &lt;= 20 milliseconds97.11% &lt;= 21 milliseconds97.93% &lt;= 22 milliseconds98.69% &lt;= 23 milliseconds99.18% &lt;= 24 milliseconds99.45% &lt;= 25 milliseconds99.75% &lt;= 26 milliseconds99.90% &lt;= 27 milliseconds99.95% &lt;= 28 milliseconds100.00% &lt;= 30 milliseconds49776.01 requests per secondSPOP: 0.00SPOP: 46968.09SPOP: 41507.52SPOP: 37956.69SPOP: 40148.79SPOP: 38308.35SPOP: 37963.13SPOP: 39410.68SPOP: 39633.40SPOP: 38861.61====== SPOP ====== 100000 requests completed in 2.54 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.44% &lt;= 4 milliseconds1.17% &lt;= 5 milliseconds2.73% &lt;= 6 milliseconds5.39% &lt;= 7 milliseconds8.72% &lt;= 8 milliseconds13.43% &lt;= 9 milliseconds20.22% &lt;= 10 milliseconds27.72% &lt;= 11 milliseconds36.48% &lt;= 12 milliseconds46.30% &lt;= 13 milliseconds55.81% &lt;= 14 milliseconds63.46% &lt;= 15 milliseconds69.16% &lt;= 16 milliseconds74.49% &lt;= 17 milliseconds78.85% &lt;= 18 milliseconds82.19% &lt;= 19 milliseconds85.55% &lt;= 20 milliseconds87.73% &lt;= 21 milliseconds89.88% &lt;= 22 milliseconds91.31% &lt;= 23 milliseconds92.50% &lt;= 24 milliseconds93.28% &lt;= 25 milliseconds93.82% &lt;= 26 milliseconds94.76% &lt;= 27 milliseconds95.52% &lt;= 28 milliseconds96.31% &lt;= 29 milliseconds97.22% &lt;= 30 milliseconds97.57% &lt;= 31 milliseconds97.86% &lt;= 32 milliseconds98.00% &lt;= 33 milliseconds98.18% &lt;= 34 milliseconds98.36% &lt;= 35 milliseconds98.57% &lt;= 36 milliseconds98.75% &lt;= 37 milliseconds98.95% &lt;= 38 milliseconds99.20% &lt;= 39 milliseconds99.38% &lt;= 40 milliseconds99.47% &lt;= 41 milliseconds99.61% &lt;= 42 milliseconds99.72% &lt;= 43 milliseconds99.77% &lt;= 44 milliseconds99.80% &lt;= 45 milliseconds99.83% &lt;= 46 milliseconds99.84% &lt;= 47 milliseconds99.84% &lt;= 48 milliseconds99.89% &lt;= 49 milliseconds99.93% &lt;= 50 milliseconds99.96% &lt;= 51 milliseconds99.96% &lt;= 54 milliseconds99.98% &lt;= 55 milliseconds100.00% &lt;= 55 milliseconds39385.59 requests per secondLPUSH (needed to benchmark LRANGE): 0.00LPUSH (needed to benchmark LRANGE): 40350.00LPUSH (needed to benchmark LRANGE): 43356.16LPUSH (needed to benchmark LRANGE): 39123.54LPUSH (needed to benchmark LRANGE): 36397.67LPUSH (needed to benchmark LRANGE): 37048.40LPUSH (needed to benchmark LRANGE): 35118.49LPUSH (needed to benchmark LRANGE): 35086.59LPUSH (needed to benchmark LRANGE): 34418.49LPUSH (needed to benchmark LRANGE): 33290.24LPUSH (needed to benchmark LRANGE): 33927.59LPUSH (needed to benchmark LRANGE): 33270.23LPUSH (needed to benchmark LRANGE): 32143.14====== LPUSH (needed to benchmark LRANGE) ====== 100000 requests completed in 3.16 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 3 milliseconds0.01% &lt;= 4 milliseconds0.01% &lt;= 5 milliseconds0.15% &lt;= 6 milliseconds0.29% &lt;= 7 milliseconds0.53% &lt;= 8 milliseconds1.07% &lt;= 9 milliseconds1.90% &lt;= 10 milliseconds3.40% &lt;= 11 milliseconds5.49% &lt;= 12 milliseconds7.96% &lt;= 13 milliseconds10.60% &lt;= 14 milliseconds14.91% &lt;= 15 milliseconds20.34% &lt;= 16 milliseconds24.59% &lt;= 17 milliseconds30.83% &lt;= 18 milliseconds36.47% &lt;= 19 milliseconds42.94% &lt;= 20 milliseconds48.69% &lt;= 21 milliseconds52.65% &lt;= 22 milliseconds56.48% &lt;= 23 milliseconds59.96% &lt;= 24 milliseconds63.13% &lt;= 25 milliseconds66.65% &lt;= 26 milliseconds69.27% &lt;= 27 milliseconds71.21% &lt;= 28 milliseconds73.74% &lt;= 29 milliseconds76.12% &lt;= 30 milliseconds78.21% &lt;= 31 milliseconds80.02% &lt;= 32 milliseconds81.45% &lt;= 33 milliseconds83.16% &lt;= 34 milliseconds85.16% &lt;= 35 milliseconds86.69% &lt;= 36 milliseconds87.77% &lt;= 37 milliseconds88.80% &lt;= 38 milliseconds89.97% &lt;= 39 milliseconds90.75% &lt;= 40 milliseconds91.38% &lt;= 41 milliseconds92.17% &lt;= 42 milliseconds93.18% &lt;= 43 milliseconds93.55% &lt;= 44 milliseconds93.84% &lt;= 45 milliseconds94.40% &lt;= 46 milliseconds94.86% &lt;= 47 milliseconds95.40% &lt;= 48 milliseconds95.70% &lt;= 49 milliseconds96.27% &lt;= 50 milliseconds96.64% &lt;= 51 milliseconds97.06% &lt;= 52 milliseconds97.36% &lt;= 53 milliseconds97.51% &lt;= 54 milliseconds97.67% &lt;= 55 milliseconds97.94% &lt;= 56 milliseconds98.12% &lt;= 57 milliseconds98.23% &lt;= 58 milliseconds98.26% &lt;= 59 milliseconds98.27% &lt;= 60 milliseconds98.30% &lt;= 61 milliseconds98.41% &lt;= 62 milliseconds98.51% &lt;= 63 milliseconds98.60% &lt;= 64 milliseconds98.74% &lt;= 65 milliseconds98.89% &lt;= 66 milliseconds99.02% &lt;= 67 milliseconds99.16% &lt;= 68 milliseconds99.21% &lt;= 69 milliseconds99.35% &lt;= 70 milliseconds99.45% &lt;= 71 milliseconds99.47% &lt;= 72 milliseconds99.53% &lt;= 73 milliseconds99.61% &lt;= 74 milliseconds99.66% &lt;= 78 milliseconds99.68% &lt;= 79 milliseconds99.71% &lt;= 80 milliseconds99.74% &lt;= 81 milliseconds99.78% &lt;= 84 milliseconds99.87% &lt;= 85 milliseconds99.95% &lt;= 86 milliseconds99.99% &lt;= 87 milliseconds100.00% &lt;= 91 milliseconds31665.61 requests per secondLRANGE_100 (first 100 elements): 0.00LRANGE_100 (first 100 elements): 16503.68LRANGE_100 (first 100 elements): 16992.54LRANGE_100 (first 100 elements): 16684.67LRANGE_100 (first 100 elements): 17255.86LRANGE_100 (first 100 elements): 16290.59LRANGE_100 (first 100 elements): 15484.75LRANGE_100 (first 100 elements): 14759.02LRANGE_100 (first 100 elements): 15009.30LRANGE_100 (first 100 elements): 14440.08LRANGE_100 (first 100 elements): 14616.45LRANGE_100 (first 100 elements): 14677.33LRANGE_100 (first 100 elements): 14453.56LRANGE_100 (first 100 elements): 14703.44LRANGE_100 (first 100 elements): 14967.08LRANGE_100 (first 100 elements): 15217.75LRANGE_100 (first 100 elements): 15423.78LRANGE_100 (first 100 elements): 15582.29LRANGE_100 (first 100 elements): 15879.39LRANGE_100 (first 100 elements): 16118.90LRANGE_100 (first 100 elements): 16300.07LRANGE_100 (first 100 elements): 16454.85LRANGE_100 (first 100 elements): 16486.72====== LRANGE_100 (first 100 elements) ====== 100000 requests completed in 6.04 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 14 milliseconds0.02% &lt;= 15 milliseconds0.06% &lt;= 16 milliseconds0.30% &lt;= 17 milliseconds0.60% &lt;= 18 milliseconds1.57% &lt;= 19 milliseconds2.61% &lt;= 20 milliseconds4.04% &lt;= 21 milliseconds5.86% &lt;= 22 milliseconds8.25% &lt;= 23 milliseconds11.08% &lt;= 24 milliseconds15.03% &lt;= 25 milliseconds19.80% &lt;= 26 milliseconds24.77% &lt;= 27 milliseconds29.86% &lt;= 28 milliseconds35.47% &lt;= 29 milliseconds40.37% &lt;= 30 milliseconds45.40% &lt;= 31 milliseconds50.50% &lt;= 32 milliseconds55.05% &lt;= 33 milliseconds59.34% &lt;= 34 milliseconds62.12% &lt;= 35 milliseconds64.71% &lt;= 36 milliseconds67.20% &lt;= 37 milliseconds69.43% &lt;= 38 milliseconds71.26% &lt;= 39 milliseconds72.84% &lt;= 40 milliseconds74.64% &lt;= 41 milliseconds76.11% &lt;= 42 milliseconds77.42% &lt;= 43 milliseconds78.57% &lt;= 44 milliseconds79.94% &lt;= 45 milliseconds81.80% &lt;= 46 milliseconds83.39% &lt;= 47 milliseconds85.25% &lt;= 48 milliseconds86.78% &lt;= 49 milliseconds88.46% &lt;= 50 milliseconds90.03% &lt;= 51 milliseconds91.47% &lt;= 52 milliseconds92.51% &lt;= 53 milliseconds93.28% &lt;= 54 milliseconds94.00% &lt;= 55 milliseconds94.62% &lt;= 56 milliseconds95.25% &lt;= 57 milliseconds95.74% &lt;= 58 milliseconds96.01% &lt;= 59 milliseconds96.38% &lt;= 60 milliseconds96.77% &lt;= 61 milliseconds97.07% &lt;= 62 milliseconds97.47% &lt;= 63 milliseconds97.76% &lt;= 64 milliseconds98.07% &lt;= 65 milliseconds98.31% &lt;= 66 milliseconds98.47% &lt;= 67 milliseconds98.61% &lt;= 68 milliseconds98.78% &lt;= 69 milliseconds98.94% &lt;= 70 milliseconds99.06% &lt;= 71 milliseconds99.13% &lt;= 72 milliseconds99.16% &lt;= 73 milliseconds99.27% &lt;= 74 milliseconds99.37% &lt;= 75 milliseconds99.47% &lt;= 76 milliseconds99.62% &lt;= 77 milliseconds99.69% &lt;= 78 milliseconds99.71% &lt;= 79 milliseconds99.82% &lt;= 80 milliseconds99.87% &lt;= 81 milliseconds99.92% &lt;= 82 milliseconds99.95% &lt;= 83 milliseconds99.97% &lt;= 84 milliseconds99.99% &lt;= 85 milliseconds100.00% &lt;= 86 milliseconds100.00% &lt;= 87 milliseconds100.00% &lt;= 87 milliseconds16564.52 requests per secondLRANGE_300 (first 300 elements): 0.00LRANGE_300 (first 300 elements): 5424.24LRANGE_300 (first 300 elements): 4953.49LRANGE_300 (first 300 elements): 5237.59LRANGE_300 (first 300 elements): 4992.38LRANGE_300 (first 300 elements): 5170.24LRANGE_300 (first 300 elements): 5340.90LRANGE_300 (first 300 elements): 5202.19LRANGE_300 (first 300 elements): 5245.88LRANGE_300 (first 300 elements): 5216.19LRANGE_300 (first 300 elements): 5155.18LRANGE_300 (first 300 elements): 5167.99LRANGE_300 (first 300 elements): 5142.78LRANGE_300 (first 300 elements): 5137.88LRANGE_300 (first 300 elements): 5133.38LRANGE_300 (first 300 elements): 5219.28LRANGE_300 (first 300 elements): 5178.15LRANGE_300 (first 300 elements): 5163.39LRANGE_300 (first 300 elements): 5213.09LRANGE_300 (first 300 elements): 5157.33LRANGE_300 (first 300 elements): 5158.23LRANGE_300 (first 300 elements): 5179.05LRANGE_300 (first 300 elements): 5215.59LRANGE_300 (first 300 elements): 5177.84LRANGE_300 (first 300 elements): 5132.08LRANGE_300 (first 300 elements): 5106.08LRANGE_300 (first 300 elements): 5170.38LRANGE_300 (first 300 elements): 5236.09LRANGE_300 (first 300 elements): 5272.49LRANGE_300 (first 300 elements): 5272.96LRANGE_300 (first 300 elements): 5295.94LRANGE_300 (first 300 elements): 5306.22LRANGE_300 (first 300 elements): 5268.58LRANGE_300 (first 300 elements): 5224.52LRANGE_300 (first 300 elements): 5232.12LRANGE_300 (first 300 elements): 5186.02LRANGE_300 (first 300 elements): 5121.18LRANGE_300 (first 300 elements): 5129.83LRANGE_300 (first 300 elements): 5091.03LRANGE_300 (first 300 elements): 5100.93LRANGE_300 (first 300 elements): 5127.19LRANGE_300 (first 300 elements): 5157.95LRANGE_300 (first 300 elements): 5129.84LRANGE_300 (first 300 elements): 5170.22LRANGE_300 (first 300 elements): 5203.57LRANGE_300 (first 300 elements): 5235.13LRANGE_300 (first 300 elements): 5266.25LRANGE_300 (first 300 elements): 5297.99LRANGE_300 (first 300 elements): 5329.12LRANGE_300 (first 300 elements): 5359.23LRANGE_300 (first 300 elements): 5383.11LRANGE_300 (first 300 elements): 5410.87LRANGE_300 (first 300 elements): 5435.52LRANGE_300 (first 300 elements): 5456.57LRANGE_300 (first 300 elements): 5481.72LRANGE_300 (first 300 elements): 5501.63LRANGE_300 (first 300 elements): 5514.00LRANGE_300 (first 300 elements): 5523.20LRANGE_300 (first 300 elements): 5499.37LRANGE_300 (first 300 elements): 5517.71LRANGE_300 (first 300 elements): 5492.07====== LRANGE_300 (first 300 elements) ====== 100000 requests completed in 18.19 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 10 milliseconds0.01% &lt;= 15 milliseconds0.01% &lt;= 16 milliseconds0.02% &lt;= 17 milliseconds0.03% &lt;= 18 milliseconds0.04% &lt;= 19 milliseconds0.05% &lt;= 24 milliseconds0.05% &lt;= 25 milliseconds0.07% &lt;= 26 milliseconds0.08% &lt;= 27 milliseconds0.09% &lt;= 31 milliseconds0.09% &lt;= 32 milliseconds0.10% &lt;= 33 milliseconds0.10% &lt;= 34 milliseconds0.11% &lt;= 38 milliseconds0.11% &lt;= 39 milliseconds0.12% &lt;= 40 milliseconds0.12% &lt;= 41 milliseconds0.12% &lt;= 42 milliseconds0.12% &lt;= 44 milliseconds0.13% &lt;= 45 milliseconds0.15% &lt;= 46 milliseconds0.16% &lt;= 47 milliseconds0.20% &lt;= 49 milliseconds0.21% &lt;= 50 milliseconds0.23% &lt;= 51 milliseconds0.24% &lt;= 52 milliseconds0.25% &lt;= 53 milliseconds0.27% &lt;= 54 milliseconds0.27% &lt;= 55 milliseconds0.29% &lt;= 56 milliseconds0.30% &lt;= 57 milliseconds0.36% &lt;= 58 milliseconds0.48% &lt;= 59 milliseconds0.56% &lt;= 60 milliseconds0.59% &lt;= 61 milliseconds0.75% &lt;= 62 milliseconds1.01% &lt;= 63 milliseconds1.46% &lt;= 64 milliseconds1.86% &lt;= 65 milliseconds2.59% &lt;= 66 milliseconds3.60% &lt;= 67 milliseconds5.26% &lt;= 68 milliseconds7.57% &lt;= 69 milliseconds9.84% &lt;= 70 milliseconds12.41% &lt;= 71 milliseconds15.03% &lt;= 72 milliseconds17.77% &lt;= 73 milliseconds20.65% &lt;= 74 milliseconds23.67% &lt;= 75 milliseconds26.44% &lt;= 76 milliseconds29.34% &lt;= 77 milliseconds32.20% &lt;= 78 milliseconds35.59% &lt;= 79 milliseconds39.14% &lt;= 80 milliseconds42.72% &lt;= 81 milliseconds46.16% &lt;= 82 milliseconds48.95% &lt;= 83 milliseconds51.74% &lt;= 84 milliseconds54.20% &lt;= 85 milliseconds56.20% &lt;= 86 milliseconds58.07% &lt;= 87 milliseconds59.51% &lt;= 88 milliseconds60.61% &lt;= 89 milliseconds61.36% &lt;= 90 milliseconds62.18% &lt;= 91 milliseconds62.93% &lt;= 92 milliseconds63.65% &lt;= 93 milliseconds64.32% &lt;= 94 milliseconds65.02% &lt;= 95 milliseconds65.87% &lt;= 96 milliseconds66.80% &lt;= 97 milliseconds67.74% &lt;= 98 milliseconds68.70% &lt;= 99 milliseconds69.62% &lt;= 100 milliseconds70.54% &lt;= 101 milliseconds71.44% &lt;= 102 milliseconds72.12% &lt;= 103 milliseconds72.83% &lt;= 104 milliseconds73.39% &lt;= 105 milliseconds73.95% &lt;= 106 milliseconds74.51% &lt;= 107 milliseconds75.08% &lt;= 108 milliseconds75.57% &lt;= 109 milliseconds76.17% &lt;= 110 milliseconds76.73% &lt;= 111 milliseconds77.24% &lt;= 112 milliseconds77.79% &lt;= 113 milliseconds78.32% &lt;= 114 milliseconds78.97% &lt;= 115 milliseconds79.68% &lt;= 116 milliseconds80.32% &lt;= 117 milliseconds80.95% &lt;= 118 milliseconds81.56% &lt;= 119 milliseconds82.16% &lt;= 120 milliseconds82.76% &lt;= 121 milliseconds83.24% &lt;= 122 milliseconds83.53% &lt;= 123 milliseconds83.80% &lt;= 124 milliseconds84.23% &lt;= 125 milliseconds84.75% &lt;= 126 milliseconds85.28% &lt;= 127 milliseconds85.80% &lt;= 128 milliseconds86.35% &lt;= 129 milliseconds86.87% &lt;= 130 milliseconds87.31% &lt;= 131 milliseconds87.84% &lt;= 132 milliseconds88.46% &lt;= 133 milliseconds89.07% &lt;= 134 milliseconds89.72% &lt;= 135 milliseconds90.25% &lt;= 136 milliseconds90.76% &lt;= 137 milliseconds91.29% &lt;= 138 milliseconds91.68% &lt;= 139 milliseconds92.05% &lt;= 140 milliseconds92.33% &lt;= 141 milliseconds92.61% &lt;= 142 milliseconds92.94% &lt;= 143 milliseconds93.24% &lt;= 144 milliseconds93.59% &lt;= 145 milliseconds93.93% &lt;= 146 milliseconds94.29% &lt;= 147 milliseconds94.67% &lt;= 148 milliseconds95.05% &lt;= 149 milliseconds95.42% &lt;= 150 milliseconds95.72% &lt;= 151 milliseconds96.06% &lt;= 152 milliseconds96.31% &lt;= 153 milliseconds96.51% &lt;= 154 milliseconds96.76% &lt;= 155 milliseconds96.92% &lt;= 156 milliseconds97.06% &lt;= 157 milliseconds97.18% &lt;= 158 milliseconds97.31% &lt;= 159 milliseconds97.43% &lt;= 160 milliseconds97.57% &lt;= 161 milliseconds97.73% &lt;= 162 milliseconds97.88% &lt;= 163 milliseconds98.00% &lt;= 164 milliseconds98.12% &lt;= 165 milliseconds98.29% &lt;= 166 milliseconds98.41% &lt;= 167 milliseconds98.58% &lt;= 168 milliseconds98.67% &lt;= 169 milliseconds98.74% &lt;= 170 milliseconds98.83% &lt;= 171 milliseconds98.91% &lt;= 172 milliseconds98.97% &lt;= 173 milliseconds99.04% &lt;= 174 milliseconds99.10% &lt;= 175 milliseconds99.16% &lt;= 176 milliseconds99.21% &lt;= 177 milliseconds99.29% &lt;= 178 milliseconds99.36% &lt;= 179 milliseconds99.43% &lt;= 180 milliseconds99.49% &lt;= 181 milliseconds99.54% &lt;= 182 milliseconds99.58% &lt;= 183 milliseconds99.62% &lt;= 184 milliseconds99.65% &lt;= 185 milliseconds99.70% &lt;= 186 milliseconds99.73% &lt;= 187 milliseconds99.75% &lt;= 188 milliseconds99.77% &lt;= 189 milliseconds99.77% &lt;= 190 milliseconds99.77% &lt;= 191 milliseconds99.78% &lt;= 192 milliseconds99.81% &lt;= 193 milliseconds99.82% &lt;= 194 milliseconds99.83% &lt;= 195 milliseconds99.84% &lt;= 196 milliseconds99.85% &lt;= 197 milliseconds99.85% &lt;= 198 milliseconds99.86% &lt;= 199 milliseconds99.87% &lt;= 200 milliseconds99.88% &lt;= 201 milliseconds99.89% &lt;= 202 milliseconds99.91% &lt;= 203 milliseconds99.92% &lt;= 204 milliseconds99.94% &lt;= 205 milliseconds99.95% &lt;= 206 milliseconds99.96% &lt;= 207 milliseconds99.96% &lt;= 208 milliseconds99.98% &lt;= 209 milliseconds99.98% &lt;= 210 milliseconds99.98% &lt;= 211 milliseconds99.98% &lt;= 212 milliseconds99.99% &lt;= 213 milliseconds100.00% &lt;= 214 milliseconds100.00% &lt;= 215 milliseconds5496.62 requests per secondLRANGE_500 (first 450 elements): 0.00LRANGE_500 (first 450 elements): 3957.45LRANGE_500 (first 450 elements): 4221.52LRANGE_500 (first 450 elements): 3893.62LRANGE_500 (first 450 elements): 4178.99LRANGE_500 (first 450 elements): 4379.11LRANGE_500 (first 450 elements): 4388.22LRANGE_500 (first 450 elements): 4402.96LRANGE_500 (first 450 elements): 4332.26LRANGE_500 (first 450 elements): 4405.73LRANGE_500 (first 450 elements): 4532.40LRANGE_500 (first 450 elements): 4614.05LRANGE_500 (first 450 elements): 4638.36LRANGE_500 (first 450 elements): 4652.15LRANGE_500 (first 450 elements): 4710.54LRANGE_500 (first 450 elements): 4640.12LRANGE_500 (first 450 elements): 4660.82LRANGE_500 (first 450 elements): 4706.78LRANGE_500 (first 450 elements): 4749.03LRANGE_500 (first 450 elements): 4764.20LRANGE_500 (first 450 elements): 4734.31LRANGE_500 (first 450 elements): 4709.53LRANGE_500 (first 450 elements): 4745.56LRANGE_500 (first 450 elements): 4751.44LRANGE_500 (first 450 elements): 4764.13LRANGE_500 (first 450 elements): 4741.03LRANGE_500 (first 450 elements): 4748.73LRANGE_500 (first 450 elements): 4739.17LRANGE_500 (first 450 elements): 4735.25LRANGE_500 (first 450 elements): 4713.63LRANGE_500 (first 450 elements): 4708.21LRANGE_500 (first 450 elements): 4720.78LRANGE_500 (first 450 elements): 4708.30LRANGE_500 (first 450 elements): 4687.53LRANGE_500 (first 450 elements): 4711.45LRANGE_500 (first 450 elements): 4721.83LRANGE_500 (first 450 elements): 4744.80LRANGE_500 (first 450 elements): 4765.81LRANGE_500 (first 450 elements): 4784.21LRANGE_500 (first 450 elements): 4805.87LRANGE_500 (first 450 elements): 4824.25LRANGE_500 (first 450 elements): 4835.78LRANGE_500 (first 450 elements): 4834.69LRANGE_500 (first 450 elements): 4844.05LRANGE_500 (first 450 elements): 4848.40LRANGE_500 (first 450 elements): 4865.84LRANGE_500 (first 450 elements): 4892.78LRANGE_500 (first 450 elements): 4906.77LRANGE_500 (first 450 elements): 4924.66LRANGE_500 (first 450 elements): 4935.96LRANGE_500 (first 450 elements): 4925.82LRANGE_500 (first 450 elements): 4932.85LRANGE_500 (first 450 elements): 4941.81LRANGE_500 (first 450 elements): 4953.68LRANGE_500 (first 450 elements): 4965.87LRANGE_500 (first 450 elements): 4979.25LRANGE_500 (first 450 elements): 4990.95LRANGE_500 (first 450 elements): 5000.78LRANGE_500 (first 450 elements): 5005.47LRANGE_500 (first 450 elements): 5022.85LRANGE_500 (first 450 elements): 5037.54LRANGE_500 (first 450 elements): 5045.18LRANGE_500 (first 450 elements): 5050.72LRANGE_500 (first 450 elements): 5060.99LRANGE_500 (first 450 elements): 5071.47LRANGE_500 (first 450 elements): 5079.39LRANGE_500 (first 450 elements): 5089.05LRANGE_500 (first 450 elements): 5090.76====== LRANGE_500 (first 450 elements) ====== 100000 requests completed in 19.63 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 17 milliseconds0.02% &lt;= 18 milliseconds0.02% &lt;= 22 milliseconds0.03% &lt;= 23 milliseconds0.03% &lt;= 54 milliseconds0.04% &lt;= 55 milliseconds0.04% &lt;= 56 milliseconds0.04% &lt;= 60 milliseconds0.04% &lt;= 61 milliseconds0.06% &lt;= 62 milliseconds0.09% &lt;= 63 milliseconds0.10% &lt;= 64 milliseconds0.12% &lt;= 65 milliseconds0.15% &lt;= 66 milliseconds0.15% &lt;= 67 milliseconds0.16% &lt;= 68 milliseconds0.18% &lt;= 69 milliseconds0.28% &lt;= 70 milliseconds0.33% &lt;= 71 milliseconds0.40% &lt;= 72 milliseconds0.47% &lt;= 73 milliseconds0.56% &lt;= 74 milliseconds0.67% &lt;= 75 milliseconds0.92% &lt;= 76 milliseconds1.15% &lt;= 77 milliseconds1.53% &lt;= 78 milliseconds2.10% &lt;= 79 milliseconds3.06% &lt;= 80 milliseconds4.14% &lt;= 81 milliseconds5.29% &lt;= 82 milliseconds6.86% &lt;= 83 milliseconds9.29% &lt;= 84 milliseconds12.26% &lt;= 85 milliseconds16.79% &lt;= 86 milliseconds21.10% &lt;= 87 milliseconds26.00% &lt;= 88 milliseconds30.20% &lt;= 89 milliseconds34.38% &lt;= 90 milliseconds38.26% &lt;= 91 milliseconds41.93% &lt;= 92 milliseconds45.39% &lt;= 93 milliseconds48.84% &lt;= 94 milliseconds52.24% &lt;= 95 milliseconds55.75% &lt;= 96 milliseconds58.86% &lt;= 97 milliseconds61.85% &lt;= 98 milliseconds64.58% &lt;= 99 milliseconds66.92% &lt;= 100 milliseconds69.27% &lt;= 101 milliseconds71.26% &lt;= 102 milliseconds72.89% &lt;= 103 milliseconds74.40% &lt;= 104 milliseconds75.64% &lt;= 105 milliseconds76.74% &lt;= 106 milliseconds77.69% &lt;= 107 milliseconds78.39% &lt;= 108 milliseconds79.11% &lt;= 109 milliseconds80.00% &lt;= 110 milliseconds80.96% &lt;= 111 milliseconds81.76% &lt;= 112 milliseconds82.41% &lt;= 113 milliseconds83.33% &lt;= 114 milliseconds84.41% &lt;= 115 milliseconds85.41% &lt;= 116 milliseconds86.24% &lt;= 117 milliseconds86.79% &lt;= 118 milliseconds87.41% &lt;= 119 milliseconds87.93% &lt;= 120 milliseconds88.46% &lt;= 121 milliseconds88.90% &lt;= 122 milliseconds89.35% &lt;= 123 milliseconds89.79% &lt;= 124 milliseconds90.12% &lt;= 125 milliseconds90.48% &lt;= 126 milliseconds90.78% &lt;= 127 milliseconds91.08% &lt;= 128 milliseconds91.37% &lt;= 129 milliseconds91.65% &lt;= 130 milliseconds91.91% &lt;= 131 milliseconds92.25% &lt;= 132 milliseconds92.64% &lt;= 133 milliseconds92.95% &lt;= 134 milliseconds93.20% &lt;= 135 milliseconds93.50% &lt;= 136 milliseconds93.73% &lt;= 137 milliseconds93.90% &lt;= 138 milliseconds94.12% &lt;= 139 milliseconds94.36% &lt;= 140 milliseconds94.66% &lt;= 141 milliseconds94.92% &lt;= 142 milliseconds95.15% &lt;= 143 milliseconds95.33% &lt;= 144 milliseconds95.51% &lt;= 145 milliseconds95.69% &lt;= 146 milliseconds95.89% &lt;= 147 milliseconds96.14% &lt;= 148 milliseconds96.36% &lt;= 149 milliseconds96.55% &lt;= 150 milliseconds96.75% &lt;= 151 milliseconds96.83% &lt;= 152 milliseconds96.93% &lt;= 153 milliseconds97.08% &lt;= 154 milliseconds97.23% &lt;= 155 milliseconds97.32% &lt;= 156 milliseconds97.42% &lt;= 157 milliseconds97.52% &lt;= 158 milliseconds97.58% &lt;= 159 milliseconds97.66% &lt;= 160 milliseconds97.77% &lt;= 161 milliseconds97.86% &lt;= 162 milliseconds97.95% &lt;= 163 milliseconds98.06% &lt;= 164 milliseconds98.17% &lt;= 165 milliseconds98.26% &lt;= 166 milliseconds98.34% &lt;= 167 milliseconds98.41% &lt;= 168 milliseconds98.49% &lt;= 169 milliseconds98.53% &lt;= 170 milliseconds98.56% &lt;= 171 milliseconds98.57% &lt;= 172 milliseconds98.59% &lt;= 173 milliseconds98.61% &lt;= 174 milliseconds98.64% &lt;= 175 milliseconds98.69% &lt;= 176 milliseconds98.72% &lt;= 177 milliseconds98.76% &lt;= 178 milliseconds98.80% &lt;= 179 milliseconds98.83% &lt;= 180 milliseconds98.86% &lt;= 181 milliseconds98.88% &lt;= 182 milliseconds98.91% &lt;= 183 milliseconds98.92% &lt;= 184 milliseconds98.96% &lt;= 185 milliseconds98.99% &lt;= 186 milliseconds99.01% &lt;= 187 milliseconds99.02% &lt;= 188 milliseconds99.03% &lt;= 189 milliseconds99.04% &lt;= 190 milliseconds99.06% &lt;= 191 milliseconds99.08% &lt;= 192 milliseconds99.10% &lt;= 193 milliseconds99.12% &lt;= 194 milliseconds99.13% &lt;= 195 milliseconds99.15% &lt;= 196 milliseconds99.18% &lt;= 197 milliseconds99.20% &lt;= 198 milliseconds99.24% &lt;= 199 milliseconds99.25% &lt;= 200 milliseconds99.27% &lt;= 201 milliseconds99.29% &lt;= 202 milliseconds99.33% &lt;= 203 milliseconds99.36% &lt;= 204 milliseconds99.37% &lt;= 205 milliseconds99.38% &lt;= 206 milliseconds99.39% &lt;= 207 milliseconds99.42% &lt;= 208 milliseconds99.44% &lt;= 209 milliseconds99.46% &lt;= 210 milliseconds99.47% &lt;= 211 milliseconds99.48% &lt;= 212 milliseconds99.49% &lt;= 213 milliseconds99.51% &lt;= 214 milliseconds99.51% &lt;= 217 milliseconds99.52% &lt;= 218 milliseconds99.54% &lt;= 219 milliseconds99.56% &lt;= 220 milliseconds99.57% &lt;= 221 milliseconds99.60% &lt;= 222 milliseconds99.62% &lt;= 223 milliseconds99.64% &lt;= 224 milliseconds99.65% &lt;= 225 milliseconds99.66% &lt;= 226 milliseconds99.66% &lt;= 227 milliseconds99.67% &lt;= 228 milliseconds99.68% &lt;= 229 milliseconds99.70% &lt;= 230 milliseconds99.72% &lt;= 231 milliseconds99.73% &lt;= 232 milliseconds99.75% &lt;= 233 milliseconds99.78% &lt;= 234 milliseconds99.80% &lt;= 235 milliseconds99.82% &lt;= 236 milliseconds99.84% &lt;= 237 milliseconds99.86% &lt;= 238 milliseconds99.87% &lt;= 239 milliseconds99.88% &lt;= 240 milliseconds99.89% &lt;= 241 milliseconds99.90% &lt;= 242 milliseconds99.91% &lt;= 243 milliseconds99.91% &lt;= 244 milliseconds99.92% &lt;= 245 milliseconds99.92% &lt;= 246 milliseconds99.92% &lt;= 247 milliseconds99.92% &lt;= 248 milliseconds99.93% &lt;= 249 milliseconds99.94% &lt;= 250 milliseconds99.94% &lt;= 251 milliseconds99.95% &lt;= 252 milliseconds99.96% &lt;= 253 milliseconds99.97% &lt;= 254 milliseconds99.98% &lt;= 255 milliseconds99.99% &lt;= 256 milliseconds100.00% &lt;= 256 milliseconds5095.02 requests per secondLRANGE_600 (first 600 elements): 0.00LRANGE_600 (first 600 elements): 4141.48LRANGE_600 (first 600 elements): 4243.24LRANGE_600 (first 600 elements): 4312.63LRANGE_600 (first 600 elements): 4386.51LRANGE_600 (first 600 elements): 4402.65LRANGE_600 (first 600 elements): 4368.17LRANGE_600 (first 600 elements): 4401.50LRANGE_600 (first 600 elements): 4338.44LRANGE_600 (first 600 elements): 4319.55LRANGE_600 (first 600 elements): 4305.49LRANGE_600 (first 600 elements): 4296.12LRANGE_600 (first 600 elements): 4283.91LRANGE_600 (first 600 elements): 4288.89LRANGE_600 (first 600 elements): 4273.34LRANGE_600 (first 600 elements): 4269.54LRANGE_600 (first 600 elements): 4265.88LRANGE_600 (first 600 elements): 4287.48LRANGE_600 (first 600 elements): 4290.81LRANGE_600 (first 600 elements): 4297.72LRANGE_600 (first 600 elements): 4314.72LRANGE_600 (first 600 elements): 4320.29LRANGE_600 (first 600 elements): 4310.55LRANGE_600 (first 600 elements): 4299.28LRANGE_600 (first 600 elements): 4285.23LRANGE_600 (first 600 elements): 4263.42LRANGE_600 (first 600 elements): 4261.43LRANGE_600 (first 600 elements): 4245.66LRANGE_600 (first 600 elements): 4230.27LRANGE_600 (first 600 elements): 4232.99LRANGE_600 (first 600 elements): 4221.29LRANGE_600 (first 600 elements): 4183.69LRANGE_600 (first 600 elements): 4175.06LRANGE_600 (first 600 elements): 4187.09LRANGE_600 (first 600 elements): 4193.20LRANGE_600 (first 600 elements): 4196.37LRANGE_600 (first 600 elements): 4206.07LRANGE_600 (first 600 elements): 4209.42LRANGE_600 (first 600 elements): 4214.56LRANGE_600 (first 600 elements): 4220.65LRANGE_600 (first 600 elements): 4223.18LRANGE_600 (first 600 elements): 4218.68LRANGE_600 (first 600 elements): 4207.86LRANGE_600 (first 600 elements): 4177.80LRANGE_600 (first 600 elements): 4168.32LRANGE_600 (first 600 elements): 4162.25LRANGE_600 (first 600 elements): 4119.64LRANGE_600 (first 600 elements): 4115.85LRANGE_600 (first 600 elements): 4109.69LRANGE_600 (first 600 elements): 4105.83LRANGE_600 (first 600 elements): 4102.90LRANGE_600 (first 600 elements): 4096.54LRANGE_600 (first 600 elements): 4091.36LRANGE_600 (first 600 elements): 4089.24LRANGE_600 (first 600 elements): 4090.83LRANGE_600 (first 600 elements): 4089.75LRANGE_600 (first 600 elements): 4098.27LRANGE_600 (first 600 elements): 4108.65LRANGE_600 (first 600 elements): 4107.48LRANGE_600 (first 600 elements): 4105.40LRANGE_600 (first 600 elements): 4108.24LRANGE_600 (first 600 elements): 4110.35LRANGE_600 (first 600 elements): 4113.45LRANGE_600 (first 600 elements): 4108.82LRANGE_600 (first 600 elements): 4113.01LRANGE_600 (first 600 elements): 4111.77LRANGE_600 (first 600 elements): 4103.83LRANGE_600 (first 600 elements): 4096.90LRANGE_600 (first 600 elements): 4079.53LRANGE_600 (first 600 elements): 4070.41LRANGE_600 (first 600 elements): 4045.94LRANGE_600 (first 600 elements): 4045.43LRANGE_600 (first 600 elements): 4016.12LRANGE_600 (first 600 elements): 3998.59LRANGE_600 (first 600 elements): 3995.39LRANGE_600 (first 600 elements): 3989.65LRANGE_600 (first 600 elements): 3972.99LRANGE_600 (first 600 elements): 3973.29LRANGE_600 (first 600 elements): 3977.72====== LRANGE_600 (first 600 elements) ====== 100000 requests completed in 25.14 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 13 milliseconds0.01% &lt;= 26 milliseconds0.01% &lt;= 27 milliseconds0.03% &lt;= 28 milliseconds0.03% &lt;= 30 milliseconds0.03% &lt;= 31 milliseconds0.04% &lt;= 32 milliseconds0.05% &lt;= 33 milliseconds0.06% &lt;= 36 milliseconds0.06% &lt;= 37 milliseconds0.07% &lt;= 38 milliseconds0.07% &lt;= 39 milliseconds0.08% &lt;= 44 milliseconds0.09% &lt;= 45 milliseconds0.10% &lt;= 46 milliseconds0.11% &lt;= 47 milliseconds0.12% &lt;= 48 milliseconds0.13% &lt;= 49 milliseconds0.14% &lt;= 50 milliseconds0.14% &lt;= 57 milliseconds0.14% &lt;= 58 milliseconds0.15% &lt;= 59 milliseconds0.16% &lt;= 60 milliseconds0.17% &lt;= 61 milliseconds0.19% &lt;= 62 milliseconds0.21% &lt;= 63 milliseconds0.22% &lt;= 64 milliseconds0.23% &lt;= 65 milliseconds0.23% &lt;= 66 milliseconds0.24% &lt;= 67 milliseconds0.24% &lt;= 68 milliseconds0.25% &lt;= 69 milliseconds0.25% &lt;= 73 milliseconds0.25% &lt;= 74 milliseconds0.27% &lt;= 75 milliseconds0.29% &lt;= 76 milliseconds0.31% &lt;= 77 milliseconds0.33% &lt;= 78 milliseconds0.34% &lt;= 79 milliseconds0.36% &lt;= 80 milliseconds0.38% &lt;= 81 milliseconds0.41% &lt;= 82 milliseconds0.43% &lt;= 83 milliseconds0.44% &lt;= 84 milliseconds0.46% &lt;= 85 milliseconds0.47% &lt;= 86 milliseconds0.49% &lt;= 87 milliseconds0.50% &lt;= 88 milliseconds0.55% &lt;= 89 milliseconds0.59% &lt;= 90 milliseconds0.60% &lt;= 91 milliseconds0.62% &lt;= 92 milliseconds0.67% &lt;= 93 milliseconds0.69% &lt;= 94 milliseconds0.75% &lt;= 95 milliseconds0.80% &lt;= 96 milliseconds0.83% &lt;= 97 milliseconds0.97% &lt;= 98 milliseconds1.20% &lt;= 99 milliseconds1.50% &lt;= 100 milliseconds1.96% &lt;= 101 milliseconds2.40% &lt;= 102 milliseconds3.13% &lt;= 103 milliseconds3.92% &lt;= 104 milliseconds4.64% &lt;= 105 milliseconds5.48% &lt;= 106 milliseconds6.44% &lt;= 107 milliseconds7.57% &lt;= 108 milliseconds8.89% &lt;= 109 milliseconds10.33% &lt;= 110 milliseconds11.91% &lt;= 111 milliseconds13.74% &lt;= 112 milliseconds15.95% &lt;= 113 milliseconds18.46% &lt;= 114 milliseconds21.35% &lt;= 115 milliseconds24.79% &lt;= 116 milliseconds28.63% &lt;= 117 milliseconds32.30% &lt;= 118 milliseconds36.02% &lt;= 119 milliseconds39.60% &lt;= 120 milliseconds42.84% &lt;= 121 milliseconds45.72% &lt;= 122 milliseconds48.35% &lt;= 123 milliseconds50.83% &lt;= 124 milliseconds53.04% &lt;= 125 milliseconds55.24% &lt;= 126 milliseconds57.48% &lt;= 127 milliseconds59.84% &lt;= 128 milliseconds62.22% &lt;= 129 milliseconds64.55% &lt;= 130 milliseconds66.92% &lt;= 131 milliseconds69.03% &lt;= 132 milliseconds71.10% &lt;= 133 milliseconds73.06% &lt;= 134 milliseconds74.73% &lt;= 135 milliseconds76.11% &lt;= 136 milliseconds77.48% &lt;= 137 milliseconds78.60% &lt;= 138 milliseconds79.64% &lt;= 139 milliseconds80.58% &lt;= 140 milliseconds81.37% &lt;= 141 milliseconds82.08% &lt;= 142 milliseconds82.76% &lt;= 143 milliseconds83.50% &lt;= 144 milliseconds84.18% &lt;= 145 milliseconds84.92% &lt;= 146 milliseconds85.58% &lt;= 147 milliseconds86.16% &lt;= 148 milliseconds86.74% &lt;= 149 milliseconds87.37% &lt;= 150 milliseconds87.88% &lt;= 151 milliseconds88.35% &lt;= 152 milliseconds88.73% &lt;= 153 milliseconds89.11% &lt;= 154 milliseconds89.50% &lt;= 155 milliseconds89.88% &lt;= 156 milliseconds90.16% &lt;= 157 milliseconds90.41% &lt;= 158 milliseconds90.68% &lt;= 159 milliseconds90.95% &lt;= 160 milliseconds91.18% &lt;= 161 milliseconds91.41% &lt;= 162 milliseconds91.63% &lt;= 163 milliseconds91.82% &lt;= 164 milliseconds92.08% &lt;= 165 milliseconds92.35% &lt;= 166 milliseconds92.56% &lt;= 167 milliseconds92.80% &lt;= 168 milliseconds93.06% &lt;= 169 milliseconds93.30% &lt;= 170 milliseconds93.47% &lt;= 171 milliseconds93.65% &lt;= 172 milliseconds93.82% &lt;= 173 milliseconds93.94% &lt;= 174 milliseconds94.03% &lt;= 175 milliseconds94.16% &lt;= 176 milliseconds94.31% &lt;= 177 milliseconds94.45% &lt;= 178 milliseconds94.56% &lt;= 179 milliseconds94.71% &lt;= 180 milliseconds94.84% &lt;= 181 milliseconds94.98% &lt;= 182 milliseconds95.17% &lt;= 183 milliseconds95.36% &lt;= 184 milliseconds95.57% &lt;= 185 milliseconds95.72% &lt;= 186 milliseconds95.84% &lt;= 187 milliseconds95.99% &lt;= 188 milliseconds96.11% &lt;= 189 milliseconds96.23% &lt;= 190 milliseconds96.33% &lt;= 191 milliseconds96.42% &lt;= 192 milliseconds96.50% &lt;= 193 milliseconds96.56% &lt;= 194 milliseconds96.64% &lt;= 195 milliseconds96.72% &lt;= 196 milliseconds96.82% &lt;= 197 milliseconds96.92% &lt;= 198 milliseconds97.00% &lt;= 199 milliseconds97.12% &lt;= 200 milliseconds97.25% &lt;= 201 milliseconds97.36% &lt;= 202 milliseconds97.46% &lt;= 203 milliseconds97.57% &lt;= 204 milliseconds97.62% &lt;= 205 milliseconds97.70% &lt;= 206 milliseconds97.79% &lt;= 207 milliseconds97.87% &lt;= 208 milliseconds97.94% &lt;= 209 milliseconds98.03% &lt;= 210 milliseconds98.09% &lt;= 211 milliseconds98.18% &lt;= 212 milliseconds98.25% &lt;= 213 milliseconds98.31% &lt;= 214 milliseconds98.45% &lt;= 215 milliseconds98.61% &lt;= 216 milliseconds98.71% &lt;= 217 milliseconds98.83% &lt;= 218 milliseconds98.94% &lt;= 219 milliseconds99.00% &lt;= 220 milliseconds99.06% &lt;= 221 milliseconds99.12% &lt;= 222 milliseconds99.17% &lt;= 223 milliseconds99.25% &lt;= 224 milliseconds99.30% &lt;= 225 milliseconds99.37% &lt;= 226 milliseconds99.41% &lt;= 227 milliseconds99.45% &lt;= 228 milliseconds99.49% &lt;= 229 milliseconds99.54% &lt;= 230 milliseconds99.58% &lt;= 231 milliseconds99.61% &lt;= 232 milliseconds99.65% &lt;= 233 milliseconds99.69% &lt;= 234 milliseconds99.71% &lt;= 235 milliseconds99.75% &lt;= 236 milliseconds99.77% &lt;= 237 milliseconds99.79% &lt;= 238 milliseconds99.81% &lt;= 239 milliseconds99.83% &lt;= 240 milliseconds99.85% &lt;= 241 milliseconds99.86% &lt;= 242 milliseconds99.89% &lt;= 243 milliseconds99.91% &lt;= 244 milliseconds99.93% &lt;= 245 milliseconds99.94% &lt;= 246 milliseconds99.95% &lt;= 247 milliseconds99.96% &lt;= 248 milliseconds99.97% &lt;= 249 milliseconds99.97% &lt;= 250 milliseconds99.97% &lt;= 251 milliseconds99.97% &lt;= 252 milliseconds99.98% &lt;= 253 milliseconds99.98% &lt;= 254 milliseconds99.99% &lt;= 255 milliseconds100.00% &lt;= 256 milliseconds100.00% &lt;= 256 milliseconds3977.72 requests per secondMSET (10 keys): 0.00MSET (10 keys): 17769.78MSET (10 keys): 18903.59MSET (10 keys): 19545.57MSET (10 keys): 17979.59MSET (10 keys): 17032.03MSET (10 keys): 16139.05MSET (10 keys): 16069.64MSET (10 keys): 16504.64MSET (10 keys): 16250.43MSET (10 keys): 16364.31MSET (10 keys): 16976.48MSET (10 keys): 17136.78MSET (10 keys): 17587.36MSET (10 keys): 17400.22MSET (10 keys): 17532.25MSET (10 keys): 17647.90MSET (10 keys): 17896.02MSET (10 keys): 18023.20MSET (10 keys): 17993.77MSET (10 keys): 18080.70MSET (10 keys): 18315.56====== MSET (10 keys) ====== 100000 requests completed in 5.44 seconds 1000 parallel clients 3 bytes payload keep alive: 10.00% &lt;= 16 milliseconds0.02% &lt;= 17 milliseconds0.02% &lt;= 18 milliseconds0.06% &lt;= 19 milliseconds0.11% &lt;= 20 milliseconds0.55% &lt;= 21 milliseconds0.71% &lt;= 22 milliseconds0.92% &lt;= 23 milliseconds1.25% &lt;= 24 milliseconds1.72% &lt;= 25 milliseconds2.18% &lt;= 26 milliseconds3.26% &lt;= 27 milliseconds4.12% &lt;= 28 milliseconds5.34% &lt;= 29 milliseconds6.62% &lt;= 30 milliseconds8.05% &lt;= 31 milliseconds11.39% &lt;= 32 milliseconds13.92% &lt;= 33 milliseconds16.55% &lt;= 34 milliseconds19.13% &lt;= 35 milliseconds22.32% &lt;= 36 milliseconds25.54% &lt;= 37 milliseconds28.70% &lt;= 38 milliseconds31.06% &lt;= 39 milliseconds33.18% &lt;= 40 milliseconds35.37% &lt;= 41 milliseconds37.44% &lt;= 42 milliseconds39.52% &lt;= 43 milliseconds41.78% &lt;= 44 milliseconds43.92% &lt;= 45 milliseconds46.27% &lt;= 46 milliseconds48.48% &lt;= 47 milliseconds51.10% &lt;= 48 milliseconds53.91% &lt;= 49 milliseconds56.62% &lt;= 50 milliseconds58.84% &lt;= 51 milliseconds61.03% &lt;= 52 milliseconds63.40% &lt;= 53 milliseconds66.00% &lt;= 54 milliseconds68.37% &lt;= 55 milliseconds69.81% &lt;= 56 milliseconds71.07% &lt;= 57 milliseconds72.50% &lt;= 58 milliseconds74.15% &lt;= 59 milliseconds75.02% &lt;= 60 milliseconds76.12% &lt;= 61 milliseconds76.95% &lt;= 62 milliseconds77.87% &lt;= 63 milliseconds78.84% &lt;= 64 milliseconds80.20% &lt;= 65 milliseconds81.69% &lt;= 66 milliseconds82.63% &lt;= 67 milliseconds84.13% &lt;= 68 milliseconds85.93% &lt;= 69 milliseconds87.18% &lt;= 70 milliseconds88.80% &lt;= 71 milliseconds89.60% &lt;= 72 milliseconds90.18% &lt;= 73 milliseconds90.97% &lt;= 74 milliseconds91.49% &lt;= 75 milliseconds91.96% &lt;= 76 milliseconds92.36% &lt;= 77 milliseconds92.64% &lt;= 78 milliseconds92.98% &lt;= 79 milliseconds93.33% &lt;= 80 milliseconds93.74% &lt;= 81 milliseconds94.36% &lt;= 82 milliseconds94.85% &lt;= 83 milliseconds95.25% &lt;= 84 milliseconds95.72% &lt;= 85 milliseconds96.08% &lt;= 86 milliseconds96.68% &lt;= 87 milliseconds97.07% &lt;= 88 milliseconds97.46% &lt;= 89 milliseconds97.89% &lt;= 90 milliseconds98.19% &lt;= 91 milliseconds98.39% &lt;= 92 milliseconds98.66% &lt;= 93 milliseconds98.92% &lt;= 94 milliseconds99.05% &lt;= 95 milliseconds99.23% &lt;= 96 milliseconds99.37% &lt;= 97 milliseconds99.46% &lt;= 98 milliseconds99.50% &lt;= 100 milliseconds99.50% &lt;= 101 milliseconds99.51% &lt;= 102 milliseconds99.52% &lt;= 103 milliseconds99.53% &lt;= 106 milliseconds99.53% &lt;= 107 milliseconds99.66% &lt;= 108 milliseconds99.72% &lt;= 109 milliseconds99.78% &lt;= 110 milliseconds99.84% &lt;= 113 milliseconds99.85% &lt;= 114 milliseconds99.86% &lt;= 118 milliseconds99.86% &lt;= 119 milliseconds99.88% &lt;= 120 milliseconds99.92% &lt;= 121 milliseconds99.92% &lt;= 124 milliseconds99.92% &lt;= 125 milliseconds99.96% &lt;= 126 milliseconds99.97% &lt;= 129 milliseconds100.00% &lt;= 129 milliseconds18395.88 requests per second]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis在CentOS6上安装并配置主从]]></title>
    <url>%2F2015%2F01%2F05%2FRedis%E5%9C%A8CentOS6%E4%B8%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%2F</url>
    <content type="text"><![CDATA[安装Redisstep1：tcl工具包安装 1yum install -y install tcl step2：Redis安装 1234wget http://download.redis.io/releases/redis-2.8.13.tar.gztar -zvxf redis-2.8.13.tar.gzcd redis-2.8.13make &amp; make install Redis启动和主从配置1234mkdir /etc/redismkdir -pv /var/redis/6379mv redis.conf /etc/redis/6379.confvi /etc/redis/6379.conf 单机启动配置 12345678910#守护进程启动daemonize yes#进程id文件pidfile /var/run/redis_6379.pid#数据文件目录dir /var/redis/6379#redis节点绑定ip访问bind 192.168.1.212#redis节点访问端口port 6379 设置redis随系统自启动 12cp utils/redis_init_script /etc/init.d/redis_6379vi /etc/init.d/redis_6379 在redis_6379文件顶部添加 123#chkconfig: 2345 90 10#description: Redis is a persistent key-value databasechkconfig redis_6379 on 多节点主从配置 1234567891011121314151617181920212223242526#master节点信息slaveof 192.168.1.210 6379#master节点连接密码masterauth redis-pass#slave节点只读slave-read-only yes#slave节点连接master节点进行full synchronizaton操作时，mastr的rdb快照文件直接写入slave socket，不写入磁盘，也就是无磁盘化复制。无磁盘化配置no，磁盘化配置yes。repl-diskless-sync no#master延迟n秒后，进行无磁盘化full synchronization操作，目的是等待更多的slave节点连接master进行全量同步复制。全量数据的RDB文件一旦在master节点缓存内创建完成，就不再接收新的slave，直至本次全量同步完成。repl-diskless-sync-delay 5#主从复制的超时设置，超时则停止复制，根据RDB数据大小、硬件IO、带宽设置超时时间。默认60s。repl-timeout 60 #backlog用在slave如果断开了与master之间的连接，这时master记录一部分要写入slave的数据和offset位置，当slave重连master后，不需要进行full resync操作，只需要从slave断开连接丢失的数据开始同步即可。默认缓冲大小1M。repl-backlog-size 1mb#至少有3个slave节点数据同步延时少于10s，否则master将暂停写操作。此配置主要用来保证主从异步复制数据和redis集群脑裂时，确保数据不丢失的配置方案。配合master在不能写入数据时进行异步写队列或者磁盘，保证数据丢失在可控范围内。min-slaves-to-write 3min-slaves-max-lag 10#redis节点连接密码requirepass redis-pass#开启AOF数据持久化appendonly yes#每秒进行一次从os cache写aof文件操作appendfsync everysec#aof文件rewrite操作时机配置，当aof的文件大小已经超过64m的100%，也就是128m时，就进行rewrite aof文件。auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb 开发环境设置防火墙或者关闭防火墙 1service iptables stop 启动、访问、测试 12345678910111213141516171819202122cd /etc/init.d./redis_6379 startredis-cli -h 192.168.1.212 -a redis-pass192.168.1.212:6379&gt; info replication# Replicationrole:slavemaster_host:192.168.1.210master_port:6379master_link_status:upmaster_last_io_seconds_ago:8master_sync_in_progress:0slave_repl_offset:180178228slave_priority:100slave_read_only:1connected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
